# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class WindComfort(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'region_of_interest': 'RegionOfInterest',
        'wind_conditions': 'WindConditions',
        'pedestrian_comfort_map': 'list[PedestrianComfortSurface]',
        'simulation_control': 'WindComfortSimulationControl',
        'advanced_modelling': 'AdvancedModelling',
        'additional_result_export': 'FluidResultControls',
        'mesh_settings': 'WindComfortMesh'
    }

    attribute_map = {
        'type': 'type',
        'region_of_interest': 'regionOfInterest',
        'wind_conditions': 'windConditions',
        'pedestrian_comfort_map': 'pedestrianComfortMap',
        'simulation_control': 'simulationControl',
        'advanced_modelling': 'advancedModelling',
        'additional_result_export': 'additionalResultExport',
        'mesh_settings': 'meshSettings'
    }

    def __init__(self, type='WIND_COMFORT', region_of_interest=None, wind_conditions=None, pedestrian_comfort_map=None, simulation_control=None, advanced_modelling=None, additional_result_export=None, mesh_settings=None, local_vars_configuration=None):  # noqa: E501
        """WindComfort - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._region_of_interest = None
        self._wind_conditions = None
        self._pedestrian_comfort_map = None
        self._simulation_control = None
        self._advanced_modelling = None
        self._additional_result_export = None
        self._mesh_settings = None
        self.discriminator = None

        self.type = type
        if region_of_interest is not None:
            self.region_of_interest = region_of_interest
        if wind_conditions is not None:
            self.wind_conditions = wind_conditions
        if pedestrian_comfort_map is not None:
            self.pedestrian_comfort_map = pedestrian_comfort_map
        if simulation_control is not None:
            self.simulation_control = simulation_control
        if advanced_modelling is not None:
            self.advanced_modelling = advanced_modelling
        if additional_result_export is not None:
            self.additional_result_export = additional_result_export
        if mesh_settings is not None:
            self.mesh_settings = mesh_settings

    @property
    def type(self):
        """Gets the type of this WindComfort.  # noqa: E501

        Schema name: WindComfort  # noqa: E501

        :return: The type of this WindComfort.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WindComfort.

        Schema name: WindComfort  # noqa: E501

        :param type: The type of this WindComfort.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def region_of_interest(self):
        """Gets the region_of_interest of this WindComfort.  # noqa: E501


        :return: The region_of_interest of this WindComfort.  # noqa: E501
        :rtype: RegionOfInterest
        """
        return self._region_of_interest

    @region_of_interest.setter
    def region_of_interest(self, region_of_interest):
        """Sets the region_of_interest of this WindComfort.


        :param region_of_interest: The region_of_interest of this WindComfort.  # noqa: E501
        :type: RegionOfInterest
        """

        self._region_of_interest = region_of_interest

    @property
    def wind_conditions(self):
        """Gets the wind_conditions of this WindComfort.  # noqa: E501


        :return: The wind_conditions of this WindComfort.  # noqa: E501
        :rtype: WindConditions
        """
        return self._wind_conditions

    @wind_conditions.setter
    def wind_conditions(self, wind_conditions):
        """Sets the wind_conditions of this WindComfort.


        :param wind_conditions: The wind_conditions of this WindComfort.  # noqa: E501
        :type: WindConditions
        """

        self._wind_conditions = wind_conditions

    @property
    def pedestrian_comfort_map(self):
        """Gets the pedestrian_comfort_map of this WindComfort.  # noqa: E501


        :return: The pedestrian_comfort_map of this WindComfort.  # noqa: E501
        :rtype: list[PedestrianComfortSurface]
        """
        return self._pedestrian_comfort_map

    @pedestrian_comfort_map.setter
    def pedestrian_comfort_map(self, pedestrian_comfort_map):
        """Sets the pedestrian_comfort_map of this WindComfort.


        :param pedestrian_comfort_map: The pedestrian_comfort_map of this WindComfort.  # noqa: E501
        :type: list[PedestrianComfortSurface]
        """

        self._pedestrian_comfort_map = pedestrian_comfort_map

    @property
    def simulation_control(self):
        """Gets the simulation_control of this WindComfort.  # noqa: E501


        :return: The simulation_control of this WindComfort.  # noqa: E501
        :rtype: WindComfortSimulationControl
        """
        return self._simulation_control

    @simulation_control.setter
    def simulation_control(self, simulation_control):
        """Sets the simulation_control of this WindComfort.


        :param simulation_control: The simulation_control of this WindComfort.  # noqa: E501
        :type: WindComfortSimulationControl
        """

        self._simulation_control = simulation_control

    @property
    def advanced_modelling(self):
        """Gets the advanced_modelling of this WindComfort.  # noqa: E501


        :return: The advanced_modelling of this WindComfort.  # noqa: E501
        :rtype: AdvancedModelling
        """
        return self._advanced_modelling

    @advanced_modelling.setter
    def advanced_modelling(self, advanced_modelling):
        """Sets the advanced_modelling of this WindComfort.


        :param advanced_modelling: The advanced_modelling of this WindComfort.  # noqa: E501
        :type: AdvancedModelling
        """

        self._advanced_modelling = advanced_modelling

    @property
    def additional_result_export(self):
        """Gets the additional_result_export of this WindComfort.  # noqa: E501


        :return: The additional_result_export of this WindComfort.  # noqa: E501
        :rtype: FluidResultControls
        """
        return self._additional_result_export

    @additional_result_export.setter
    def additional_result_export(self, additional_result_export):
        """Sets the additional_result_export of this WindComfort.


        :param additional_result_export: The additional_result_export of this WindComfort.  # noqa: E501
        :type: FluidResultControls
        """

        self._additional_result_export = additional_result_export

    @property
    def mesh_settings(self):
        """Gets the mesh_settings of this WindComfort.  # noqa: E501


        :return: The mesh_settings of this WindComfort.  # noqa: E501
        :rtype: WindComfortMesh
        """
        return self._mesh_settings

    @mesh_settings.setter
    def mesh_settings(self, mesh_settings):
        """Sets the mesh_settings of this WindComfort.


        :param mesh_settings: The mesh_settings of this WindComfort.  # noqa: E501
        :type: WindComfortMesh
        """

        self._mesh_settings = mesh_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WindComfort):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WindComfort):
            return True

        return self.to_dict() != other.to_dict()
