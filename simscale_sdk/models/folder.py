# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class Folder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'folder_id': 'str',
        'parent_folder_id': 'str',
        'space_id': 'str',
        'name': 'str',
        'number_of_items': 'int',
        'created_at': 'datetime',
        'last_modified_at': 'datetime'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'folder_id': 'folderId',
        'parent_folder_id': 'parentFolderId',
        'space_id': 'spaceId',
        'name': 'name',
        'number_of_items': 'numberOfItems',
        'created_at': 'createdAt',
        'last_modified_at': 'lastModifiedAt'
    }

    def __init__(self, resource_type=None, folder_id=None, parent_folder_id=None, space_id=None, name=None, number_of_items=None, created_at=None, last_modified_at=None, local_vars_configuration=None):  # noqa: E501
        """Folder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_type = None
        self._folder_id = None
        self._parent_folder_id = None
        self._space_id = None
        self._name = None
        self._number_of_items = None
        self._created_at = None
        self._last_modified_at = None
        self.discriminator = None

        if resource_type is not None:
            self.resource_type = resource_type
        if folder_id is not None:
            self.folder_id = folder_id
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if space_id is not None:
            self.space_id = space_id
        self.name = name
        if number_of_items is not None:
            self.number_of_items = number_of_items
        if created_at is not None:
            self.created_at = created_at
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at

    @property
    def resource_type(self):
        """Gets the resource_type of this Folder.  # noqa: E501


        :return: The resource_type of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Folder.


        :param resource_type: The resource_type of this Folder.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROJECT", "FOLDER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def folder_id(self):
        """Gets the folder_id of this Folder.  # noqa: E501


        :return: The folder_id of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this Folder.


        :param folder_id: The folder_id of this Folder.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Folder.  # noqa: E501

        Can be missing if the folder is at the root level of the Space  # noqa: E501

        :return: The parent_folder_id of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Folder.

        Can be missing if the folder is at the root level of the Space  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this Folder.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def space_id(self):
        """Gets the space_id of this Folder.  # noqa: E501


        :return: The space_id of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this Folder.


        :param space_id: The space_id of this Folder.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def name(self):
        """Gets the name of this Folder.  # noqa: E501


        :return: The name of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.


        :param name: The name of this Folder.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number_of_items(self):
        """Gets the number_of_items of this Folder.  # noqa: E501


        :return: The number_of_items of this Folder.  # noqa: E501
        :rtype: int
        """
        return self._number_of_items

    @number_of_items.setter
    def number_of_items(self, number_of_items):
        """Sets the number_of_items of this Folder.


        :param number_of_items: The number_of_items of this Folder.  # noqa: E501
        :type: int
        """

        self._number_of_items = number_of_items

    @property
    def created_at(self):
        """Gets the created_at of this Folder.  # noqa: E501


        :return: The created_at of this Folder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Folder.


        :param created_at: The created_at of this Folder.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Folder.  # noqa: E501


        :return: The last_modified_at of this Folder.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Folder.


        :param last_modified_at: The last_modified_at of this Folder.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Folder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Folder):
            return True

        return self.to_dict() != other.to_dict()
