# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ModelSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parts': 'list[Part]',
        'hide_selected_parts': 'bool',
        'show_volumes': 'bool',
        'scalar_field': 'ScalarField',
        'scalar_settings': 'list[ScalarSettings]',
        'vector_settings': 'list[VectorSettings]',
        'opacity': 'float',
        'render_mode': 'RenderMode',
        'solid_color': 'Color'
    }

    attribute_map = {
        'parts': 'parts',
        'hide_selected_parts': 'hideSelectedParts',
        'show_volumes': 'showVolumes',
        'scalar_field': 'scalarField',
        'scalar_settings': 'scalarSettings',
        'vector_settings': 'vectorSettings',
        'opacity': 'opacity',
        'render_mode': 'renderMode',
        'solid_color': 'solidColor'
    }

    def __init__(self, parts=None, hide_selected_parts=False, show_volumes=None, scalar_field=None, scalar_settings=None, vector_settings=None, opacity=None, render_mode=None, solid_color=None, local_vars_configuration=None):  # noqa: E501
        """ModelSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parts = None
        self._hide_selected_parts = None
        self._show_volumes = None
        self._scalar_field = None
        self._scalar_settings = None
        self._vector_settings = None
        self._opacity = None
        self._render_mode = None
        self._solid_color = None
        self.discriminator = None

        if parts is not None:
            self.parts = parts
        self.hide_selected_parts = hide_selected_parts
        if show_volumes is not None:
            self.show_volumes = show_volumes
        if scalar_field is not None:
            self.scalar_field = scalar_field
        if scalar_settings is not None:
            self.scalar_settings = scalar_settings
        if vector_settings is not None:
            self.vector_settings = vector_settings
        if opacity is not None:
            self.opacity = opacity
        if render_mode is not None:
            self.render_mode = render_mode
        if solid_color is not None:
            self.solid_color = solid_color

    @property
    def parts(self):
        """Gets the parts of this ModelSettings.  # noqa: E501

        The parts to show or hide in the report (see hideSelectedParts).  # noqa: E501

        :return: The parts of this ModelSettings.  # noqa: E501
        :rtype: list[Part]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this ModelSettings.

        The parts to show or hide in the report (see hideSelectedParts).  # noqa: E501

        :param parts: The parts of this ModelSettings.  # noqa: E501
        :type: list[Part]
        """

        self._parts = parts

    @property
    def hide_selected_parts(self):
        """Gets the hide_selected_parts of this ModelSettings.  # noqa: E501

        If set to true, the parts array indicates the hidden parts, while the rest of the model parts are visible (blacklist). On the other hand, if set to false, then the parts array indicate the visible parts while the rest of the model parts are hidden (whitelist). If the parts array is empty, then setting this value to true will hide all the model parts, while setting it to false will show all the model parts.  # noqa: E501

        :return: The hide_selected_parts of this ModelSettings.  # noqa: E501
        :rtype: bool
        """
        return self._hide_selected_parts

    @hide_selected_parts.setter
    def hide_selected_parts(self, hide_selected_parts):
        """Sets the hide_selected_parts of this ModelSettings.

        If set to true, the parts array indicates the hidden parts, while the rest of the model parts are visible (blacklist). On the other hand, if set to false, then the parts array indicate the visible parts while the rest of the model parts are hidden (whitelist). If the parts array is empty, then setting this value to true will hide all the model parts, while setting it to false will show all the model parts.  # noqa: E501

        :param hide_selected_parts: The hide_selected_parts of this ModelSettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and hide_selected_parts is None:  # noqa: E501
            raise ValueError("Invalid value for `hide_selected_parts`, must not be `None`")  # noqa: E501

        self._hide_selected_parts = hide_selected_parts

    @property
    def show_volumes(self):
        """Gets the show_volumes of this ModelSettings.  # noqa: E501

        If set to false, then volumes will be hidden unless they are mentioned explicitly, i.e. when a volume is included in the parts array, and hideSelectedParts is set to false.  # noqa: E501

        :return: The show_volumes of this ModelSettings.  # noqa: E501
        :rtype: bool
        """
        return self._show_volumes

    @show_volumes.setter
    def show_volumes(self, show_volumes):
        """Sets the show_volumes of this ModelSettings.

        If set to false, then volumes will be hidden unless they are mentioned explicitly, i.e. when a volume is included in the parts array, and hideSelectedParts is set to false.  # noqa: E501

        :param show_volumes: The show_volumes of this ModelSettings.  # noqa: E501
        :type: bool
        """

        self._show_volumes = show_volumes

    @property
    def scalar_field(self):
        """Gets the scalar_field of this ModelSettings.  # noqa: E501


        :return: The scalar_field of this ModelSettings.  # noqa: E501
        :rtype: ScalarField
        """
        return self._scalar_field

    @scalar_field.setter
    def scalar_field(self, scalar_field):
        """Sets the scalar_field of this ModelSettings.


        :param scalar_field: The scalar_field of this ModelSettings.  # noqa: E501
        :type: ScalarField
        """

        self._scalar_field = scalar_field

    @property
    def scalar_settings(self):
        """Gets the scalar_settings of this ModelSettings.  # noqa: E501


        :return: The scalar_settings of this ModelSettings.  # noqa: E501
        :rtype: list[ScalarSettings]
        """
        return self._scalar_settings

    @scalar_settings.setter
    def scalar_settings(self, scalar_settings):
        """Sets the scalar_settings of this ModelSettings.


        :param scalar_settings: The scalar_settings of this ModelSettings.  # noqa: E501
        :type: list[ScalarSettings]
        """

        self._scalar_settings = scalar_settings

    @property
    def vector_settings(self):
        """Gets the vector_settings of this ModelSettings.  # noqa: E501

        The settings for the different vectors of the model.  # noqa: E501

        :return: The vector_settings of this ModelSettings.  # noqa: E501
        :rtype: list[VectorSettings]
        """
        return self._vector_settings

    @vector_settings.setter
    def vector_settings(self, vector_settings):
        """Sets the vector_settings of this ModelSettings.

        The settings for the different vectors of the model.  # noqa: E501

        :param vector_settings: The vector_settings of this ModelSettings.  # noqa: E501
        :type: list[VectorSettings]
        """

        self._vector_settings = vector_settings

    @property
    def opacity(self):
        """Gets the opacity of this ModelSettings.  # noqa: E501


        :return: The opacity of this ModelSettings.  # noqa: E501
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this ModelSettings.


        :param opacity: The opacity of this ModelSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                opacity is not None and opacity > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `opacity`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                opacity is not None and opacity < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `opacity`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._opacity = opacity

    @property
    def render_mode(self):
        """Gets the render_mode of this ModelSettings.  # noqa: E501


        :return: The render_mode of this ModelSettings.  # noqa: E501
        :rtype: RenderMode
        """
        return self._render_mode

    @render_mode.setter
    def render_mode(self, render_mode):
        """Sets the render_mode of this ModelSettings.


        :param render_mode: The render_mode of this ModelSettings.  # noqa: E501
        :type: RenderMode
        """

        self._render_mode = render_mode

    @property
    def solid_color(self):
        """Gets the solid_color of this ModelSettings.  # noqa: E501


        :return: The solid_color of this ModelSettings.  # noqa: E501
        :rtype: Color
        """
        return self._solid_color

    @solid_color.setter
    def solid_color(self, solid_color):
        """Sets the solid_color of this ModelSettings.


        :param solid_color: The solid_color of this ModelSettings.  # noqa: E501
        :type: Color
        """

        self._solid_color = solid_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelSettings):
            return True

        return self.to_dict() != other.to_dict()
