# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SeedSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'center': 'Vector3D',
        'normal': 'Vector3D',
        'horizontal_dimension': 'int',
        'vertical_dimension': 'int',
        'spacing': 'float',
        'size': 'float'
    }

    attribute_map = {
        'center': 'center',
        'normal': 'normal',
        'horizontal_dimension': 'horizontalDimension',
        'vertical_dimension': 'verticalDimension',
        'spacing': 'spacing',
        'size': 'size'
    }

    def __init__(self, center=None, normal=None, horizontal_dimension=10, vertical_dimension=10, spacing=None, size=None, local_vars_configuration=None):  # noqa: E501
        """SeedSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._center = None
        self._normal = None
        self._horizontal_dimension = None
        self._vertical_dimension = None
        self._spacing = None
        self._size = None
        self.discriminator = None

        self.center = center
        self.normal = normal
        self.horizontal_dimension = horizontal_dimension
        self.vertical_dimension = vertical_dimension
        if spacing is not None:
            self.spacing = spacing
        if size is not None:
            self.size = size

    @property
    def center(self):
        """Gets the center of this SeedSettings.  # noqa: E501


        :return: The center of this SeedSettings.  # noqa: E501
        :rtype: Vector3D
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this SeedSettings.


        :param center: The center of this SeedSettings.  # noqa: E501
        :type: Vector3D
        """
        if self.local_vars_configuration.client_side_validation and center is None:  # noqa: E501
            raise ValueError("Invalid value for `center`, must not be `None`")  # noqa: E501

        self._center = center

    @property
    def normal(self):
        """Gets the normal of this SeedSettings.  # noqa: E501


        :return: The normal of this SeedSettings.  # noqa: E501
        :rtype: Vector3D
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this SeedSettings.


        :param normal: The normal of this SeedSettings.  # noqa: E501
        :type: Vector3D
        """
        if self.local_vars_configuration.client_side_validation and normal is None:  # noqa: E501
            raise ValueError("Invalid value for `normal`, must not be `None`")  # noqa: E501

        self._normal = normal

    @property
    def horizontal_dimension(self):
        """Gets the horizontal_dimension of this SeedSettings.  # noqa: E501

        Number of seed points in the horizontal direction.  # noqa: E501

        :return: The horizontal_dimension of this SeedSettings.  # noqa: E501
        :rtype: int
        """
        return self._horizontal_dimension

    @horizontal_dimension.setter
    def horizontal_dimension(self, horizontal_dimension):
        """Sets the horizontal_dimension of this SeedSettings.

        Number of seed points in the horizontal direction.  # noqa: E501

        :param horizontal_dimension: The horizontal_dimension of this SeedSettings.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and horizontal_dimension is None:  # noqa: E501
            raise ValueError("Invalid value for `horizontal_dimension`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                horizontal_dimension is not None and horizontal_dimension > 500):  # noqa: E501
            raise ValueError("Invalid value for `horizontal_dimension`, must be a value less than or equal to `500`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                horizontal_dimension is not None and horizontal_dimension < 1):  # noqa: E501
            raise ValueError("Invalid value for `horizontal_dimension`, must be a value greater than or equal to `1`")  # noqa: E501

        self._horizontal_dimension = horizontal_dimension

    @property
    def vertical_dimension(self):
        """Gets the vertical_dimension of this SeedSettings.  # noqa: E501

        Number of seed points in the vertical direction.  # noqa: E501

        :return: The vertical_dimension of this SeedSettings.  # noqa: E501
        :rtype: int
        """
        return self._vertical_dimension

    @vertical_dimension.setter
    def vertical_dimension(self, vertical_dimension):
        """Sets the vertical_dimension of this SeedSettings.

        Number of seed points in the vertical direction.  # noqa: E501

        :param vertical_dimension: The vertical_dimension of this SeedSettings.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and vertical_dimension is None:  # noqa: E501
            raise ValueError("Invalid value for `vertical_dimension`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                vertical_dimension is not None and vertical_dimension > 500):  # noqa: E501
            raise ValueError("Invalid value for `vertical_dimension`, must be a value less than or equal to `500`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                vertical_dimension is not None and vertical_dimension < 1):  # noqa: E501
            raise ValueError("Invalid value for `vertical_dimension`, must be a value greater than or equal to `1`")  # noqa: E501

        self._vertical_dimension = vertical_dimension

    @property
    def spacing(self):
        """Gets the spacing of this SeedSettings.  # noqa: E501

        The distance between the seed points. Default is size * 4.  # noqa: E501

        :return: The spacing of this SeedSettings.  # noqa: E501
        :rtype: float
        """
        return self._spacing

    @spacing.setter
    def spacing(self, spacing):
        """Sets the spacing of this SeedSettings.

        The distance between the seed points. Default is size * 4.  # noqa: E501

        :param spacing: The spacing of this SeedSettings.  # noqa: E501
        :type: float
        """

        self._spacing = spacing

    @property
    def size(self):
        """Gets the size of this SeedSettings.  # noqa: E501

        The radius of the particle trace geometry (cylinder, sphere, comet). Default is the extent of the bounding box of the moddel divided by 800.  # noqa: E501

        :return: The size of this SeedSettings.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SeedSettings.

        The radius of the particle trace geometry (cylinder, sphere, comet). Default is the extent of the bounding box of the moddel divided by 800.  # noqa: E501

        :param size: The size of this SeedSettings.  # noqa: E501
        :type: float
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeedSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SeedSettings):
            return True

        return self.to_dict() != other.to_dict()
