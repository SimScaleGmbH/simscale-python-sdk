# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class PointMassBC(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'mass': 'DimensionalMass',
        'mass_moment_of_inertia': 'DimensionalVectorMomentOfInertia',
        'external_point': 'DimensionalVectorLength',
        'deformation_behavior': 'str',
        'topological_reference': 'TopologicalReference'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'mass': 'mass',
        'mass_moment_of_inertia': 'massMomentOfInertia',
        'external_point': 'externalPoint',
        'deformation_behavior': 'deformationBehavior',
        'topological_reference': 'topologicalReference'
    }

    def __init__(self, type='POINT_MASS', name=None, mass=None, mass_moment_of_inertia=None, external_point=None, deformation_behavior=None, topological_reference=None, local_vars_configuration=None):  # noqa: E501
        """PointMassBC - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._mass = None
        self._mass_moment_of_inertia = None
        self._external_point = None
        self._deformation_behavior = None
        self._topological_reference = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if mass is not None:
            self.mass = mass
        if mass_moment_of_inertia is not None:
            self.mass_moment_of_inertia = mass_moment_of_inertia
        if external_point is not None:
            self.external_point = external_point
        if deformation_behavior is not None:
            self.deformation_behavior = deformation_behavior
        if topological_reference is not None:
            self.topological_reference = topological_reference

    @property
    def type(self):
        """Gets the type of this PointMassBC.  # noqa: E501

        <p>Define a <b>Point mass</b> boundary condition in order to insert an additional mass on a specific location of the active model.</p>  Schema name: PointMassBC  # noqa: E501

        :return: The type of this PointMassBC.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PointMassBC.

        <p>Define a <b>Point mass</b> boundary condition in order to insert an additional mass on a specific location of the active model.</p>  Schema name: PointMassBC  # noqa: E501

        :param type: The type of this PointMassBC.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this PointMassBC.  # noqa: E501


        :return: The name of this PointMassBC.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PointMassBC.


        :param name: The name of this PointMassBC.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mass(self):
        """Gets the mass of this PointMassBC.  # noqa: E501


        :return: The mass of this PointMassBC.  # noqa: E501
        :rtype: DimensionalMass
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this PointMassBC.


        :param mass: The mass of this PointMassBC.  # noqa: E501
        :type: DimensionalMass
        """

        self._mass = mass

    @property
    def mass_moment_of_inertia(self):
        """Gets the mass_moment_of_inertia of this PointMassBC.  # noqa: E501


        :return: The mass_moment_of_inertia of this PointMassBC.  # noqa: E501
        :rtype: DimensionalVectorMomentOfInertia
        """
        return self._mass_moment_of_inertia

    @mass_moment_of_inertia.setter
    def mass_moment_of_inertia(self, mass_moment_of_inertia):
        """Sets the mass_moment_of_inertia of this PointMassBC.


        :param mass_moment_of_inertia: The mass_moment_of_inertia of this PointMassBC.  # noqa: E501
        :type: DimensionalVectorMomentOfInertia
        """

        self._mass_moment_of_inertia = mass_moment_of_inertia

    @property
    def external_point(self):
        """Gets the external_point of this PointMassBC.  # noqa: E501


        :return: The external_point of this PointMassBC.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._external_point

    @external_point.setter
    def external_point(self, external_point):
        """Sets the external_point of this PointMassBC.


        :param external_point: The external_point of this PointMassBC.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._external_point = external_point

    @property
    def deformation_behavior(self):
        """Gets the deformation_behavior of this PointMassBC.  # noqa: E501

        <p>Choose the deformation behavior of the entity which the point mass is connected to. If <b>deformable</b> is selected, the entity is allowed to deform, selecting <b>undeformable</b> leads to a rigid entity.</p>  # noqa: E501

        :return: The deformation_behavior of this PointMassBC.  # noqa: E501
        :rtype: str
        """
        return self._deformation_behavior

    @deformation_behavior.setter
    def deformation_behavior(self, deformation_behavior):
        """Sets the deformation_behavior of this PointMassBC.

        <p>Choose the deformation behavior of the entity which the point mass is connected to. If <b>deformable</b> is selected, the entity is allowed to deform, selecting <b>undeformable</b> leads to a rigid entity.</p>  # noqa: E501

        :param deformation_behavior: The deformation_behavior of this PointMassBC.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFORMABLE", "UNDEFORMABLE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and deformation_behavior not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `deformation_behavior` ({0}), must be one of {1}"  # noqa: E501
                .format(deformation_behavior, allowed_values)
            )

        self._deformation_behavior = deformation_behavior

    @property
    def topological_reference(self):
        """Gets the topological_reference of this PointMassBC.  # noqa: E501


        :return: The topological_reference of this PointMassBC.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this PointMassBC.


        :param topological_reference: The topological_reference of this PointMassBC.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PointMassBC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PointMassBC):
            return True

        return self.to_dict() != other.to_dict()
