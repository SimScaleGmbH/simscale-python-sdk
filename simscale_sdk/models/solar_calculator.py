# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SolarCalculator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sun_direction': 'OneOfSolarCalculatorSunDirection',
        'solar_load': 'OneOfSolarCalculatorSolarLoad'
    }

    attribute_map = {
        'sun_direction': 'sunDirection',
        'solar_load': 'solarLoad'
    }

    def __init__(self, sun_direction=None, solar_load=None, local_vars_configuration=None):  # noqa: E501
        """SolarCalculator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sun_direction = None
        self._solar_load = None
        self.discriminator = None

        if sun_direction is not None:
            self.sun_direction = sun_direction
        if solar_load is not None:
            self.solar_load = solar_load

    @property
    def sun_direction(self):
        """Gets the sun_direction of this SolarCalculator.  # noqa: E501


        :return: The sun_direction of this SolarCalculator.  # noqa: E501
        :rtype: OneOfSolarCalculatorSunDirection
        """
        return self._sun_direction

    @sun_direction.setter
    def sun_direction(self, sun_direction):
        """Sets the sun_direction of this SolarCalculator.


        :param sun_direction: The sun_direction of this SolarCalculator.  # noqa: E501
        :type: OneOfSolarCalculatorSunDirection
        """

        self._sun_direction = sun_direction

    @property
    def solar_load(self):
        """Gets the solar_load of this SolarCalculator.  # noqa: E501


        :return: The solar_load of this SolarCalculator.  # noqa: E501
        :rtype: OneOfSolarCalculatorSolarLoad
        """
        return self._solar_load

    @solar_load.setter
    def solar_load(self, solar_load):
        """Sets the solar_load of this SolarCalculator.


        :param solar_load: The solar_load of this SolarCalculator.  # noqa: E501
        :type: OneOfSolarCalculatorSolarLoad
        """

        self._solar_load = solar_load

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolarCalculator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolarCalculator):
            return True

        return self.to_dict() != other.to_dict()
