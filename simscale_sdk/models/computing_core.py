# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ComputingCore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_of_processors': 'int',
        'num_of_computing_processors': 'int',
        'domain_decomposition': 'OneOfComputingCoreDomainDecomposition',
        'num_of_threads': 'int',
        'partition_mesh': 'bool'
    }

    attribute_map = {
        'num_of_processors': 'numOfProcessors',
        'num_of_computing_processors': 'numOfComputingProcessors',
        'domain_decomposition': 'domainDecomposition',
        'num_of_threads': 'numOfThreads',
        'partition_mesh': 'partitionMesh'
    }

    def __init__(self, num_of_processors=None, num_of_computing_processors=None, domain_decomposition=None, num_of_threads=None, partition_mesh=None, local_vars_configuration=None):  # noqa: E501
        """ComputingCore - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_of_processors = None
        self._num_of_computing_processors = None
        self._domain_decomposition = None
        self._num_of_threads = None
        self._partition_mesh = None
        self.discriminator = None

        if num_of_processors is not None:
            self.num_of_processors = num_of_processors
        if num_of_computing_processors is not None:
            self.num_of_computing_processors = num_of_computing_processors
        if domain_decomposition is not None:
            self.domain_decomposition = domain_decomposition
        if num_of_threads is not None:
            self.num_of_threads = num_of_threads
        if partition_mesh is not None:
            self.partition_mesh = partition_mesh

    @property
    def num_of_processors(self):
        """Gets the num_of_processors of this ComputingCore.  # noqa: E501

        <p>Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. <a href='https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors' target='_blank'>Learn more</a>.</p>  # noqa: E501

        :return: The num_of_processors of this ComputingCore.  # noqa: E501
        :rtype: int
        """
        return self._num_of_processors

    @num_of_processors.setter
    def num_of_processors(self, num_of_processors):
        """Sets the num_of_processors of this ComputingCore.

        <p>Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. <a href='https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors' target='_blank'>Learn more</a>.</p>  # noqa: E501

        :param num_of_processors: The num_of_processors of this ComputingCore.  # noqa: E501
        :type: int
        """
        allowed_values = [-1, 1, 2, 4, 8, 16, 32, 64]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and num_of_processors not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `num_of_processors` ({0}), must be one of {1}"  # noqa: E501
                .format(num_of_processors, allowed_values)
            )

        self._num_of_processors = num_of_processors

    @property
    def num_of_computing_processors(self):
        """Gets the num_of_computing_processors of this ComputingCore.  # noqa: E501

        <p>Set the number of processors which shall be used for the parallel computation.</p>  # noqa: E501

        :return: The num_of_computing_processors of this ComputingCore.  # noqa: E501
        :rtype: int
        """
        return self._num_of_computing_processors

    @num_of_computing_processors.setter
    def num_of_computing_processors(self, num_of_computing_processors):
        """Sets the num_of_computing_processors of this ComputingCore.

        <p>Set the number of processors which shall be used for the parallel computation.</p>  # noqa: E501

        :param num_of_computing_processors: The num_of_computing_processors of this ComputingCore.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_of_computing_processors is not None and num_of_computing_processors < -1):  # noqa: E501
            raise ValueError("Invalid value for `num_of_computing_processors`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._num_of_computing_processors = num_of_computing_processors

    @property
    def domain_decomposition(self):
        """Gets the domain_decomposition of this ComputingCore.  # noqa: E501


        :return: The domain_decomposition of this ComputingCore.  # noqa: E501
        :rtype: OneOfComputingCoreDomainDecomposition
        """
        return self._domain_decomposition

    @domain_decomposition.setter
    def domain_decomposition(self, domain_decomposition):
        """Sets the domain_decomposition of this ComputingCore.


        :param domain_decomposition: The domain_decomposition of this ComputingCore.  # noqa: E501
        :type: OneOfComputingCoreDomainDecomposition
        """

        self._domain_decomposition = domain_decomposition

    @property
    def num_of_threads(self):
        """Gets the num_of_threads of this ComputingCore.  # noqa: E501


        :return: The num_of_threads of this ComputingCore.  # noqa: E501
        :rtype: int
        """
        return self._num_of_threads

    @num_of_threads.setter
    def num_of_threads(self, num_of_threads):
        """Sets the num_of_threads of this ComputingCore.


        :param num_of_threads: The num_of_threads of this ComputingCore.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_of_threads is not None and num_of_threads > 64):  # noqa: E501
            raise ValueError("Invalid value for `num_of_threads`, must be a value less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_of_threads is not None and num_of_threads < 1):  # noqa: E501
            raise ValueError("Invalid value for `num_of_threads`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_of_threads = num_of_threads

    @property
    def partition_mesh(self):
        """Gets the partition_mesh of this ComputingCore.  # noqa: E501


        :return: The partition_mesh of this ComputingCore.  # noqa: E501
        :rtype: bool
        """
        return self._partition_mesh

    @partition_mesh.setter
    def partition_mesh(self, partition_mesh):
        """Sets the partition_mesh of this ComputingCore.


        :param partition_mesh: The partition_mesh of this ComputingCore.  # noqa: E501
        :type: bool
        """

        self._partition_mesh = partition_mesh

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputingCore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputingCore):
            return True

        return self.to_dict() != other.to_dict()
