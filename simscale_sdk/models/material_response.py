# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class MaterialResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'material_group_id': 'str',
        'name': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'properties': 'dict(str, OneOfMaterialProperty)',
        'metadata': 'object'
    }

    attribute_map = {
        'id': 'id',
        'material_group_id': 'materialGroupId',
        'name': 'name',
        'created_at': 'createdAt',
        'modified_at': 'modifiedAt',
        'properties': 'properties',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, material_group_id=None, name=None, created_at=None, modified_at=None, properties=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """MaterialResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._material_group_id = None
        self._name = None
        self._created_at = None
        self._modified_at = None
        self._properties = None
        self._metadata = None
        self.discriminator = None

        self.id = id
        self.material_group_id = material_group_id
        self.name = name
        self.created_at = created_at
        self.modified_at = modified_at
        if properties is not None:
            self.properties = properties
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this MaterialResponse.  # noqa: E501

        The material unique identifier.  # noqa: E501

        :return: The id of this MaterialResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaterialResponse.

        The material unique identifier.  # noqa: E501

        :param id: The id of this MaterialResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def material_group_id(self):
        """Gets the material_group_id of this MaterialResponse.  # noqa: E501

        The material group unique identifier.  # noqa: E501

        :return: The material_group_id of this MaterialResponse.  # noqa: E501
        :rtype: str
        """
        return self._material_group_id

    @material_group_id.setter
    def material_group_id(self, material_group_id):
        """Sets the material_group_id of this MaterialResponse.

        The material group unique identifier.  # noqa: E501

        :param material_group_id: The material_group_id of this MaterialResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and material_group_id is None:  # noqa: E501
            raise ValueError("Invalid value for `material_group_id`, must not be `None`")  # noqa: E501

        self._material_group_id = material_group_id

    @property
    def name(self):
        """Gets the name of this MaterialResponse.  # noqa: E501

        The material name.  # noqa: E501

        :return: The name of this MaterialResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaterialResponse.

        The material name.  # noqa: E501

        :param name: The name of this MaterialResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this MaterialResponse.  # noqa: E501

        The time the material was created.  # noqa: E501

        :return: The created_at of this MaterialResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MaterialResponse.

        The time the material was created.  # noqa: E501

        :param created_at: The created_at of this MaterialResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this MaterialResponse.  # noqa: E501

        The time the material was modified.  # noqa: E501

        :return: The modified_at of this MaterialResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this MaterialResponse.

        The time the material was modified.  # noqa: E501

        :param modified_at: The modified_at of this MaterialResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and modified_at is None:  # noqa: E501
            raise ValueError("Invalid value for `modified_at`, must not be `None`")  # noqa: E501

        self._modified_at = modified_at

    @property
    def properties(self):
        """Gets the properties of this MaterialResponse.  # noqa: E501

        The material properties.  # noqa: E501

        :return: The properties of this MaterialResponse.  # noqa: E501
        :rtype: dict(str, OneOfMaterialProperty)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MaterialResponse.

        The material properties.  # noqa: E501

        :param properties: The properties of this MaterialResponse.  # noqa: E501
        :type: dict(str, OneOfMaterialProperty)
        """

        self._properties = properties

    @property
    def metadata(self):
        """Gets the metadata of this MaterialResponse.  # noqa: E501


        :return: The metadata of this MaterialResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MaterialResponse.


        :param metadata: The metadata of this MaterialResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaterialResponse):
            return True

        return self.to_dict() != other.to_dict()
