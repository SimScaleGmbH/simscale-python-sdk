# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class Filters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cutting_planes': 'list[CuttingPlane]',
        'iso_surfaces': 'list[IsoSurface]',
        'iso_volumes': 'list[IsoVolume]',
        'displacement': 'Displacement',
        'particle_traces': 'list[ParticleTrace]'
    }

    attribute_map = {
        'cutting_planes': 'cuttingPlanes',
        'iso_surfaces': 'isoSurfaces',
        'iso_volumes': 'isoVolumes',
        'displacement': 'displacement',
        'particle_traces': 'particleTraces'
    }

    def __init__(self, cutting_planes=None, iso_surfaces=None, iso_volumes=None, displacement=None, particle_traces=None, local_vars_configuration=None):  # noqa: E501
        """Filters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cutting_planes = None
        self._iso_surfaces = None
        self._iso_volumes = None
        self._displacement = None
        self._particle_traces = None
        self.discriminator = None

        if cutting_planes is not None:
            self.cutting_planes = cutting_planes
        if iso_surfaces is not None:
            self.iso_surfaces = iso_surfaces
        if iso_volumes is not None:
            self.iso_volumes = iso_volumes
        if displacement is not None:
            self.displacement = displacement
        if particle_traces is not None:
            self.particle_traces = particle_traces

    @property
    def cutting_planes(self):
        """Gets the cutting_planes of this Filters.  # noqa: E501


        :return: The cutting_planes of this Filters.  # noqa: E501
        :rtype: list[CuttingPlane]
        """
        return self._cutting_planes

    @cutting_planes.setter
    def cutting_planes(self, cutting_planes):
        """Sets the cutting_planes of this Filters.


        :param cutting_planes: The cutting_planes of this Filters.  # noqa: E501
        :type: list[CuttingPlane]
        """

        self._cutting_planes = cutting_planes

    @property
    def iso_surfaces(self):
        """Gets the iso_surfaces of this Filters.  # noqa: E501


        :return: The iso_surfaces of this Filters.  # noqa: E501
        :rtype: list[IsoSurface]
        """
        return self._iso_surfaces

    @iso_surfaces.setter
    def iso_surfaces(self, iso_surfaces):
        """Sets the iso_surfaces of this Filters.


        :param iso_surfaces: The iso_surfaces of this Filters.  # noqa: E501
        :type: list[IsoSurface]
        """

        self._iso_surfaces = iso_surfaces

    @property
    def iso_volumes(self):
        """Gets the iso_volumes of this Filters.  # noqa: E501


        :return: The iso_volumes of this Filters.  # noqa: E501
        :rtype: list[IsoVolume]
        """
        return self._iso_volumes

    @iso_volumes.setter
    def iso_volumes(self, iso_volumes):
        """Sets the iso_volumes of this Filters.


        :param iso_volumes: The iso_volumes of this Filters.  # noqa: E501
        :type: list[IsoVolume]
        """

        self._iso_volumes = iso_volumes

    @property
    def displacement(self):
        """Gets the displacement of this Filters.  # noqa: E501


        :return: The displacement of this Filters.  # noqa: E501
        :rtype: Displacement
        """
        return self._displacement

    @displacement.setter
    def displacement(self, displacement):
        """Sets the displacement of this Filters.


        :param displacement: The displacement of this Filters.  # noqa: E501
        :type: Displacement
        """

        self._displacement = displacement

    @property
    def particle_traces(self):
        """Gets the particle_traces of this Filters.  # noqa: E501


        :return: The particle_traces of this Filters.  # noqa: E501
        :rtype: list[ParticleTrace]
        """
        return self._particle_traces

    @particle_traces.setter
    def particle_traces(self, particle_traces):
        """Sets the particle_traces of this Filters.


        :param particle_traces: The particle_traces of this Filters.  # noqa: E501
        :type: list[ParticleTrace]
        """

        self._particle_traces = particle_traces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Filters):
            return True

        return self.to_dict() != other.to_dict()
