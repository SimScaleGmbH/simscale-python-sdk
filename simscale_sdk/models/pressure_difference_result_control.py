# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class PressureDifferenceResultControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'absolute_value_of_pressure_difference': 'bool',
        'inlet_face_pressure_difference_type': 'str',
        'inlet_face_topological_reference': 'TopologicalReference',
        'outlet_face_pressure_difference_type': 'str',
        'outlet_face_topological_reference': 'TopologicalReference'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'absolute_value_of_pressure_difference': 'absoluteValueOfPressureDifference',
        'inlet_face_pressure_difference_type': 'inletFacePressureDifferenceType',
        'inlet_face_topological_reference': 'inletFaceTopologicalReference',
        'outlet_face_pressure_difference_type': 'outletFacePressureDifferenceType',
        'outlet_face_topological_reference': 'outletFaceTopologicalReference'
    }

    def __init__(self, type='PRESSURE_DIFFERENCE', name=None, absolute_value_of_pressure_difference=None, inlet_face_pressure_difference_type=None, inlet_face_topological_reference=None, outlet_face_pressure_difference_type=None, outlet_face_topological_reference=None, local_vars_configuration=None):  # noqa: E501
        """PressureDifferenceResultControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._absolute_value_of_pressure_difference = None
        self._inlet_face_pressure_difference_type = None
        self._inlet_face_topological_reference = None
        self._outlet_face_pressure_difference_type = None
        self._outlet_face_topological_reference = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if absolute_value_of_pressure_difference is not None:
            self.absolute_value_of_pressure_difference = absolute_value_of_pressure_difference
        if inlet_face_pressure_difference_type is not None:
            self.inlet_face_pressure_difference_type = inlet_face_pressure_difference_type
        if inlet_face_topological_reference is not None:
            self.inlet_face_topological_reference = inlet_face_topological_reference
        if outlet_face_pressure_difference_type is not None:
            self.outlet_face_pressure_difference_type = outlet_face_pressure_difference_type
        if outlet_face_topological_reference is not None:
            self.outlet_face_topological_reference = outlet_face_topological_reference

    @property
    def type(self):
        """Gets the type of this PressureDifferenceResultControl.  # noqa: E501

        Schema name: PressureDifferenceResultControl  # noqa: E501

        :return: The type of this PressureDifferenceResultControl.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PressureDifferenceResultControl.

        Schema name: PressureDifferenceResultControl  # noqa: E501

        :param type: The type of this PressureDifferenceResultControl.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this PressureDifferenceResultControl.  # noqa: E501


        :return: The name of this PressureDifferenceResultControl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PressureDifferenceResultControl.


        :param name: The name of this PressureDifferenceResultControl.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$/`")  # noqa: E501

        self._name = name

    @property
    def absolute_value_of_pressure_difference(self):
        """Gets the absolute_value_of_pressure_difference of this PressureDifferenceResultControl.  # noqa: E501

        Ensure a non-negative pressure difference result. Useful for many applications in which the pressure difference is assumed to be a <i>pressure drop</i>. However, leaving this on may yield <b>non-physical</b> results for some combinations of static/total pressure.  # noqa: E501

        :return: The absolute_value_of_pressure_difference of this PressureDifferenceResultControl.  # noqa: E501
        :rtype: bool
        """
        return self._absolute_value_of_pressure_difference

    @absolute_value_of_pressure_difference.setter
    def absolute_value_of_pressure_difference(self, absolute_value_of_pressure_difference):
        """Sets the absolute_value_of_pressure_difference of this PressureDifferenceResultControl.

        Ensure a non-negative pressure difference result. Useful for many applications in which the pressure difference is assumed to be a <i>pressure drop</i>. However, leaving this on may yield <b>non-physical</b> results for some combinations of static/total pressure.  # noqa: E501

        :param absolute_value_of_pressure_difference: The absolute_value_of_pressure_difference of this PressureDifferenceResultControl.  # noqa: E501
        :type: bool
        """

        self._absolute_value_of_pressure_difference = absolute_value_of_pressure_difference

    @property
    def inlet_face_pressure_difference_type(self):
        """Gets the inlet_face_pressure_difference_type of this PressureDifferenceResultControl.  # noqa: E501

        <p>The total pressure is the sum of the static pressure and the dynamic pressure.</p>  # noqa: E501

        :return: The inlet_face_pressure_difference_type of this PressureDifferenceResultControl.  # noqa: E501
        :rtype: str
        """
        return self._inlet_face_pressure_difference_type

    @inlet_face_pressure_difference_type.setter
    def inlet_face_pressure_difference_type(self, inlet_face_pressure_difference_type):
        """Sets the inlet_face_pressure_difference_type of this PressureDifferenceResultControl.

        <p>The total pressure is the sum of the static pressure and the dynamic pressure.</p>  # noqa: E501

        :param inlet_face_pressure_difference_type: The inlet_face_pressure_difference_type of this PressureDifferenceResultControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["STATIC_PRESSURE", "TOTAL_PRESSURE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and inlet_face_pressure_difference_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `inlet_face_pressure_difference_type` ({0}), must be one of {1}"  # noqa: E501
                .format(inlet_face_pressure_difference_type, allowed_values)
            )

        self._inlet_face_pressure_difference_type = inlet_face_pressure_difference_type

    @property
    def inlet_face_topological_reference(self):
        """Gets the inlet_face_topological_reference of this PressureDifferenceResultControl.  # noqa: E501


        :return: The inlet_face_topological_reference of this PressureDifferenceResultControl.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._inlet_face_topological_reference

    @inlet_face_topological_reference.setter
    def inlet_face_topological_reference(self, inlet_face_topological_reference):
        """Sets the inlet_face_topological_reference of this PressureDifferenceResultControl.


        :param inlet_face_topological_reference: The inlet_face_topological_reference of this PressureDifferenceResultControl.  # noqa: E501
        :type: TopologicalReference
        """

        self._inlet_face_topological_reference = inlet_face_topological_reference

    @property
    def outlet_face_pressure_difference_type(self):
        """Gets the outlet_face_pressure_difference_type of this PressureDifferenceResultControl.  # noqa: E501

        <p>The total pressure is the sum of the static pressure and the dynamic pressure.</p>  # noqa: E501

        :return: The outlet_face_pressure_difference_type of this PressureDifferenceResultControl.  # noqa: E501
        :rtype: str
        """
        return self._outlet_face_pressure_difference_type

    @outlet_face_pressure_difference_type.setter
    def outlet_face_pressure_difference_type(self, outlet_face_pressure_difference_type):
        """Sets the outlet_face_pressure_difference_type of this PressureDifferenceResultControl.

        <p>The total pressure is the sum of the static pressure and the dynamic pressure.</p>  # noqa: E501

        :param outlet_face_pressure_difference_type: The outlet_face_pressure_difference_type of this PressureDifferenceResultControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["STATIC_PRESSURE", "TOTAL_PRESSURE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and outlet_face_pressure_difference_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `outlet_face_pressure_difference_type` ({0}), must be one of {1}"  # noqa: E501
                .format(outlet_face_pressure_difference_type, allowed_values)
            )

        self._outlet_face_pressure_difference_type = outlet_face_pressure_difference_type

    @property
    def outlet_face_topological_reference(self):
        """Gets the outlet_face_topological_reference of this PressureDifferenceResultControl.  # noqa: E501


        :return: The outlet_face_topological_reference of this PressureDifferenceResultControl.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._outlet_face_topological_reference

    @outlet_face_topological_reference.setter
    def outlet_face_topological_reference(self, outlet_face_topological_reference):
        """Sets the outlet_face_topological_reference of this PressureDifferenceResultControl.


        :param outlet_face_topological_reference: The outlet_face_topological_reference of this PressureDifferenceResultControl.  # noqa: E501
        :type: TopologicalReference
        """

        self._outlet_face_topological_reference = outlet_face_topological_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PressureDifferenceResultControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PressureDifferenceResultControl):
            return True

        return self.to_dict() != other.to_dict()
