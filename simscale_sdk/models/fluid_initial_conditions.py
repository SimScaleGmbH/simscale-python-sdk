# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FluidInitialConditions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pressure': 'DimensionalInitialConditionDomainsPressure',
        'pressure_rgh': 'DimensionalInitialConditionDomainsPressure',
        'gauge_pressure': 'DimensionalInitialConditionDomainsPressure',
        'gauge_pressure_rgh': 'DimensionalInitialConditionDomainsPressure',
        'velocity': 'DimensionalVectorInitialConditionDomainsSpeed',
        'temperature': 'DimensionalInitialConditionDomainsTemperature',
        'turbulent_kinetic_energy': 'DimensionalInitialConditionDomainsTurbulenceKineticEnergy',
        'omega_dissipation_rate': 'DimensionalInitialConditionDomainsSpecificTurbulenceDissipationRate',
        'epsilon_dissipation_rate': 'DimensionalInitialConditionDomainsTurbulentDissipation',
        'eddy_viscosity': 'DimensionalInitialConditionDomainsDynamicViscosity',
        'eddy_viscosity_multiphase': 'DimensionalInitialConditionDomainsKinematicViscosity',
        'eddy_viscosity_compressible': 'DimensionalInitialConditionDomainsDynamicViscosity',
        'nu_tilda': 'DimensionalInitialConditionDomainsKinematicViscosity',
        'turbulent_thermal_diffusivity': 'DimensionalInitialConditionDomainsDynamicViscosity',
        'turbulent_thermal_diffusivity_compressible': 'DimensionalInitialConditionDomainsDynamicViscosity',
        'turbulent_dynamic_viscosity': 'DimensionalInitialConditionDomainsDynamicViscosity',
        'passive_scalars': 'list[DimensionalInitialConditionDomainsDimensionless]',
        'phase_fraction': 'DimensionalInitialConditionDomainsDimensionless',
        'phase_fractions': 'DimensionlessInitialConditionDomains',
        'relative_humidity': 'DimensionalInitialConditionDomainsDimensionless'
    }

    attribute_map = {
        'pressure': 'pressure',
        'pressure_rgh': 'pressureRgh',
        'gauge_pressure': 'gaugePressure',
        'gauge_pressure_rgh': 'gaugePressureRgh',
        'velocity': 'velocity',
        'temperature': 'temperature',
        'turbulent_kinetic_energy': 'turbulentKineticEnergy',
        'omega_dissipation_rate': 'omegaDissipationRate',
        'epsilon_dissipation_rate': 'epsilonDissipationRate',
        'eddy_viscosity': 'eddyViscosity',
        'eddy_viscosity_multiphase': 'eddyViscosityMultiphase',
        'eddy_viscosity_compressible': 'eddyViscosityCompressible',
        'nu_tilda': 'nuTilda',
        'turbulent_thermal_diffusivity': 'turbulentThermalDiffusivity',
        'turbulent_thermal_diffusivity_compressible': 'turbulentThermalDiffusivityCompressible',
        'turbulent_dynamic_viscosity': 'turbulentDynamicViscosity',
        'passive_scalars': 'passiveScalars',
        'phase_fraction': 'phaseFraction',
        'phase_fractions': 'phaseFractions',
        'relative_humidity': 'relativeHumidity'
    }

    def __init__(self, pressure=None, pressure_rgh=None, gauge_pressure=None, gauge_pressure_rgh=None, velocity=None, temperature=None, turbulent_kinetic_energy=None, omega_dissipation_rate=None, epsilon_dissipation_rate=None, eddy_viscosity=None, eddy_viscosity_multiphase=None, eddy_viscosity_compressible=None, nu_tilda=None, turbulent_thermal_diffusivity=None, turbulent_thermal_diffusivity_compressible=None, turbulent_dynamic_viscosity=None, passive_scalars=None, phase_fraction=None, phase_fractions=None, relative_humidity=None, local_vars_configuration=None):  # noqa: E501
        """FluidInitialConditions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pressure = None
        self._pressure_rgh = None
        self._gauge_pressure = None
        self._gauge_pressure_rgh = None
        self._velocity = None
        self._temperature = None
        self._turbulent_kinetic_energy = None
        self._omega_dissipation_rate = None
        self._epsilon_dissipation_rate = None
        self._eddy_viscosity = None
        self._eddy_viscosity_multiphase = None
        self._eddy_viscosity_compressible = None
        self._nu_tilda = None
        self._turbulent_thermal_diffusivity = None
        self._turbulent_thermal_diffusivity_compressible = None
        self._turbulent_dynamic_viscosity = None
        self._passive_scalars = None
        self._phase_fraction = None
        self._phase_fractions = None
        self._relative_humidity = None
        self.discriminator = None

        if pressure is not None:
            self.pressure = pressure
        if pressure_rgh is not None:
            self.pressure_rgh = pressure_rgh
        if gauge_pressure is not None:
            self.gauge_pressure = gauge_pressure
        if gauge_pressure_rgh is not None:
            self.gauge_pressure_rgh = gauge_pressure_rgh
        if velocity is not None:
            self.velocity = velocity
        if temperature is not None:
            self.temperature = temperature
        if turbulent_kinetic_energy is not None:
            self.turbulent_kinetic_energy = turbulent_kinetic_energy
        if omega_dissipation_rate is not None:
            self.omega_dissipation_rate = omega_dissipation_rate
        if epsilon_dissipation_rate is not None:
            self.epsilon_dissipation_rate = epsilon_dissipation_rate
        if eddy_viscosity is not None:
            self.eddy_viscosity = eddy_viscosity
        if eddy_viscosity_multiphase is not None:
            self.eddy_viscosity_multiphase = eddy_viscosity_multiphase
        if eddy_viscosity_compressible is not None:
            self.eddy_viscosity_compressible = eddy_viscosity_compressible
        if nu_tilda is not None:
            self.nu_tilda = nu_tilda
        if turbulent_thermal_diffusivity is not None:
            self.turbulent_thermal_diffusivity = turbulent_thermal_diffusivity
        if turbulent_thermal_diffusivity_compressible is not None:
            self.turbulent_thermal_diffusivity_compressible = turbulent_thermal_diffusivity_compressible
        if turbulent_dynamic_viscosity is not None:
            self.turbulent_dynamic_viscosity = turbulent_dynamic_viscosity
        if passive_scalars is not None:
            self.passive_scalars = passive_scalars
        if phase_fraction is not None:
            self.phase_fraction = phase_fraction
        if phase_fractions is not None:
            self.phase_fractions = phase_fractions
        if relative_humidity is not None:
            self.relative_humidity = relative_humidity

    @property
    def pressure(self):
        """Gets the pressure of this FluidInitialConditions.  # noqa: E501


        :return: The pressure of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsPressure
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this FluidInitialConditions.


        :param pressure: The pressure of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsPressure
        """

        self._pressure = pressure

    @property
    def pressure_rgh(self):
        """Gets the pressure_rgh of this FluidInitialConditions.  # noqa: E501


        :return: The pressure_rgh of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsPressure
        """
        return self._pressure_rgh

    @pressure_rgh.setter
    def pressure_rgh(self, pressure_rgh):
        """Sets the pressure_rgh of this FluidInitialConditions.


        :param pressure_rgh: The pressure_rgh of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsPressure
        """

        self._pressure_rgh = pressure_rgh

    @property
    def gauge_pressure(self):
        """Gets the gauge_pressure of this FluidInitialConditions.  # noqa: E501


        :return: The gauge_pressure of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsPressure
        """
        return self._gauge_pressure

    @gauge_pressure.setter
    def gauge_pressure(self, gauge_pressure):
        """Sets the gauge_pressure of this FluidInitialConditions.


        :param gauge_pressure: The gauge_pressure of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsPressure
        """

        self._gauge_pressure = gauge_pressure

    @property
    def gauge_pressure_rgh(self):
        """Gets the gauge_pressure_rgh of this FluidInitialConditions.  # noqa: E501


        :return: The gauge_pressure_rgh of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsPressure
        """
        return self._gauge_pressure_rgh

    @gauge_pressure_rgh.setter
    def gauge_pressure_rgh(self, gauge_pressure_rgh):
        """Sets the gauge_pressure_rgh of this FluidInitialConditions.


        :param gauge_pressure_rgh: The gauge_pressure_rgh of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsPressure
        """

        self._gauge_pressure_rgh = gauge_pressure_rgh

    @property
    def velocity(self):
        """Gets the velocity of this FluidInitialConditions.  # noqa: E501


        :return: The velocity of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalVectorInitialConditionDomainsSpeed
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this FluidInitialConditions.


        :param velocity: The velocity of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalVectorInitialConditionDomainsSpeed
        """

        self._velocity = velocity

    @property
    def temperature(self):
        """Gets the temperature of this FluidInitialConditions.  # noqa: E501


        :return: The temperature of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this FluidInitialConditions.


        :param temperature: The temperature of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsTemperature
        """

        self._temperature = temperature

    @property
    def turbulent_kinetic_energy(self):
        """Gets the turbulent_kinetic_energy of this FluidInitialConditions.  # noqa: E501


        :return: The turbulent_kinetic_energy of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsTurbulenceKineticEnergy
        """
        return self._turbulent_kinetic_energy

    @turbulent_kinetic_energy.setter
    def turbulent_kinetic_energy(self, turbulent_kinetic_energy):
        """Sets the turbulent_kinetic_energy of this FluidInitialConditions.


        :param turbulent_kinetic_energy: The turbulent_kinetic_energy of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsTurbulenceKineticEnergy
        """

        self._turbulent_kinetic_energy = turbulent_kinetic_energy

    @property
    def omega_dissipation_rate(self):
        """Gets the omega_dissipation_rate of this FluidInitialConditions.  # noqa: E501


        :return: The omega_dissipation_rate of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsSpecificTurbulenceDissipationRate
        """
        return self._omega_dissipation_rate

    @omega_dissipation_rate.setter
    def omega_dissipation_rate(self, omega_dissipation_rate):
        """Sets the omega_dissipation_rate of this FluidInitialConditions.


        :param omega_dissipation_rate: The omega_dissipation_rate of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsSpecificTurbulenceDissipationRate
        """

        self._omega_dissipation_rate = omega_dissipation_rate

    @property
    def epsilon_dissipation_rate(self):
        """Gets the epsilon_dissipation_rate of this FluidInitialConditions.  # noqa: E501


        :return: The epsilon_dissipation_rate of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsTurbulentDissipation
        """
        return self._epsilon_dissipation_rate

    @epsilon_dissipation_rate.setter
    def epsilon_dissipation_rate(self, epsilon_dissipation_rate):
        """Sets the epsilon_dissipation_rate of this FluidInitialConditions.


        :param epsilon_dissipation_rate: The epsilon_dissipation_rate of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsTurbulentDissipation
        """

        self._epsilon_dissipation_rate = epsilon_dissipation_rate

    @property
    def eddy_viscosity(self):
        """Gets the eddy_viscosity of this FluidInitialConditions.  # noqa: E501


        :return: The eddy_viscosity of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsDynamicViscosity
        """
        return self._eddy_viscosity

    @eddy_viscosity.setter
    def eddy_viscosity(self, eddy_viscosity):
        """Sets the eddy_viscosity of this FluidInitialConditions.


        :param eddy_viscosity: The eddy_viscosity of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsDynamicViscosity
        """

        self._eddy_viscosity = eddy_viscosity

    @property
    def eddy_viscosity_multiphase(self):
        """Gets the eddy_viscosity_multiphase of this FluidInitialConditions.  # noqa: E501


        :return: The eddy_viscosity_multiphase of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsKinematicViscosity
        """
        return self._eddy_viscosity_multiphase

    @eddy_viscosity_multiphase.setter
    def eddy_viscosity_multiphase(self, eddy_viscosity_multiphase):
        """Sets the eddy_viscosity_multiphase of this FluidInitialConditions.


        :param eddy_viscosity_multiphase: The eddy_viscosity_multiphase of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsKinematicViscosity
        """

        self._eddy_viscosity_multiphase = eddy_viscosity_multiphase

    @property
    def eddy_viscosity_compressible(self):
        """Gets the eddy_viscosity_compressible of this FluidInitialConditions.  # noqa: E501


        :return: The eddy_viscosity_compressible of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsDynamicViscosity
        """
        return self._eddy_viscosity_compressible

    @eddy_viscosity_compressible.setter
    def eddy_viscosity_compressible(self, eddy_viscosity_compressible):
        """Sets the eddy_viscosity_compressible of this FluidInitialConditions.


        :param eddy_viscosity_compressible: The eddy_viscosity_compressible of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsDynamicViscosity
        """

        self._eddy_viscosity_compressible = eddy_viscosity_compressible

    @property
    def nu_tilda(self):
        """Gets the nu_tilda of this FluidInitialConditions.  # noqa: E501


        :return: The nu_tilda of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsKinematicViscosity
        """
        return self._nu_tilda

    @nu_tilda.setter
    def nu_tilda(self, nu_tilda):
        """Sets the nu_tilda of this FluidInitialConditions.


        :param nu_tilda: The nu_tilda of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsKinematicViscosity
        """

        self._nu_tilda = nu_tilda

    @property
    def turbulent_thermal_diffusivity(self):
        """Gets the turbulent_thermal_diffusivity of this FluidInitialConditions.  # noqa: E501


        :return: The turbulent_thermal_diffusivity of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsDynamicViscosity
        """
        return self._turbulent_thermal_diffusivity

    @turbulent_thermal_diffusivity.setter
    def turbulent_thermal_diffusivity(self, turbulent_thermal_diffusivity):
        """Sets the turbulent_thermal_diffusivity of this FluidInitialConditions.


        :param turbulent_thermal_diffusivity: The turbulent_thermal_diffusivity of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsDynamicViscosity
        """

        self._turbulent_thermal_diffusivity = turbulent_thermal_diffusivity

    @property
    def turbulent_thermal_diffusivity_compressible(self):
        """Gets the turbulent_thermal_diffusivity_compressible of this FluidInitialConditions.  # noqa: E501


        :return: The turbulent_thermal_diffusivity_compressible of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsDynamicViscosity
        """
        return self._turbulent_thermal_diffusivity_compressible

    @turbulent_thermal_diffusivity_compressible.setter
    def turbulent_thermal_diffusivity_compressible(self, turbulent_thermal_diffusivity_compressible):
        """Sets the turbulent_thermal_diffusivity_compressible of this FluidInitialConditions.


        :param turbulent_thermal_diffusivity_compressible: The turbulent_thermal_diffusivity_compressible of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsDynamicViscosity
        """

        self._turbulent_thermal_diffusivity_compressible = turbulent_thermal_diffusivity_compressible

    @property
    def turbulent_dynamic_viscosity(self):
        """Gets the turbulent_dynamic_viscosity of this FluidInitialConditions.  # noqa: E501


        :return: The turbulent_dynamic_viscosity of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsDynamicViscosity
        """
        return self._turbulent_dynamic_viscosity

    @turbulent_dynamic_viscosity.setter
    def turbulent_dynamic_viscosity(self, turbulent_dynamic_viscosity):
        """Sets the turbulent_dynamic_viscosity of this FluidInitialConditions.


        :param turbulent_dynamic_viscosity: The turbulent_dynamic_viscosity of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsDynamicViscosity
        """

        self._turbulent_dynamic_viscosity = turbulent_dynamic_viscosity

    @property
    def passive_scalars(self):
        """Gets the passive_scalars of this FluidInitialConditions.  # noqa: E501


        :return: The passive_scalars of this FluidInitialConditions.  # noqa: E501
        :rtype: list[DimensionalInitialConditionDomainsDimensionless]
        """
        return self._passive_scalars

    @passive_scalars.setter
    def passive_scalars(self, passive_scalars):
        """Sets the passive_scalars of this FluidInitialConditions.


        :param passive_scalars: The passive_scalars of this FluidInitialConditions.  # noqa: E501
        :type: list[DimensionalInitialConditionDomainsDimensionless]
        """

        self._passive_scalars = passive_scalars

    @property
    def phase_fraction(self):
        """Gets the phase_fraction of this FluidInitialConditions.  # noqa: E501


        :return: The phase_fraction of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsDimensionless
        """
        return self._phase_fraction

    @phase_fraction.setter
    def phase_fraction(self, phase_fraction):
        """Sets the phase_fraction of this FluidInitialConditions.


        :param phase_fraction: The phase_fraction of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsDimensionless
        """

        self._phase_fraction = phase_fraction

    @property
    def phase_fractions(self):
        """Gets the phase_fractions of this FluidInitialConditions.  # noqa: E501


        :return: The phase_fractions of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionlessInitialConditionDomains
        """
        return self._phase_fractions

    @phase_fractions.setter
    def phase_fractions(self, phase_fractions):
        """Sets the phase_fractions of this FluidInitialConditions.


        :param phase_fractions: The phase_fractions of this FluidInitialConditions.  # noqa: E501
        :type: DimensionlessInitialConditionDomains
        """

        self._phase_fractions = phase_fractions

    @property
    def relative_humidity(self):
        """Gets the relative_humidity of this FluidInitialConditions.  # noqa: E501


        :return: The relative_humidity of this FluidInitialConditions.  # noqa: E501
        :rtype: DimensionalInitialConditionDomainsDimensionless
        """
        return self._relative_humidity

    @relative_humidity.setter
    def relative_humidity(self, relative_humidity):
        """Sets the relative_humidity of this FluidInitialConditions.


        :param relative_humidity: The relative_humidity of this FluidInitialConditions.  # noqa: E501
        :type: DimensionalInitialConditionDomainsDimensionless
        """

        self._relative_humidity = relative_humidity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidInitialConditions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FluidInitialConditions):
            return True

        return self.to_dict() != other.to_dict()
