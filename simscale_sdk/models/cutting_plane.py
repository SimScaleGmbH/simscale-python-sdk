# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class CuttingPlane(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'center': 'Vector3D',
        'normal': 'Vector3D',
        'opacity': 'float',
        'clipping': 'bool',
        'vector_grid_spacing': 'float',
        'scalar_field': 'ScalarField',
        'vector_field': 'VectorField',
        'project_vectors_onto_plane': 'bool',
        'render_mode': 'RenderMode'
    }

    attribute_map = {
        'name': 'name',
        'center': 'center',
        'normal': 'normal',
        'opacity': 'opacity',
        'clipping': 'clipping',
        'vector_grid_spacing': 'vectorGridSpacing',
        'scalar_field': 'scalarField',
        'vector_field': 'vectorField',
        'project_vectors_onto_plane': 'projectVectorsOntoPlane',
        'render_mode': 'renderMode'
    }

    def __init__(self, name=None, center=None, normal=None, opacity=None, clipping=True, vector_grid_spacing=None, scalar_field=None, vector_field=None, project_vectors_onto_plane=False, render_mode=None, local_vars_configuration=None):  # noqa: E501
        """CuttingPlane - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._center = None
        self._normal = None
        self._opacity = None
        self._clipping = None
        self._vector_grid_spacing = None
        self._scalar_field = None
        self._vector_field = None
        self._project_vectors_onto_plane = None
        self._render_mode = None
        self.discriminator = None

        self.name = name
        self.center = center
        self.normal = normal
        if opacity is not None:
            self.opacity = opacity
        self.clipping = clipping
        if vector_grid_spacing is not None:
            self.vector_grid_spacing = vector_grid_spacing
        if scalar_field is not None:
            self.scalar_field = scalar_field
        if vector_field is not None:
            self.vector_field = vector_field
        self.project_vectors_onto_plane = project_vectors_onto_plane
        if render_mode is not None:
            self.render_mode = render_mode

    @property
    def name(self):
        """Gets the name of this CuttingPlane.  # noqa: E501


        :return: The name of this CuttingPlane.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CuttingPlane.


        :param name: The name of this CuttingPlane.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def center(self):
        """Gets the center of this CuttingPlane.  # noqa: E501


        :return: The center of this CuttingPlane.  # noqa: E501
        :rtype: Vector3D
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this CuttingPlane.


        :param center: The center of this CuttingPlane.  # noqa: E501
        :type: Vector3D
        """
        if self.local_vars_configuration.client_side_validation and center is None:  # noqa: E501
            raise ValueError("Invalid value for `center`, must not be `None`")  # noqa: E501

        self._center = center

    @property
    def normal(self):
        """Gets the normal of this CuttingPlane.  # noqa: E501


        :return: The normal of this CuttingPlane.  # noqa: E501
        :rtype: Vector3D
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this CuttingPlane.


        :param normal: The normal of this CuttingPlane.  # noqa: E501
        :type: Vector3D
        """
        if self.local_vars_configuration.client_side_validation and normal is None:  # noqa: E501
            raise ValueError("Invalid value for `normal`, must not be `None`")  # noqa: E501

        self._normal = normal

    @property
    def opacity(self):
        """Gets the opacity of this CuttingPlane.  # noqa: E501


        :return: The opacity of this CuttingPlane.  # noqa: E501
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this CuttingPlane.


        :param opacity: The opacity of this CuttingPlane.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                opacity is not None and opacity > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `opacity`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                opacity is not None and opacity < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `opacity`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._opacity = opacity

    @property
    def clipping(self):
        """Gets the clipping of this CuttingPlane.  # noqa: E501


        :return: The clipping of this CuttingPlane.  # noqa: E501
        :rtype: bool
        """
        return self._clipping

    @clipping.setter
    def clipping(self, clipping):
        """Sets the clipping of this CuttingPlane.


        :param clipping: The clipping of this CuttingPlane.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and clipping is None:  # noqa: E501
            raise ValueError("Invalid value for `clipping`, must not be `None`")  # noqa: E501

        self._clipping = clipping

    @property
    def vector_grid_spacing(self):
        """Gets the vector_grid_spacing of this CuttingPlane.  # noqa: E501

        This field is required if projectVectorsOntoPlane is set to true.  # noqa: E501

        :return: The vector_grid_spacing of this CuttingPlane.  # noqa: E501
        :rtype: float
        """
        return self._vector_grid_spacing

    @vector_grid_spacing.setter
    def vector_grid_spacing(self, vector_grid_spacing):
        """Sets the vector_grid_spacing of this CuttingPlane.

        This field is required if projectVectorsOntoPlane is set to true.  # noqa: E501

        :param vector_grid_spacing: The vector_grid_spacing of this CuttingPlane.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                vector_grid_spacing is not None and vector_grid_spacing > 0.04):  # noqa: E501
            raise ValueError("Invalid value for `vector_grid_spacing`, must be a value less than or equal to `0.04`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                vector_grid_spacing is not None and vector_grid_spacing <= 0.0):  # noqa: E501
            raise ValueError("Invalid value for `vector_grid_spacing`, must be a value greater than `0.0`")  # noqa: E501

        self._vector_grid_spacing = vector_grid_spacing

    @property
    def scalar_field(self):
        """Gets the scalar_field of this CuttingPlane.  # noqa: E501


        :return: The scalar_field of this CuttingPlane.  # noqa: E501
        :rtype: ScalarField
        """
        return self._scalar_field

    @scalar_field.setter
    def scalar_field(self, scalar_field):
        """Sets the scalar_field of this CuttingPlane.


        :param scalar_field: The scalar_field of this CuttingPlane.  # noqa: E501
        :type: ScalarField
        """

        self._scalar_field = scalar_field

    @property
    def vector_field(self):
        """Gets the vector_field of this CuttingPlane.  # noqa: E501


        :return: The vector_field of this CuttingPlane.  # noqa: E501
        :rtype: VectorField
        """
        return self._vector_field

    @vector_field.setter
    def vector_field(self, vector_field):
        """Sets the vector_field of this CuttingPlane.


        :param vector_field: The vector_field of this CuttingPlane.  # noqa: E501
        :type: VectorField
        """

        self._vector_field = vector_field

    @property
    def project_vectors_onto_plane(self):
        """Gets the project_vectors_onto_plane of this CuttingPlane.  # noqa: E501

        If a vectorField is provided, this flag will project the vector field onto the cutting plane.  # noqa: E501

        :return: The project_vectors_onto_plane of this CuttingPlane.  # noqa: E501
        :rtype: bool
        """
        return self._project_vectors_onto_plane

    @project_vectors_onto_plane.setter
    def project_vectors_onto_plane(self, project_vectors_onto_plane):
        """Sets the project_vectors_onto_plane of this CuttingPlane.

        If a vectorField is provided, this flag will project the vector field onto the cutting plane.  # noqa: E501

        :param project_vectors_onto_plane: The project_vectors_onto_plane of this CuttingPlane.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and project_vectors_onto_plane is None:  # noqa: E501
            raise ValueError("Invalid value for `project_vectors_onto_plane`, must not be `None`")  # noqa: E501

        self._project_vectors_onto_plane = project_vectors_onto_plane

    @property
    def render_mode(self):
        """Gets the render_mode of this CuttingPlane.  # noqa: E501


        :return: The render_mode of this CuttingPlane.  # noqa: E501
        :rtype: RenderMode
        """
        return self._render_mode

    @render_mode.setter
    def render_mode(self, render_mode):
        """Sets the render_mode of this CuttingPlane.


        :param render_mode: The render_mode of this CuttingPlane.  # noqa: E501
        :type: RenderMode
        """

        self._render_mode = render_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CuttingPlane):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CuttingPlane):
            return True

        return self.to_dict() != other.to_dict()
