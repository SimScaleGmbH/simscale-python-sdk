# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ProgressiveRefinement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable_progressive_refinement': 'bool',
        'base_refinement_fraction': 'float',
        'full_refinement_fraction': 'float'
    }

    attribute_map = {
        'enable_progressive_refinement': 'enableProgressiveRefinement',
        'base_refinement_fraction': 'baseRefinementFraction',
        'full_refinement_fraction': 'fullRefinementFraction'
    }

    def __init__(self, enable_progressive_refinement=None, base_refinement_fraction=None, full_refinement_fraction=None, local_vars_configuration=None):  # noqa: E501
        """ProgressiveRefinement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enable_progressive_refinement = None
        self._base_refinement_fraction = None
        self._full_refinement_fraction = None
        self.discriminator = None

        if enable_progressive_refinement is not None:
            self.enable_progressive_refinement = enable_progressive_refinement
        if base_refinement_fraction is not None:
            self.base_refinement_fraction = base_refinement_fraction
        if full_refinement_fraction is not None:
            self.full_refinement_fraction = full_refinement_fraction

    @property
    def enable_progressive_refinement(self):
        """Gets the enable_progressive_refinement of this ProgressiveRefinement.  # noqa: E501


        :return: The enable_progressive_refinement of this ProgressiveRefinement.  # noqa: E501
        :rtype: bool
        """
        return self._enable_progressive_refinement

    @enable_progressive_refinement.setter
    def enable_progressive_refinement(self, enable_progressive_refinement):
        """Sets the enable_progressive_refinement of this ProgressiveRefinement.


        :param enable_progressive_refinement: The enable_progressive_refinement of this ProgressiveRefinement.  # noqa: E501
        :type: bool
        """

        self._enable_progressive_refinement = enable_progressive_refinement

    @property
    def base_refinement_fraction(self):
        """Gets the base_refinement_fraction of this ProgressiveRefinement.  # noqa: E501


        :return: The base_refinement_fraction of this ProgressiveRefinement.  # noqa: E501
        :rtype: float
        """
        return self._base_refinement_fraction

    @base_refinement_fraction.setter
    def base_refinement_fraction(self, base_refinement_fraction):
        """Sets the base_refinement_fraction of this ProgressiveRefinement.


        :param base_refinement_fraction: The base_refinement_fraction of this ProgressiveRefinement.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                base_refinement_fraction is not None and base_refinement_fraction >= 1):  # noqa: E501
            raise ValueError("Invalid value for `base_refinement_fraction`, must be a value less than `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                base_refinement_fraction is not None and base_refinement_fraction < 0):  # noqa: E501
            raise ValueError("Invalid value for `base_refinement_fraction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._base_refinement_fraction = base_refinement_fraction

    @property
    def full_refinement_fraction(self):
        """Gets the full_refinement_fraction of this ProgressiveRefinement.  # noqa: E501


        :return: The full_refinement_fraction of this ProgressiveRefinement.  # noqa: E501
        :rtype: float
        """
        return self._full_refinement_fraction

    @full_refinement_fraction.setter
    def full_refinement_fraction(self, full_refinement_fraction):
        """Sets the full_refinement_fraction of this ProgressiveRefinement.


        :param full_refinement_fraction: The full_refinement_fraction of this ProgressiveRefinement.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                full_refinement_fraction is not None and full_refinement_fraction > 1):  # noqa: E501
            raise ValueError("Invalid value for `full_refinement_fraction`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                full_refinement_fraction is not None and full_refinement_fraction <= 0):  # noqa: E501
            raise ValueError("Invalid value for `full_refinement_fraction`, must be a value greater than `0`")  # noqa: E501

        self._full_refinement_fraction = full_refinement_fraction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgressiveRefinement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProgressiveRefinement):
            return True

        return self.to_dict() != other.to_dict()
