# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class InterpolationSchemes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'for_default': 'OneOfInterpolationSchemesForDefault',
        'interpolate_hby_a': 'OneOfInterpolationSchemesInterpolateHbyA',
        'interpolate_velocity': 'OneOfInterpolationSchemesInterpolateVelocity',
        'interpolate_kappa': 'OneOfInterpolationSchemesInterpolateKappa',
        'interpolate_rho': 'OneOfInterpolationSchemesInterpolateRho',
        'interpolate_thermo_rho_cp': 'OneOfInterpolationSchemesInterpolateThermoRhoCp',
        'interpolate_map_kappa': 'OneOfInterpolationSchemesInterpolateMapKappa',
        'interpolate_rho_hbya': 'OneOfInterpolationSchemesInterpolateRhoHbya',
        'interpolate_rho_0_velocity0': 'OneOfInterpolationSchemesInterpolateRho0Velocity0',
        'interpolate_grad_enthalpy': 'OneOfInterpolationSchemesInterpolateGradEnthalpy',
        'interpolate_rho_r_au': 'OneOfInterpolationSchemesInterpolateRhoRAU',
        'interpolate_r_au': 'OneOfInterpolationSchemesInterpolateRAU',
        'interpolate_velocity0': 'OneOfInterpolationSchemesInterpolateVelocity0',
        'reconstruct_velocity': 'OneOfInterpolationSchemesReconstructVelocity',
        'reconstruct_temperature': 'OneOfInterpolationSchemesReconstructTemperature',
        'reconstruct_rho': 'OneOfInterpolationSchemesReconstructRho'
    }

    attribute_map = {
        'for_default': 'forDefault',
        'interpolate_hby_a': 'interpolate_HbyA',
        'interpolate_velocity': 'interpolate_velocity',
        'interpolate_kappa': 'interpolate_kappa',
        'interpolate_rho': 'interpolate_rho',
        'interpolate_thermo_rho_cp': 'interpolate_thermo_rho_Cp',
        'interpolate_map_kappa': 'interpolate_map_Kappa',
        'interpolate_rho_hbya': 'interpolate_rho_Hbya',
        'interpolate_rho_0_velocity0': 'interpolate_rho_0_velocity0',
        'interpolate_grad_enthalpy': 'interpolate_grad_enthalpy',
        'interpolate_rho_r_au': 'interpolate_rho_rAU',
        'interpolate_r_au': 'interpolate_rAU',
        'interpolate_velocity0': 'interpolate_velocity0',
        'reconstruct_velocity': 'reconstruct_velocity',
        'reconstruct_temperature': 'reconstruct_temperature',
        'reconstruct_rho': 'reconstruct_rho'
    }

    def __init__(self, for_default=None, interpolate_hby_a=None, interpolate_velocity=None, interpolate_kappa=None, interpolate_rho=None, interpolate_thermo_rho_cp=None, interpolate_map_kappa=None, interpolate_rho_hbya=None, interpolate_rho_0_velocity0=None, interpolate_grad_enthalpy=None, interpolate_rho_r_au=None, interpolate_r_au=None, interpolate_velocity0=None, reconstruct_velocity=None, reconstruct_temperature=None, reconstruct_rho=None, local_vars_configuration=None):  # noqa: E501
        """InterpolationSchemes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._for_default = None
        self._interpolate_hby_a = None
        self._interpolate_velocity = None
        self._interpolate_kappa = None
        self._interpolate_rho = None
        self._interpolate_thermo_rho_cp = None
        self._interpolate_map_kappa = None
        self._interpolate_rho_hbya = None
        self._interpolate_rho_0_velocity0 = None
        self._interpolate_grad_enthalpy = None
        self._interpolate_rho_r_au = None
        self._interpolate_r_au = None
        self._interpolate_velocity0 = None
        self._reconstruct_velocity = None
        self._reconstruct_temperature = None
        self._reconstruct_rho = None
        self.discriminator = None

        if for_default is not None:
            self.for_default = for_default
        if interpolate_hby_a is not None:
            self.interpolate_hby_a = interpolate_hby_a
        if interpolate_velocity is not None:
            self.interpolate_velocity = interpolate_velocity
        if interpolate_kappa is not None:
            self.interpolate_kappa = interpolate_kappa
        if interpolate_rho is not None:
            self.interpolate_rho = interpolate_rho
        if interpolate_thermo_rho_cp is not None:
            self.interpolate_thermo_rho_cp = interpolate_thermo_rho_cp
        if interpolate_map_kappa is not None:
            self.interpolate_map_kappa = interpolate_map_kappa
        if interpolate_rho_hbya is not None:
            self.interpolate_rho_hbya = interpolate_rho_hbya
        if interpolate_rho_0_velocity0 is not None:
            self.interpolate_rho_0_velocity0 = interpolate_rho_0_velocity0
        if interpolate_grad_enthalpy is not None:
            self.interpolate_grad_enthalpy = interpolate_grad_enthalpy
        if interpolate_rho_r_au is not None:
            self.interpolate_rho_r_au = interpolate_rho_r_au
        if interpolate_r_au is not None:
            self.interpolate_r_au = interpolate_r_au
        if interpolate_velocity0 is not None:
            self.interpolate_velocity0 = interpolate_velocity0
        if reconstruct_velocity is not None:
            self.reconstruct_velocity = reconstruct_velocity
        if reconstruct_temperature is not None:
            self.reconstruct_temperature = reconstruct_temperature
        if reconstruct_rho is not None:
            self.reconstruct_rho = reconstruct_rho

    @property
    def for_default(self):
        """Gets the for_default of this InterpolationSchemes.  # noqa: E501


        :return: The for_default of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesForDefault
        """
        return self._for_default

    @for_default.setter
    def for_default(self, for_default):
        """Sets the for_default of this InterpolationSchemes.


        :param for_default: The for_default of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesForDefault
        """

        self._for_default = for_default

    @property
    def interpolate_hby_a(self):
        """Gets the interpolate_hby_a of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_hby_a of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateHbyA
        """
        return self._interpolate_hby_a

    @interpolate_hby_a.setter
    def interpolate_hby_a(self, interpolate_hby_a):
        """Sets the interpolate_hby_a of this InterpolationSchemes.


        :param interpolate_hby_a: The interpolate_hby_a of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateHbyA
        """

        self._interpolate_hby_a = interpolate_hby_a

    @property
    def interpolate_velocity(self):
        """Gets the interpolate_velocity of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_velocity of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateVelocity
        """
        return self._interpolate_velocity

    @interpolate_velocity.setter
    def interpolate_velocity(self, interpolate_velocity):
        """Sets the interpolate_velocity of this InterpolationSchemes.


        :param interpolate_velocity: The interpolate_velocity of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateVelocity
        """

        self._interpolate_velocity = interpolate_velocity

    @property
    def interpolate_kappa(self):
        """Gets the interpolate_kappa of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_kappa of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateKappa
        """
        return self._interpolate_kappa

    @interpolate_kappa.setter
    def interpolate_kappa(self, interpolate_kappa):
        """Sets the interpolate_kappa of this InterpolationSchemes.


        :param interpolate_kappa: The interpolate_kappa of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateKappa
        """

        self._interpolate_kappa = interpolate_kappa

    @property
    def interpolate_rho(self):
        """Gets the interpolate_rho of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_rho of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateRho
        """
        return self._interpolate_rho

    @interpolate_rho.setter
    def interpolate_rho(self, interpolate_rho):
        """Sets the interpolate_rho of this InterpolationSchemes.


        :param interpolate_rho: The interpolate_rho of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateRho
        """

        self._interpolate_rho = interpolate_rho

    @property
    def interpolate_thermo_rho_cp(self):
        """Gets the interpolate_thermo_rho_cp of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_thermo_rho_cp of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateThermoRhoCp
        """
        return self._interpolate_thermo_rho_cp

    @interpolate_thermo_rho_cp.setter
    def interpolate_thermo_rho_cp(self, interpolate_thermo_rho_cp):
        """Sets the interpolate_thermo_rho_cp of this InterpolationSchemes.


        :param interpolate_thermo_rho_cp: The interpolate_thermo_rho_cp of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateThermoRhoCp
        """

        self._interpolate_thermo_rho_cp = interpolate_thermo_rho_cp

    @property
    def interpolate_map_kappa(self):
        """Gets the interpolate_map_kappa of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_map_kappa of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateMapKappa
        """
        return self._interpolate_map_kappa

    @interpolate_map_kappa.setter
    def interpolate_map_kappa(self, interpolate_map_kappa):
        """Sets the interpolate_map_kappa of this InterpolationSchemes.


        :param interpolate_map_kappa: The interpolate_map_kappa of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateMapKappa
        """

        self._interpolate_map_kappa = interpolate_map_kappa

    @property
    def interpolate_rho_hbya(self):
        """Gets the interpolate_rho_hbya of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_rho_hbya of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateRhoHbya
        """
        return self._interpolate_rho_hbya

    @interpolate_rho_hbya.setter
    def interpolate_rho_hbya(self, interpolate_rho_hbya):
        """Sets the interpolate_rho_hbya of this InterpolationSchemes.


        :param interpolate_rho_hbya: The interpolate_rho_hbya of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateRhoHbya
        """

        self._interpolate_rho_hbya = interpolate_rho_hbya

    @property
    def interpolate_rho_0_velocity0(self):
        """Gets the interpolate_rho_0_velocity0 of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_rho_0_velocity0 of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateRho0Velocity0
        """
        return self._interpolate_rho_0_velocity0

    @interpolate_rho_0_velocity0.setter
    def interpolate_rho_0_velocity0(self, interpolate_rho_0_velocity0):
        """Sets the interpolate_rho_0_velocity0 of this InterpolationSchemes.


        :param interpolate_rho_0_velocity0: The interpolate_rho_0_velocity0 of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateRho0Velocity0
        """

        self._interpolate_rho_0_velocity0 = interpolate_rho_0_velocity0

    @property
    def interpolate_grad_enthalpy(self):
        """Gets the interpolate_grad_enthalpy of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_grad_enthalpy of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateGradEnthalpy
        """
        return self._interpolate_grad_enthalpy

    @interpolate_grad_enthalpy.setter
    def interpolate_grad_enthalpy(self, interpolate_grad_enthalpy):
        """Sets the interpolate_grad_enthalpy of this InterpolationSchemes.


        :param interpolate_grad_enthalpy: The interpolate_grad_enthalpy of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateGradEnthalpy
        """

        self._interpolate_grad_enthalpy = interpolate_grad_enthalpy

    @property
    def interpolate_rho_r_au(self):
        """Gets the interpolate_rho_r_au of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_rho_r_au of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateRhoRAU
        """
        return self._interpolate_rho_r_au

    @interpolate_rho_r_au.setter
    def interpolate_rho_r_au(self, interpolate_rho_r_au):
        """Sets the interpolate_rho_r_au of this InterpolationSchemes.


        :param interpolate_rho_r_au: The interpolate_rho_r_au of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateRhoRAU
        """

        self._interpolate_rho_r_au = interpolate_rho_r_au

    @property
    def interpolate_r_au(self):
        """Gets the interpolate_r_au of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_r_au of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateRAU
        """
        return self._interpolate_r_au

    @interpolate_r_au.setter
    def interpolate_r_au(self, interpolate_r_au):
        """Sets the interpolate_r_au of this InterpolationSchemes.


        :param interpolate_r_au: The interpolate_r_au of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateRAU
        """

        self._interpolate_r_au = interpolate_r_au

    @property
    def interpolate_velocity0(self):
        """Gets the interpolate_velocity0 of this InterpolationSchemes.  # noqa: E501


        :return: The interpolate_velocity0 of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesInterpolateVelocity0
        """
        return self._interpolate_velocity0

    @interpolate_velocity0.setter
    def interpolate_velocity0(self, interpolate_velocity0):
        """Sets the interpolate_velocity0 of this InterpolationSchemes.


        :param interpolate_velocity0: The interpolate_velocity0 of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesInterpolateVelocity0
        """

        self._interpolate_velocity0 = interpolate_velocity0

    @property
    def reconstruct_velocity(self):
        """Gets the reconstruct_velocity of this InterpolationSchemes.  # noqa: E501


        :return: The reconstruct_velocity of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesReconstructVelocity
        """
        return self._reconstruct_velocity

    @reconstruct_velocity.setter
    def reconstruct_velocity(self, reconstruct_velocity):
        """Sets the reconstruct_velocity of this InterpolationSchemes.


        :param reconstruct_velocity: The reconstruct_velocity of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesReconstructVelocity
        """

        self._reconstruct_velocity = reconstruct_velocity

    @property
    def reconstruct_temperature(self):
        """Gets the reconstruct_temperature of this InterpolationSchemes.  # noqa: E501


        :return: The reconstruct_temperature of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesReconstructTemperature
        """
        return self._reconstruct_temperature

    @reconstruct_temperature.setter
    def reconstruct_temperature(self, reconstruct_temperature):
        """Sets the reconstruct_temperature of this InterpolationSchemes.


        :param reconstruct_temperature: The reconstruct_temperature of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesReconstructTemperature
        """

        self._reconstruct_temperature = reconstruct_temperature

    @property
    def reconstruct_rho(self):
        """Gets the reconstruct_rho of this InterpolationSchemes.  # noqa: E501


        :return: The reconstruct_rho of this InterpolationSchemes.  # noqa: E501
        :rtype: OneOfInterpolationSchemesReconstructRho
        """
        return self._reconstruct_rho

    @reconstruct_rho.setter
    def reconstruct_rho(self, reconstruct_rho):
        """Sets the reconstruct_rho of this InterpolationSchemes.


        :param reconstruct_rho: The reconstruct_rho of this InterpolationSchemes.  # noqa: E501
        :type: OneOfInterpolationSchemesReconstructRho
        """

        self._reconstruct_rho = reconstruct_rho

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterpolationSchemes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InterpolationSchemes):
            return True

        return self.to_dict() != other.to_dict()
