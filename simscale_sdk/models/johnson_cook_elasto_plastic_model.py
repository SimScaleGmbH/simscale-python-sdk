# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class JohnsonCookElastoPlasticModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'youngs_modulus': 'DimensionalFunctionPressure',
        'poissons_ratio': 'OneOfJohnsonCookElastoPlasticModelPoissonsRatio',
        'initial_yield_stress': 'DimensionalFunctionPressure',
        'hardening_coefficient': 'DimensionalFunctionPressure',
        'hardening_exponent': 'float',
        'strain_rate_effect': 'bool',
        'strain_rate_hardening_coefficient': 'float',
        'reference_strain_rate': 'DimensionalStrainRate',
        'thermal_softening_effect': 'bool',
        'thermal_softening_exponent': 'float',
        'reference_temperature_jc': 'DimensionalTemperature',
        'melting_temperature_jc': 'DimensionalTemperature'
    }

    attribute_map = {
        'type': 'type',
        'youngs_modulus': 'youngsModulus',
        'poissons_ratio': 'poissonsRatio',
        'initial_yield_stress': 'initialYieldStress',
        'hardening_coefficient': 'hardeningCoefficient',
        'hardening_exponent': 'hardeningExponent',
        'strain_rate_effect': 'strainRateEffect',
        'strain_rate_hardening_coefficient': 'strainRateHardeningCoefficient',
        'reference_strain_rate': 'referenceStrainRate',
        'thermal_softening_effect': 'thermalSofteningEffect',
        'thermal_softening_exponent': 'thermalSofteningExponent',
        'reference_temperature_jc': 'referenceTemperatureJC',
        'melting_temperature_jc': 'meltingTemperatureJC'
    }

    def __init__(self, type='JOHNSON_COOK', youngs_modulus=None, poissons_ratio=None, initial_yield_stress=None, hardening_coefficient=None, hardening_exponent=None, strain_rate_effect=None, strain_rate_hardening_coefficient=None, reference_strain_rate=None, thermal_softening_effect=None, thermal_softening_exponent=None, reference_temperature_jc=None, melting_temperature_jc=None, local_vars_configuration=None):  # noqa: E501
        """JohnsonCookElastoPlasticModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._youngs_modulus = None
        self._poissons_ratio = None
        self._initial_yield_stress = None
        self._hardening_coefficient = None
        self._hardening_exponent = None
        self._strain_rate_effect = None
        self._strain_rate_hardening_coefficient = None
        self._reference_strain_rate = None
        self._thermal_softening_effect = None
        self._thermal_softening_exponent = None
        self._reference_temperature_jc = None
        self._melting_temperature_jc = None
        self.discriminator = None

        self.type = type
        if youngs_modulus is not None:
            self.youngs_modulus = youngs_modulus
        if poissons_ratio is not None:
            self.poissons_ratio = poissons_ratio
        if initial_yield_stress is not None:
            self.initial_yield_stress = initial_yield_stress
        if hardening_coefficient is not None:
            self.hardening_coefficient = hardening_coefficient
        if hardening_exponent is not None:
            self.hardening_exponent = hardening_exponent
        if strain_rate_effect is not None:
            self.strain_rate_effect = strain_rate_effect
        if strain_rate_hardening_coefficient is not None:
            self.strain_rate_hardening_coefficient = strain_rate_hardening_coefficient
        if reference_strain_rate is not None:
            self.reference_strain_rate = reference_strain_rate
        if thermal_softening_effect is not None:
            self.thermal_softening_effect = thermal_softening_effect
        if thermal_softening_exponent is not None:
            self.thermal_softening_exponent = thermal_softening_exponent
        if reference_temperature_jc is not None:
            self.reference_temperature_jc = reference_temperature_jc
        if melting_temperature_jc is not None:
            self.melting_temperature_jc = melting_temperature_jc

    @property
    def type(self):
        """Gets the type of this JohnsonCookElastoPlasticModel.  # noqa: E501

        Schema name: JohnsonCookElastoPlasticModel  # noqa: E501

        :return: The type of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JohnsonCookElastoPlasticModel.

        Schema name: JohnsonCookElastoPlasticModel  # noqa: E501

        :param type: The type of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def youngs_modulus(self):
        """Gets the youngs_modulus of this JohnsonCookElastoPlasticModel.  # noqa: E501


        :return: The youngs_modulus of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: DimensionalFunctionPressure
        """
        return self._youngs_modulus

    @youngs_modulus.setter
    def youngs_modulus(self, youngs_modulus):
        """Sets the youngs_modulus of this JohnsonCookElastoPlasticModel.


        :param youngs_modulus: The youngs_modulus of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: DimensionalFunctionPressure
        """

        self._youngs_modulus = youngs_modulus

    @property
    def poissons_ratio(self):
        """Gets the poissons_ratio of this JohnsonCookElastoPlasticModel.  # noqa: E501


        :return: The poissons_ratio of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: OneOfJohnsonCookElastoPlasticModelPoissonsRatio
        """
        return self._poissons_ratio

    @poissons_ratio.setter
    def poissons_ratio(self, poissons_ratio):
        """Sets the poissons_ratio of this JohnsonCookElastoPlasticModel.


        :param poissons_ratio: The poissons_ratio of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: OneOfJohnsonCookElastoPlasticModelPoissonsRatio
        """

        self._poissons_ratio = poissons_ratio

    @property
    def initial_yield_stress(self):
        """Gets the initial_yield_stress of this JohnsonCookElastoPlasticModel.  # noqa: E501


        :return: The initial_yield_stress of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: DimensionalFunctionPressure
        """
        return self._initial_yield_stress

    @initial_yield_stress.setter
    def initial_yield_stress(self, initial_yield_stress):
        """Sets the initial_yield_stress of this JohnsonCookElastoPlasticModel.


        :param initial_yield_stress: The initial_yield_stress of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: DimensionalFunctionPressure
        """

        self._initial_yield_stress = initial_yield_stress

    @property
    def hardening_coefficient(self):
        """Gets the hardening_coefficient of this JohnsonCookElastoPlasticModel.  # noqa: E501


        :return: The hardening_coefficient of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: DimensionalFunctionPressure
        """
        return self._hardening_coefficient

    @hardening_coefficient.setter
    def hardening_coefficient(self, hardening_coefficient):
        """Sets the hardening_coefficient of this JohnsonCookElastoPlasticModel.


        :param hardening_coefficient: The hardening_coefficient of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: DimensionalFunctionPressure
        """

        self._hardening_coefficient = hardening_coefficient

    @property
    def hardening_exponent(self):
        """Gets the hardening_exponent of this JohnsonCookElastoPlasticModel.  # noqa: E501

        The strain hardening exponent describes the rate at which the material hardens with respect to plastic strain.  # noqa: E501

        :return: The hardening_exponent of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: float
        """
        return self._hardening_exponent

    @hardening_exponent.setter
    def hardening_exponent(self, hardening_exponent):
        """Sets the hardening_exponent of this JohnsonCookElastoPlasticModel.

        The strain hardening exponent describes the rate at which the material hardens with respect to plastic strain.  # noqa: E501

        :param hardening_exponent: The hardening_exponent of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                hardening_exponent is not None and hardening_exponent < 0):  # noqa: E501
            raise ValueError("Invalid value for `hardening_exponent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._hardening_exponent = hardening_exponent

    @property
    def strain_rate_effect(self):
        """Gets the strain_rate_effect of this JohnsonCookElastoPlasticModel.  # noqa: E501

        This term indicates how the flow stress increases with increasing strain rate.  # noqa: E501

        :return: The strain_rate_effect of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: bool
        """
        return self._strain_rate_effect

    @strain_rate_effect.setter
    def strain_rate_effect(self, strain_rate_effect):
        """Sets the strain_rate_effect of this JohnsonCookElastoPlasticModel.

        This term indicates how the flow stress increases with increasing strain rate.  # noqa: E501

        :param strain_rate_effect: The strain_rate_effect of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: bool
        """

        self._strain_rate_effect = strain_rate_effect

    @property
    def strain_rate_hardening_coefficient(self):
        """Gets the strain_rate_hardening_coefficient of this JohnsonCookElastoPlasticModel.  # noqa: E501

        The strain rate hardening coefficient describes the sensitivity of the material's flow stress to changes in the strain rate.  # noqa: E501

        :return: The strain_rate_hardening_coefficient of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: float
        """
        return self._strain_rate_hardening_coefficient

    @strain_rate_hardening_coefficient.setter
    def strain_rate_hardening_coefficient(self, strain_rate_hardening_coefficient):
        """Sets the strain_rate_hardening_coefficient of this JohnsonCookElastoPlasticModel.

        The strain rate hardening coefficient describes the sensitivity of the material's flow stress to changes in the strain rate.  # noqa: E501

        :param strain_rate_hardening_coefficient: The strain_rate_hardening_coefficient of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                strain_rate_hardening_coefficient is not None and strain_rate_hardening_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `strain_rate_hardening_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._strain_rate_hardening_coefficient = strain_rate_hardening_coefficient

    @property
    def reference_strain_rate(self):
        """Gets the reference_strain_rate of this JohnsonCookElastoPlasticModel.  # noqa: E501


        :return: The reference_strain_rate of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: DimensionalStrainRate
        """
        return self._reference_strain_rate

    @reference_strain_rate.setter
    def reference_strain_rate(self, reference_strain_rate):
        """Sets the reference_strain_rate of this JohnsonCookElastoPlasticModel.


        :param reference_strain_rate: The reference_strain_rate of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: DimensionalStrainRate
        """

        self._reference_strain_rate = reference_strain_rate

    @property
    def thermal_softening_effect(self):
        """Gets the thermal_softening_effect of this JohnsonCookElastoPlasticModel.  # noqa: E501

        This term indicates how the material softens with increasing temperature.  # noqa: E501

        :return: The thermal_softening_effect of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: bool
        """
        return self._thermal_softening_effect

    @thermal_softening_effect.setter
    def thermal_softening_effect(self, thermal_softening_effect):
        """Sets the thermal_softening_effect of this JohnsonCookElastoPlasticModel.

        This term indicates how the material softens with increasing temperature.  # noqa: E501

        :param thermal_softening_effect: The thermal_softening_effect of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: bool
        """

        self._thermal_softening_effect = thermal_softening_effect

    @property
    def thermal_softening_exponent(self):
        """Gets the thermal_softening_exponent of this JohnsonCookElastoPlasticModel.  # noqa: E501

        The thermal softening exponent describes the rate at which the material's strength decreases with increasing temperature.  # noqa: E501

        :return: The thermal_softening_exponent of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: float
        """
        return self._thermal_softening_exponent

    @thermal_softening_exponent.setter
    def thermal_softening_exponent(self, thermal_softening_exponent):
        """Sets the thermal_softening_exponent of this JohnsonCookElastoPlasticModel.

        The thermal softening exponent describes the rate at which the material's strength decreases with increasing temperature.  # noqa: E501

        :param thermal_softening_exponent: The thermal_softening_exponent of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                thermal_softening_exponent is not None and thermal_softening_exponent <= 0):  # noqa: E501
            raise ValueError("Invalid value for `thermal_softening_exponent`, must be a value greater than `0`")  # noqa: E501

        self._thermal_softening_exponent = thermal_softening_exponent

    @property
    def reference_temperature_jc(self):
        """Gets the reference_temperature_jc of this JohnsonCookElastoPlasticModel.  # noqa: E501


        :return: The reference_temperature_jc of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._reference_temperature_jc

    @reference_temperature_jc.setter
    def reference_temperature_jc(self, reference_temperature_jc):
        """Sets the reference_temperature_jc of this JohnsonCookElastoPlasticModel.


        :param reference_temperature_jc: The reference_temperature_jc of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._reference_temperature_jc = reference_temperature_jc

    @property
    def melting_temperature_jc(self):
        """Gets the melting_temperature_jc of this JohnsonCookElastoPlasticModel.  # noqa: E501


        :return: The melting_temperature_jc of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._melting_temperature_jc

    @melting_temperature_jc.setter
    def melting_temperature_jc(self, melting_temperature_jc):
        """Sets the melting_temperature_jc of this JohnsonCookElastoPlasticModel.


        :param melting_temperature_jc: The melting_temperature_jc of this JohnsonCookElastoPlasticModel.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._melting_temperature_jc = melting_temperature_jc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JohnsonCookElastoPlasticModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JohnsonCookElastoPlasticModel):
            return True

        return self.to_dict() != other.to_dict()
