# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FixedAugmentation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'newton_iteration_threshold': 'int',
        'timestep_augmentation': 'float'
    }

    attribute_map = {
        'newton_iteration_threshold': 'newtonIterationThreshold',
        'timestep_augmentation': 'timestepAugmentation'
    }

    def __init__(self, newton_iteration_threshold=None, timestep_augmentation=None, local_vars_configuration=None):  # noqa: E501
        """FixedAugmentation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._newton_iteration_threshold = None
        self._timestep_augmentation = None
        self.discriminator = None

        if newton_iteration_threshold is not None:
            self.newton_iteration_threshold = newton_iteration_threshold
        if timestep_augmentation is not None:
            self.timestep_augmentation = timestep_augmentation

    @property
    def newton_iteration_threshold(self):
        """Gets the newton_iteration_threshold of this FixedAugmentation.  # noqa: E501

        <p><b>Newton Iteration threshold</b> defines the threshold below which the actual number of Newton Iterations has to fall in order to increase the time step by the percentage given by <b>Timestep Augmentation</b>.</p>  # noqa: E501

        :return: The newton_iteration_threshold of this FixedAugmentation.  # noqa: E501
        :rtype: int
        """
        return self._newton_iteration_threshold

    @newton_iteration_threshold.setter
    def newton_iteration_threshold(self, newton_iteration_threshold):
        """Sets the newton_iteration_threshold of this FixedAugmentation.

        <p><b>Newton Iteration threshold</b> defines the threshold below which the actual number of Newton Iterations has to fall in order to increase the time step by the percentage given by <b>Timestep Augmentation</b>.</p>  # noqa: E501

        :param newton_iteration_threshold: The newton_iteration_threshold of this FixedAugmentation.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                newton_iteration_threshold is not None and newton_iteration_threshold < 1):  # noqa: E501
            raise ValueError("Invalid value for `newton_iteration_threshold`, must be a value greater than or equal to `1`")  # noqa: E501

        self._newton_iteration_threshold = newton_iteration_threshold

    @property
    def timestep_augmentation(self):
        """Gets the timestep_augmentation of this FixedAugmentation.  # noqa: E501

        <p><b>Newton Iteration threshold</b> defines the threshold below which the actual number of Newton Iterations has to fall in order to increase the time step by the percentage given by <b>Timestep Augmentation</b>.</p>  # noqa: E501

        :return: The timestep_augmentation of this FixedAugmentation.  # noqa: E501
        :rtype: float
        """
        return self._timestep_augmentation

    @timestep_augmentation.setter
    def timestep_augmentation(self, timestep_augmentation):
        """Sets the timestep_augmentation of this FixedAugmentation.

        <p><b>Newton Iteration threshold</b> defines the threshold below which the actual number of Newton Iterations has to fall in order to increase the time step by the percentage given by <b>Timestep Augmentation</b>.</p>  # noqa: E501

        :param timestep_augmentation: The timestep_augmentation of this FixedAugmentation.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                timestep_augmentation is not None and timestep_augmentation < 0):  # noqa: E501
            raise ValueError("Invalid value for `timestep_augmentation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timestep_augmentation = timestep_augmentation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FixedAugmentation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FixedAugmentation):
            return True

        return self.to_dict() != other.to_dict()
