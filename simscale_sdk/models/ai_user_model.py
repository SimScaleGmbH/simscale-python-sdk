# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class AiUserModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'analysis_type': 'str',
        'name': 'str',
        'predictor_component': 'str',
        'shared_with_organization': 'bool',
        'template_name': 'str',
        'template_parameters': 'object',
        'ai_model_id': 'str'
    }

    attribute_map = {
        'analysis_type': 'analysisType',
        'name': 'name',
        'predictor_component': 'predictorComponent',
        'shared_with_organization': 'sharedWithOrganization',
        'template_name': 'templateName',
        'template_parameters': 'templateParameters',
        'ai_model_id': 'aiModelId'
    }

    def __init__(self, analysis_type=None, name=None, predictor_component=None, shared_with_organization=None, template_name=None, template_parameters=None, ai_model_id=None, local_vars_configuration=None):  # noqa: E501
        """AiUserModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._analysis_type = None
        self._name = None
        self._predictor_component = None
        self._shared_with_organization = None
        self._template_name = None
        self._template_parameters = None
        self._ai_model_id = None
        self.discriminator = None

        if analysis_type is not None:
            self.analysis_type = analysis_type
        if name is not None:
            self.name = name
        if predictor_component is not None:
            self.predictor_component = predictor_component
        if shared_with_organization is not None:
            self.shared_with_organization = shared_with_organization
        if template_name is not None:
            self.template_name = template_name
        if template_parameters is not None:
            self.template_parameters = template_parameters
        if ai_model_id is not None:
            self.ai_model_id = ai_model_id

    @property
    def analysis_type(self):
        """Gets the analysis_type of this AiUserModel.  # noqa: E501

        Possible values are STATIC_ANALYSIS, INCOMPRESSIBLE, COUPLED_CONJUGATE_HEAT_TRANSFER and EMBEDDED_BOUNDARY   # noqa: E501

        :return: The analysis_type of this AiUserModel.  # noqa: E501
        :rtype: str
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type):
        """Sets the analysis_type of this AiUserModel.

        Possible values are STATIC_ANALYSIS, INCOMPRESSIBLE, COUPLED_CONJUGATE_HEAT_TRANSFER and EMBEDDED_BOUNDARY   # noqa: E501

        :param analysis_type: The analysis_type of this AiUserModel.  # noqa: E501
        :type: str
        """

        self._analysis_type = analysis_type

    @property
    def name(self):
        """Gets the name of this AiUserModel.  # noqa: E501


        :return: The name of this AiUserModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AiUserModel.


        :param name: The name of this AiUserModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def predictor_component(self):
        """Gets the predictor_component of this AiUserModel.  # noqa: E501

        Possible values are navasto and ai-solver-kickstart   # noqa: E501

        :return: The predictor_component of this AiUserModel.  # noqa: E501
        :rtype: str
        """
        return self._predictor_component

    @predictor_component.setter
    def predictor_component(self, predictor_component):
        """Sets the predictor_component of this AiUserModel.

        Possible values are navasto and ai-solver-kickstart   # noqa: E501

        :param predictor_component: The predictor_component of this AiUserModel.  # noqa: E501
        :type: str
        """

        self._predictor_component = predictor_component

    @property
    def shared_with_organization(self):
        """Gets the shared_with_organization of this AiUserModel.  # noqa: E501


        :return: The shared_with_organization of this AiUserModel.  # noqa: E501
        :rtype: bool
        """
        return self._shared_with_organization

    @shared_with_organization.setter
    def shared_with_organization(self, shared_with_organization):
        """Sets the shared_with_organization of this AiUserModel.


        :param shared_with_organization: The shared_with_organization of this AiUserModel.  # noqa: E501
        :type: bool
        """

        self._shared_with_organization = shared_with_organization

    @property
    def template_name(self):
        """Gets the template_name of this AiUserModel.  # noqa: E501

        Possible values are fea_template, cfd_template, chtv2ibm_template, spec_id and spec_and_tesselation   # noqa: E501

        :return: The template_name of this AiUserModel.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this AiUserModel.

        Possible values are fea_template, cfd_template, chtv2ibm_template, spec_id and spec_and_tesselation   # noqa: E501

        :param template_name: The template_name of this AiUserModel.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def template_parameters(self):
        """Gets the template_parameters of this AiUserModel.  # noqa: E501


        :return: The template_parameters of this AiUserModel.  # noqa: E501
        :rtype: object
        """
        return self._template_parameters

    @template_parameters.setter
    def template_parameters(self, template_parameters):
        """Sets the template_parameters of this AiUserModel.


        :param template_parameters: The template_parameters of this AiUserModel.  # noqa: E501
        :type: object
        """

        self._template_parameters = template_parameters

    @property
    def ai_model_id(self):
        """Gets the ai_model_id of this AiUserModel.  # noqa: E501


        :return: The ai_model_id of this AiUserModel.  # noqa: E501
        :rtype: str
        """
        return self._ai_model_id

    @ai_model_id.setter
    def ai_model_id(self, ai_model_id):
        """Sets the ai_model_id of this AiUserModel.


        :param ai_model_id: The ai_model_id of this AiUserModel.  # noqa: E501
        :type: str
        """

        self._ai_model_id = ai_model_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AiUserModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AiUserModel):
            return True

        return self.to_dict() != other.to_dict()
