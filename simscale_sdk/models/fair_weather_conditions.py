# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FairWeatherConditions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'sky_cloud_cover_fraction': 'float',
        'ground_reflectivity': 'float',
        'a': 'float',
        'b': 'float',
        'c': 'float'
    }

    attribute_map = {
        'type': 'type',
        'sky_cloud_cover_fraction': 'skyCloudCoverFraction',
        'ground_reflectivity': 'groundReflectivity',
        'a': 'A',
        'b': 'B',
        'c': 'C'
    }

    def __init__(self, type='FAIR_WEATHER_CONDITIONS', sky_cloud_cover_fraction=None, ground_reflectivity=None, a=None, b=None, c=None, local_vars_configuration=None):  # noqa: E501
        """FairWeatherConditions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._sky_cloud_cover_fraction = None
        self._ground_reflectivity = None
        self._a = None
        self._b = None
        self._c = None
        self.discriminator = None

        self.type = type
        if sky_cloud_cover_fraction is not None:
            self.sky_cloud_cover_fraction = sky_cloud_cover_fraction
        if ground_reflectivity is not None:
            self.ground_reflectivity = ground_reflectivity
        if a is not None:
            self.a = a
        if b is not None:
            self.b = b
        if c is not None:
            self.c = c

    @property
    def type(self):
        """Gets the type of this FairWeatherConditions.  # noqa: E501


        :return: The type of this FairWeatherConditions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FairWeatherConditions.


        :param type: The type of this FairWeatherConditions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def sky_cloud_cover_fraction(self):
        """Gets the sky_cloud_cover_fraction of this FairWeatherConditions.  # noqa: E501


        :return: The sky_cloud_cover_fraction of this FairWeatherConditions.  # noqa: E501
        :rtype: float
        """
        return self._sky_cloud_cover_fraction

    @sky_cloud_cover_fraction.setter
    def sky_cloud_cover_fraction(self, sky_cloud_cover_fraction):
        """Sets the sky_cloud_cover_fraction of this FairWeatherConditions.


        :param sky_cloud_cover_fraction: The sky_cloud_cover_fraction of this FairWeatherConditions.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                sky_cloud_cover_fraction is not None and sky_cloud_cover_fraction > 1):  # noqa: E501
            raise ValueError("Invalid value for `sky_cloud_cover_fraction`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sky_cloud_cover_fraction is not None and sky_cloud_cover_fraction < 0):  # noqa: E501
            raise ValueError("Invalid value for `sky_cloud_cover_fraction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sky_cloud_cover_fraction = sky_cloud_cover_fraction

    @property
    def ground_reflectivity(self):
        """Gets the ground_reflectivity of this FairWeatherConditions.  # noqa: E501


        :return: The ground_reflectivity of this FairWeatherConditions.  # noqa: E501
        :rtype: float
        """
        return self._ground_reflectivity

    @ground_reflectivity.setter
    def ground_reflectivity(self, ground_reflectivity):
        """Sets the ground_reflectivity of this FairWeatherConditions.


        :param ground_reflectivity: The ground_reflectivity of this FairWeatherConditions.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                ground_reflectivity is not None and ground_reflectivity > 1):  # noqa: E501
            raise ValueError("Invalid value for `ground_reflectivity`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                ground_reflectivity is not None and ground_reflectivity < 0):  # noqa: E501
            raise ValueError("Invalid value for `ground_reflectivity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ground_reflectivity = ground_reflectivity

    @property
    def a(self):
        """Gets the a of this FairWeatherConditions.  # noqa: E501


        :return: The a of this FairWeatherConditions.  # noqa: E501
        :rtype: float
        """
        return self._a

    @a.setter
    def a(self, a):
        """Sets the a of this FairWeatherConditions.


        :param a: The a of this FairWeatherConditions.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                a is not None and a < 0):  # noqa: E501
            raise ValueError("Invalid value for `a`, must be a value greater than or equal to `0`")  # noqa: E501

        self._a = a

    @property
    def b(self):
        """Gets the b of this FairWeatherConditions.  # noqa: E501


        :return: The b of this FairWeatherConditions.  # noqa: E501
        :rtype: float
        """
        return self._b

    @b.setter
    def b(self, b):
        """Sets the b of this FairWeatherConditions.


        :param b: The b of this FairWeatherConditions.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                b is not None and b < 0):  # noqa: E501
            raise ValueError("Invalid value for `b`, must be a value greater than or equal to `0`")  # noqa: E501

        self._b = b

    @property
    def c(self):
        """Gets the c of this FairWeatherConditions.  # noqa: E501


        :return: The c of this FairWeatherConditions.  # noqa: E501
        :rtype: float
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this FairWeatherConditions.


        :param c: The c of this FairWeatherConditions.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                c is not None and c > 1):  # noqa: E501
            raise ValueError("Invalid value for `c`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                c is not None and c < 0):  # noqa: E501
            raise ValueError("Invalid value for `c`, must be a value greater than or equal to `0`")  # noqa: E501

        self._c = c

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FairWeatherConditions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FairWeatherConditions):
            return True

        return self.to_dict() != other.to_dict()
