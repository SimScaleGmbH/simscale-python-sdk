# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ParticleTraceAnimationOutputSettingsAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'frame_index': 'int',
        'steps': 'int'
    }

    attribute_map = {
        'type': 'type',
        'frame_index': 'frameIndex',
        'steps': 'steps'
    }

    def __init__(self, type='PARTICLE_TRACE', frame_index=None, steps=300, local_vars_configuration=None):  # noqa: E501
        """ParticleTraceAnimationOutputSettingsAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._frame_index = None
        self._steps = None
        self.discriminator = None

        self.type = type
        if frame_index is not None:
            self.frame_index = frame_index
        self.steps = steps

    @property
    def type(self):
        """Gets the type of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501


        :return: The type of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ParticleTraceAnimationOutputSettingsAllOf.


        :param type: The type of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def frame_index(self):
        """Gets the frame_index of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501

        Default is the last frame (time step) in the result.  # noqa: E501

        :return: The frame_index of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._frame_index

    @frame_index.setter
    def frame_index(self, frame_index):
        """Sets the frame_index of this ParticleTraceAnimationOutputSettingsAllOf.

        Default is the last frame (time step) in the result.  # noqa: E501

        :param frame_index: The frame_index of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                frame_index is not None and frame_index < 0):  # noqa: E501
            raise ValueError("Invalid value for `frame_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._frame_index = frame_index

    @property
    def steps(self):
        """Gets the steps of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501

        The number of steps to generate for the particle trace animation.  # noqa: E501

        :return: The steps of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ParticleTraceAnimationOutputSettingsAllOf.

        The number of steps to generate for the particle trace animation.  # noqa: E501

        :param steps: The steps of this ParticleTraceAnimationOutputSettingsAllOf.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and steps is None:  # noqa: E501
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                steps is not None and steps > 1000):  # noqa: E501
            raise ValueError("Invalid value for `steps`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                steps is not None and steps < 1):  # noqa: E501
            raise ValueError("Invalid value for `steps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParticleTraceAnimationOutputSettingsAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParticleTraceAnimationOutputSettingsAllOf):
            return True

        return self.to_dict() != other.to_dict()
