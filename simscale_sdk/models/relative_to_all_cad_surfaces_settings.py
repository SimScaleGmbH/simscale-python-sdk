# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class RelativeToAllCadSurfacesSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'minimum_cell_size': 'float',
        'maximum_cell_size': 'float',
        'cell_size_on_surfaces': 'float'
    }

    attribute_map = {
        'type': 'type',
        'minimum_cell_size': 'minimumCellSize',
        'maximum_cell_size': 'maximumCellSize',
        'cell_size_on_surfaces': 'cellSizeOnSurfaces'
    }

    def __init__(self, type='RELATIVE_TO_ALL_CAD_SURFACES', minimum_cell_size=None, maximum_cell_size=None, cell_size_on_surfaces=None, local_vars_configuration=None):  # noqa: E501
        """RelativeToAllCadSurfacesSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._minimum_cell_size = None
        self._maximum_cell_size = None
        self._cell_size_on_surfaces = None
        self.discriminator = None

        self.type = type
        if minimum_cell_size is not None:
            self.minimum_cell_size = minimum_cell_size
        if maximum_cell_size is not None:
            self.maximum_cell_size = maximum_cell_size
        if cell_size_on_surfaces is not None:
            self.cell_size_on_surfaces = cell_size_on_surfaces

    @property
    def type(self):
        """Gets the type of this RelativeToAllCadSurfacesSettings.  # noqa: E501

        Schema name: RelativeToAllCadSurfacesSettings  # noqa: E501

        :return: The type of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelativeToAllCadSurfacesSettings.

        Schema name: RelativeToAllCadSurfacesSettings  # noqa: E501

        :param type: The type of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def minimum_cell_size(self):
        """Gets the minimum_cell_size of this RelativeToAllCadSurfacesSettings.  # noqa: E501

        <p>This parameter specifies the <b>minimum size for all cells</b> of the mesh relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.</p>  # noqa: E501

        :return: The minimum_cell_size of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :rtype: float
        """
        return self._minimum_cell_size

    @minimum_cell_size.setter
    def minimum_cell_size(self, minimum_cell_size):
        """Sets the minimum_cell_size of this RelativeToAllCadSurfacesSettings.

        <p>This parameter specifies the <b>minimum size for all cells</b> of the mesh relative to the diagonal of the CAD model. A higher value leads to a coarser mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.</p>  # noqa: E501

        :param minimum_cell_size: The minimum_cell_size of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                minimum_cell_size is not None and minimum_cell_size > 1):  # noqa: E501
            raise ValueError("Invalid value for `minimum_cell_size`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                minimum_cell_size is not None and minimum_cell_size <= 0):  # noqa: E501
            raise ValueError("Invalid value for `minimum_cell_size`, must be a value greater than `0`")  # noqa: E501

        self._minimum_cell_size = minimum_cell_size

    @property
    def maximum_cell_size(self):
        """Gets the maximum_cell_size of this RelativeToAllCadSurfacesSettings.  # noqa: E501

        <p>This parameter specifies the <b>maximum size for all cells</b> of the mesh relative to the diagonal of the CAD model. A lower value leads to a finer mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.</p>  # noqa: E501

        :return: The maximum_cell_size of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :rtype: float
        """
        return self._maximum_cell_size

    @maximum_cell_size.setter
    def maximum_cell_size(self, maximum_cell_size):
        """Sets the maximum_cell_size of this RelativeToAllCadSurfacesSettings.

        <p>This parameter specifies the <b>maximum size for all cells</b> of the mesh relative to the diagonal of the CAD model. A lower value leads to a finer mesh. Our recommendation is to start with the default value and if necessary, gradually lower the parameter until a desired mesh fineness is obtained.</p>  # noqa: E501

        :param maximum_cell_size: The maximum_cell_size of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                maximum_cell_size is not None and maximum_cell_size > 1):  # noqa: E501
            raise ValueError("Invalid value for `maximum_cell_size`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                maximum_cell_size is not None and maximum_cell_size <= 0):  # noqa: E501
            raise ValueError("Invalid value for `maximum_cell_size`, must be a value greater than `0`")  # noqa: E501

        self._maximum_cell_size = maximum_cell_size

    @property
    def cell_size_on_surfaces(self):
        """Gets the cell_size_on_surfaces of this RelativeToAllCadSurfacesSettings.  # noqa: E501


        :return: The cell_size_on_surfaces of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :rtype: float
        """
        return self._cell_size_on_surfaces

    @cell_size_on_surfaces.setter
    def cell_size_on_surfaces(self, cell_size_on_surfaces):
        """Sets the cell_size_on_surfaces of this RelativeToAllCadSurfacesSettings.


        :param cell_size_on_surfaces: The cell_size_on_surfaces of this RelativeToAllCadSurfacesSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                cell_size_on_surfaces is not None and cell_size_on_surfaces > 1):  # noqa: E501
            raise ValueError("Invalid value for `cell_size_on_surfaces`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cell_size_on_surfaces is not None and cell_size_on_surfaces <= 0):  # noqa: E501
            raise ValueError("Invalid value for `cell_size_on_surfaces`, must be a value greater than `0`")  # noqa: E501

        self._cell_size_on_surfaces = cell_size_on_surfaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelativeToAllCadSurfacesSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelativeToAllCadSurfacesSettings):
            return True

        return self.to_dict() != other.to_dict()
