# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class TimeStepAnimationOutputSettingsAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'from_frame_index': 'int',
        'to_frame_index': 'int',
        'skip_frames': 'int'
    }

    attribute_map = {
        'type': 'type',
        'from_frame_index': 'fromFrameIndex',
        'to_frame_index': 'toFrameIndex',
        'skip_frames': 'skipFrames'
    }

    def __init__(self, type='TIME_STEP', from_frame_index=0, to_frame_index=None, skip_frames=0, local_vars_configuration=None):  # noqa: E501
        """TimeStepAnimationOutputSettingsAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._from_frame_index = None
        self._to_frame_index = None
        self._skip_frames = None
        self.discriminator = None

        self.type = type
        self.from_frame_index = from_frame_index
        self.to_frame_index = to_frame_index
        self.skip_frames = skip_frames

    @property
    def type(self):
        """Gets the type of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501


        :return: The type of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeStepAnimationOutputSettingsAllOf.


        :param type: The type of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def from_frame_index(self):
        """Gets the from_frame_index of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501


        :return: The from_frame_index of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._from_frame_index

    @from_frame_index.setter
    def from_frame_index(self, from_frame_index):
        """Sets the from_frame_index of this TimeStepAnimationOutputSettingsAllOf.


        :param from_frame_index: The from_frame_index of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and from_frame_index is None:  # noqa: E501
            raise ValueError("Invalid value for `from_frame_index`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                from_frame_index is not None and from_frame_index < 0):  # noqa: E501
            raise ValueError("Invalid value for `from_frame_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._from_frame_index = from_frame_index

    @property
    def to_frame_index(self):
        """Gets the to_frame_index of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501


        :return: The to_frame_index of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._to_frame_index

    @to_frame_index.setter
    def to_frame_index(self, to_frame_index):
        """Sets the to_frame_index of this TimeStepAnimationOutputSettingsAllOf.


        :param to_frame_index: The to_frame_index of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and to_frame_index is None:  # noqa: E501
            raise ValueError("Invalid value for `to_frame_index`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                to_frame_index is not None and to_frame_index < 0):  # noqa: E501
            raise ValueError("Invalid value for `to_frame_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._to_frame_index = to_frame_index

    @property
    def skip_frames(self):
        """Gets the skip_frames of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501


        :return: The skip_frames of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._skip_frames

    @skip_frames.setter
    def skip_frames(self, skip_frames):
        """Sets the skip_frames of this TimeStepAnimationOutputSettingsAllOf.


        :param skip_frames: The skip_frames of this TimeStepAnimationOutputSettingsAllOf.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and skip_frames is None:  # noqa: E501
            raise ValueError("Invalid value for `skip_frames`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                skip_frames is not None and skip_frames < 0):  # noqa: E501
            raise ValueError("Invalid value for `skip_frames`, must be a value greater than or equal to `0`")  # noqa: E501

        self._skip_frames = skip_frames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeStepAnimationOutputSettingsAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeStepAnimationOutputSettingsAllOf):
            return True

        return self.to_dict() != other.to_dict()
