# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FeatureRefinementHexDominantSnappy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'distance_refinement_lengths': 'list[RefinementLength]',
        'topological_reference': 'TopologicalReference'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'distance_refinement_lengths': 'distanceRefinementLengths',
        'topological_reference': 'topologicalReference'
    }

    def __init__(self, type='FEATURE_HEX_DOMINANT_SNAPPY', name=None, distance_refinement_lengths=None, topological_reference=None, local_vars_configuration=None):  # noqa: E501
        """FeatureRefinementHexDominantSnappy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._distance_refinement_lengths = None
        self._topological_reference = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if distance_refinement_lengths is not None:
            self.distance_refinement_lengths = distance_refinement_lengths
        if topological_reference is not None:
            self.topological_reference = topological_reference

    @property
    def type(self):
        """Gets the type of this FeatureRefinementHexDominantSnappy.  # noqa: E501

        A <a href='https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#feature-refinement' target='_blank'><b>feature refinement</b></a> can be used to refine the geometry’s feature edges. All edges whose adjacent surface normals form an angle of less than 150° will be refined.  Schema name: FeatureRefinementHexDominantSnappy  # noqa: E501

        :return: The type of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FeatureRefinementHexDominantSnappy.

        A <a href='https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#feature-refinement' target='_blank'><b>feature refinement</b></a> can be used to refine the geometry’s feature edges. All edges whose adjacent surface normals form an angle of less than 150° will be refined.  Schema name: FeatureRefinementHexDominantSnappy  # noqa: E501

        :param type: The type of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this FeatureRefinementHexDominantSnappy.  # noqa: E501


        :return: The name of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeatureRefinementHexDominantSnappy.


        :param name: The name of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def distance_refinement_lengths(self):
        """Gets the distance_refinement_lengths of this FeatureRefinementHexDominantSnappy.  # noqa: E501

        Specify the desired <b>target cell edge length</b> based on the <b>distance</b> to the feature edges. The edge and surface mesh will then be refined up until the specified distance in all directions from the edges.  # noqa: E501

        :return: The distance_refinement_lengths of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :rtype: list[RefinementLength]
        """
        return self._distance_refinement_lengths

    @distance_refinement_lengths.setter
    def distance_refinement_lengths(self, distance_refinement_lengths):
        """Sets the distance_refinement_lengths of this FeatureRefinementHexDominantSnappy.

        Specify the desired <b>target cell edge length</b> based on the <b>distance</b> to the feature edges. The edge and surface mesh will then be refined up until the specified distance in all directions from the edges.  # noqa: E501

        :param distance_refinement_lengths: The distance_refinement_lengths of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :type: list[RefinementLength]
        """

        self._distance_refinement_lengths = distance_refinement_lengths

    @property
    def topological_reference(self):
        """Gets the topological_reference of this FeatureRefinementHexDominantSnappy.  # noqa: E501


        :return: The topological_reference of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this FeatureRefinementHexDominantSnappy.


        :param topological_reference: The topological_reference of this FeatureRefinementHexDominantSnappy.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureRefinementHexDominantSnappy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureRefinementHexDominantSnappy):
            return True

        return self.to_dict() != other.to_dict()
