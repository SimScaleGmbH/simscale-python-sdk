# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ConnectionSettingsV36(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nonlinearity_resolution': 'OneOfConnectionSettingsV36NonlinearityResolution',
        'friction': 'OneOfConnectionSettingsV36Friction',
        'contact_non_linearity_resolution': 'OneOfConnectionSettingsV36ContactNonLinearityResolution',
        'convergence_stabilization': 'bool',
        'contact_smoothing': 'bool'
    }

    attribute_map = {
        'nonlinearity_resolution': 'nonlinearityResolution',
        'friction': 'friction',
        'contact_non_linearity_resolution': 'contactNonLinearityResolution',
        'convergence_stabilization': 'convergenceStabilization',
        'contact_smoothing': 'contactSmoothing'
    }

    def __init__(self, nonlinearity_resolution=None, friction=None, contact_non_linearity_resolution=None, convergence_stabilization=None, contact_smoothing=None, local_vars_configuration=None):  # noqa: E501
        """ConnectionSettingsV36 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nonlinearity_resolution = None
        self._friction = None
        self._contact_non_linearity_resolution = None
        self._convergence_stabilization = None
        self._contact_smoothing = None
        self.discriminator = None

        if nonlinearity_resolution is not None:
            self.nonlinearity_resolution = nonlinearity_resolution
        if friction is not None:
            self.friction = friction
        if contact_non_linearity_resolution is not None:
            self.contact_non_linearity_resolution = contact_non_linearity_resolution
        if convergence_stabilization is not None:
            self.convergence_stabilization = convergence_stabilization
        if contact_smoothing is not None:
            self.contact_smoothing = contact_smoothing

    @property
    def nonlinearity_resolution(self):
        """Gets the nonlinearity_resolution of this ConnectionSettingsV36.  # noqa: E501


        :return: The nonlinearity_resolution of this ConnectionSettingsV36.  # noqa: E501
        :rtype: OneOfConnectionSettingsV36NonlinearityResolution
        """
        return self._nonlinearity_resolution

    @nonlinearity_resolution.setter
    def nonlinearity_resolution(self, nonlinearity_resolution):
        """Sets the nonlinearity_resolution of this ConnectionSettingsV36.


        :param nonlinearity_resolution: The nonlinearity_resolution of this ConnectionSettingsV36.  # noqa: E501
        :type: OneOfConnectionSettingsV36NonlinearityResolution
        """

        self._nonlinearity_resolution = nonlinearity_resolution

    @property
    def friction(self):
        """Gets the friction of this ConnectionSettingsV36.  # noqa: E501


        :return: The friction of this ConnectionSettingsV36.  # noqa: E501
        :rtype: OneOfConnectionSettingsV36Friction
        """
        return self._friction

    @friction.setter
    def friction(self, friction):
        """Sets the friction of this ConnectionSettingsV36.


        :param friction: The friction of this ConnectionSettingsV36.  # noqa: E501
        :type: OneOfConnectionSettingsV36Friction
        """

        self._friction = friction

    @property
    def contact_non_linearity_resolution(self):
        """Gets the contact_non_linearity_resolution of this ConnectionSettingsV36.  # noqa: E501


        :return: The contact_non_linearity_resolution of this ConnectionSettingsV36.  # noqa: E501
        :rtype: OneOfConnectionSettingsV36ContactNonLinearityResolution
        """
        return self._contact_non_linearity_resolution

    @contact_non_linearity_resolution.setter
    def contact_non_linearity_resolution(self, contact_non_linearity_resolution):
        """Sets the contact_non_linearity_resolution of this ConnectionSettingsV36.


        :param contact_non_linearity_resolution: The contact_non_linearity_resolution of this ConnectionSettingsV36.  # noqa: E501
        :type: OneOfConnectionSettingsV36ContactNonLinearityResolution
        """

        self._contact_non_linearity_resolution = contact_non_linearity_resolution

    @property
    def convergence_stabilization(self):
        """Gets the convergence_stabilization of this ConnectionSettingsV36.  # noqa: E501


        :return: The convergence_stabilization of this ConnectionSettingsV36.  # noqa: E501
        :rtype: bool
        """
        return self._convergence_stabilization

    @convergence_stabilization.setter
    def convergence_stabilization(self, convergence_stabilization):
        """Sets the convergence_stabilization of this ConnectionSettingsV36.


        :param convergence_stabilization: The convergence_stabilization of this ConnectionSettingsV36.  # noqa: E501
        :type: bool
        """

        self._convergence_stabilization = convergence_stabilization

    @property
    def contact_smoothing(self):
        """Gets the contact_smoothing of this ConnectionSettingsV36.  # noqa: E501


        :return: The contact_smoothing of this ConnectionSettingsV36.  # noqa: E501
        :rtype: bool
        """
        return self._contact_smoothing

    @contact_smoothing.setter
    def contact_smoothing(self, contact_smoothing):
        """Sets the contact_smoothing of this ConnectionSettingsV36.


        :param contact_smoothing: The contact_smoothing of this ConnectionSettingsV36.  # noqa: E501
        :type: bool
        """

        self._contact_smoothing = contact_smoothing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionSettingsV36):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionSettingsV36):
            return True

        return self.to_dict() != other.to_dict()
