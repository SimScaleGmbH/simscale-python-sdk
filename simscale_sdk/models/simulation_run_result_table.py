# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SimulationRunResultTable(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'result_id': 'str',
        'category': 'str',
        'direction': 'float',
        'name': 'str',
        'modified_at': 'datetime',
        'download': 'SimulationRunResultDownload'
    }

    attribute_map = {
        'type': 'type',
        'result_id': 'resultId',
        'category': 'category',
        'direction': 'direction',
        'name': 'name',
        'modified_at': 'modifiedAt',
        'download': 'download'
    }

    def __init__(self, type='TABLE', result_id=None, category=None, direction=None, name=None, modified_at=None, download=None, local_vars_configuration=None):  # noqa: E501
        """SimulationRunResultTable - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._result_id = None
        self._category = None
        self._direction = None
        self._name = None
        self._modified_at = None
        self._download = None
        self.discriminator = None

        self.type = type
        if result_id is not None:
            self.result_id = result_id
        if category is not None:
            self.category = category
        if direction is not None:
            self.direction = direction
        if name is not None:
            self.name = name
        if modified_at is not None:
            self.modified_at = modified_at
        if download is not None:
            self.download = download

    @property
    def type(self):
        """Gets the type of this SimulationRunResultTable.  # noqa: E501


        :return: The type of this SimulationRunResultTable.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimulationRunResultTable.


        :param type: The type of this SimulationRunResultTable.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def result_id(self):
        """Gets the result_id of this SimulationRunResultTable.  # noqa: E501

        The result ID  # noqa: E501

        :return: The result_id of this SimulationRunResultTable.  # noqa: E501
        :rtype: str
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this SimulationRunResultTable.

        The result ID  # noqa: E501

        :param result_id: The result_id of this SimulationRunResultTable.  # noqa: E501
        :type: str
        """

        self._result_id = result_id

    @property
    def category(self):
        """Gets the category of this SimulationRunResultTable.  # noqa: E501

        The result category. For solution fields values include 'SOLUTION', 'AVERAGED_SOLUTION', 'TRANSIENT_SOLUTION', 'STATISTICAL_SURFACE_SOLUTION', etc. For convergence plots values include 'RESIDUALS_PLOT', 'NUMBER_OF_NEWTON_ITERATIONS', etc. For plots values include 'FORCE_PLOT', 'MOMENT_PLOT', 'FORCE_COEFFICIENTS_PLOT', 'PROBE_POINT_PLOT', 'AREA_AVERAGE', 'FACE_CALC', etc.   # noqa: E501

        :return: The category of this SimulationRunResultTable.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SimulationRunResultTable.

        The result category. For solution fields values include 'SOLUTION', 'AVERAGED_SOLUTION', 'TRANSIENT_SOLUTION', 'STATISTICAL_SURFACE_SOLUTION', etc. For convergence plots values include 'RESIDUALS_PLOT', 'NUMBER_OF_NEWTON_ITERATIONS', etc. For plots values include 'FORCE_PLOT', 'MOMENT_PLOT', 'FORCE_COEFFICIENTS_PLOT', 'PROBE_POINT_PLOT', 'AREA_AVERAGE', 'FACE_CALC', etc.   # noqa: E501

        :param category: The category of this SimulationRunResultTable.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def direction(self):
        """Gets the direction of this SimulationRunResultTable.  # noqa: E501

        The result direction, only applies to Pedestrian Wind Comfort analysis  # noqa: E501

        :return: The direction of this SimulationRunResultTable.  # noqa: E501
        :rtype: float
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this SimulationRunResultTable.

        The result direction, only applies to Pedestrian Wind Comfort analysis  # noqa: E501

        :param direction: The direction of this SimulationRunResultTable.  # noqa: E501
        :type: float
        """

        self._direction = direction

    @property
    def name(self):
        """Gets the name of this SimulationRunResultTable.  # noqa: E501

        The name that was defined for extra simulation result outputs  # noqa: E501

        :return: The name of this SimulationRunResultTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimulationRunResultTable.

        The name that was defined for extra simulation result outputs  # noqa: E501

        :param name: The name of this SimulationRunResultTable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def modified_at(self):
        """Gets the modified_at of this SimulationRunResultTable.  # noqa: E501

        The time when the result was last modified.  # noqa: E501

        :return: The modified_at of this SimulationRunResultTable.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this SimulationRunResultTable.

        The time when the result was last modified.  # noqa: E501

        :param modified_at: The modified_at of this SimulationRunResultTable.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def download(self):
        """Gets the download of this SimulationRunResultTable.  # noqa: E501


        :return: The download of this SimulationRunResultTable.  # noqa: E501
        :rtype: SimulationRunResultDownload
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this SimulationRunResultTable.


        :param download: The download of this SimulationRunResultTable.  # noqa: E501
        :type: SimulationRunResultDownload
        """

        self._download = download

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationRunResultTable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimulationRunResultTable):
            return True

        return self.to_dict() != other.to_dict()
