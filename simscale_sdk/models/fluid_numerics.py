# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FluidNumerics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'relaxation_type': 'str',
        'relaxation_factor': 'RelaxationFactor',
        'radiation_resolution': 'str',
        'momentum_predictor': 'bool',
        'transonic': 'bool',
        'num_outer_correctors': 'int',
        'num_correctors': 'int',
        'num_non_orthogonal_correctors': 'int',
        'smoothing_parameter': 'float',
        'damping_coefficient': 'float',
        'num_alpha_spread_iterations': 'int',
        'num_alpha_sweep_iterations': 'int',
        'evaluate_turbulence_only_on_final_iteration': 'bool',
        'pressure_reference_cell': 'int',
        'pressure_reference_value': 'DimensionalPressure',
        'velocity_limit': 'DimensionalSpeed',
        'residual_controls': 'ResidualControls',
        'solvers': 'FluidSolvers',
        'schemes': 'Schemes',
        'stabilization': 'Stabilization'
    }

    attribute_map = {
        'relaxation_type': 'relaxationType',
        'relaxation_factor': 'relaxationFactor',
        'radiation_resolution': 'radiationResolution',
        'momentum_predictor': 'momentumPredictor',
        'transonic': 'transonic',
        'num_outer_correctors': 'numOuterCorrectors',
        'num_correctors': 'numCorrectors',
        'num_non_orthogonal_correctors': 'numNonOrthogonalCorrectors',
        'smoothing_parameter': 'smoothingParameter',
        'damping_coefficient': 'dampingCoefficient',
        'num_alpha_spread_iterations': 'numAlphaSpreadIterations',
        'num_alpha_sweep_iterations': 'numAlphaSweepIterations',
        'evaluate_turbulence_only_on_final_iteration': 'evaluateTurbulenceOnlyOnFinalIteration',
        'pressure_reference_cell': 'pressureReferenceCell',
        'pressure_reference_value': 'pressureReferenceValue',
        'velocity_limit': 'velocityLimit',
        'residual_controls': 'residualControls',
        'solvers': 'solvers',
        'schemes': 'schemes',
        'stabilization': 'stabilization'
    }

    def __init__(self, relaxation_type=None, relaxation_factor=None, radiation_resolution=None, momentum_predictor=None, transonic=None, num_outer_correctors=None, num_correctors=None, num_non_orthogonal_correctors=None, smoothing_parameter=None, damping_coefficient=None, num_alpha_spread_iterations=None, num_alpha_sweep_iterations=None, evaluate_turbulence_only_on_final_iteration=None, pressure_reference_cell=None, pressure_reference_value=None, velocity_limit=None, residual_controls=None, solvers=None, schemes=None, stabilization=None, local_vars_configuration=None):  # noqa: E501
        """FluidNumerics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._relaxation_type = None
        self._relaxation_factor = None
        self._radiation_resolution = None
        self._momentum_predictor = None
        self._transonic = None
        self._num_outer_correctors = None
        self._num_correctors = None
        self._num_non_orthogonal_correctors = None
        self._smoothing_parameter = None
        self._damping_coefficient = None
        self._num_alpha_spread_iterations = None
        self._num_alpha_sweep_iterations = None
        self._evaluate_turbulence_only_on_final_iteration = None
        self._pressure_reference_cell = None
        self._pressure_reference_value = None
        self._velocity_limit = None
        self._residual_controls = None
        self._solvers = None
        self._schemes = None
        self._stabilization = None
        self.discriminator = None

        if relaxation_type is not None:
            self.relaxation_type = relaxation_type
        if relaxation_factor is not None:
            self.relaxation_factor = relaxation_factor
        if radiation_resolution is not None:
            self.radiation_resolution = radiation_resolution
        if momentum_predictor is not None:
            self.momentum_predictor = momentum_predictor
        if transonic is not None:
            self.transonic = transonic
        if num_outer_correctors is not None:
            self.num_outer_correctors = num_outer_correctors
        if num_correctors is not None:
            self.num_correctors = num_correctors
        if num_non_orthogonal_correctors is not None:
            self.num_non_orthogonal_correctors = num_non_orthogonal_correctors
        if smoothing_parameter is not None:
            self.smoothing_parameter = smoothing_parameter
        if damping_coefficient is not None:
            self.damping_coefficient = damping_coefficient
        if num_alpha_spread_iterations is not None:
            self.num_alpha_spread_iterations = num_alpha_spread_iterations
        if num_alpha_sweep_iterations is not None:
            self.num_alpha_sweep_iterations = num_alpha_sweep_iterations
        if evaluate_turbulence_only_on_final_iteration is not None:
            self.evaluate_turbulence_only_on_final_iteration = evaluate_turbulence_only_on_final_iteration
        if pressure_reference_cell is not None:
            self.pressure_reference_cell = pressure_reference_cell
        if pressure_reference_value is not None:
            self.pressure_reference_value = pressure_reference_value
        if velocity_limit is not None:
            self.velocity_limit = velocity_limit
        if residual_controls is not None:
            self.residual_controls = residual_controls
        if solvers is not None:
            self.solvers = solvers
        if schemes is not None:
            self.schemes = schemes
        if stabilization is not None:
            self.stabilization = stabilization

    @property
    def relaxation_type(self):
        """Gets the relaxation_type of this FluidNumerics.  # noqa: E501


        :return: The relaxation_type of this FluidNumerics.  # noqa: E501
        :rtype: str
        """
        return self._relaxation_type

    @relaxation_type.setter
    def relaxation_type(self, relaxation_type):
        """Sets the relaxation_type of this FluidNumerics.


        :param relaxation_type: The relaxation_type of this FluidNumerics.  # noqa: E501
        :type: str
        """

        self._relaxation_type = relaxation_type

    @property
    def relaxation_factor(self):
        """Gets the relaxation_factor of this FluidNumerics.  # noqa: E501


        :return: The relaxation_factor of this FluidNumerics.  # noqa: E501
        :rtype: RelaxationFactor
        """
        return self._relaxation_factor

    @relaxation_factor.setter
    def relaxation_factor(self, relaxation_factor):
        """Sets the relaxation_factor of this FluidNumerics.


        :param relaxation_factor: The relaxation_factor of this FluidNumerics.  # noqa: E501
        :type: RelaxationFactor
        """

        self._relaxation_factor = relaxation_factor

    @property
    def radiation_resolution(self):
        """Gets the radiation_resolution of this FluidNumerics.  # noqa: E501


        :return: The radiation_resolution of this FluidNumerics.  # noqa: E501
        :rtype: str
        """
        return self._radiation_resolution

    @radiation_resolution.setter
    def radiation_resolution(self, radiation_resolution):
        """Sets the radiation_resolution of this FluidNumerics.


        :param radiation_resolution: The radiation_resolution of this FluidNumerics.  # noqa: E501
        :type: str
        """
        allowed_values = ["COARSE", "MODERATE", "FINE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and radiation_resolution not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `radiation_resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(radiation_resolution, allowed_values)
            )

        self._radiation_resolution = radiation_resolution

    @property
    def momentum_predictor(self):
        """Gets the momentum_predictor of this FluidNumerics.  # noqa: E501


        :return: The momentum_predictor of this FluidNumerics.  # noqa: E501
        :rtype: bool
        """
        return self._momentum_predictor

    @momentum_predictor.setter
    def momentum_predictor(self, momentum_predictor):
        """Sets the momentum_predictor of this FluidNumerics.


        :param momentum_predictor: The momentum_predictor of this FluidNumerics.  # noqa: E501
        :type: bool
        """

        self._momentum_predictor = momentum_predictor

    @property
    def transonic(self):
        """Gets the transonic of this FluidNumerics.  # noqa: E501


        :return: The transonic of this FluidNumerics.  # noqa: E501
        :rtype: bool
        """
        return self._transonic

    @transonic.setter
    def transonic(self, transonic):
        """Sets the transonic of this FluidNumerics.


        :param transonic: The transonic of this FluidNumerics.  # noqa: E501
        :type: bool
        """

        self._transonic = transonic

    @property
    def num_outer_correctors(self):
        """Gets the num_outer_correctors of this FluidNumerics.  # noqa: E501


        :return: The num_outer_correctors of this FluidNumerics.  # noqa: E501
        :rtype: int
        """
        return self._num_outer_correctors

    @num_outer_correctors.setter
    def num_outer_correctors(self, num_outer_correctors):
        """Sets the num_outer_correctors of this FluidNumerics.


        :param num_outer_correctors: The num_outer_correctors of this FluidNumerics.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_outer_correctors is not None and num_outer_correctors < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_outer_correctors`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_outer_correctors = num_outer_correctors

    @property
    def num_correctors(self):
        """Gets the num_correctors of this FluidNumerics.  # noqa: E501


        :return: The num_correctors of this FluidNumerics.  # noqa: E501
        :rtype: int
        """
        return self._num_correctors

    @num_correctors.setter
    def num_correctors(self, num_correctors):
        """Sets the num_correctors of this FluidNumerics.


        :param num_correctors: The num_correctors of this FluidNumerics.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_correctors is not None and num_correctors < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_correctors`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_correctors = num_correctors

    @property
    def num_non_orthogonal_correctors(self):
        """Gets the num_non_orthogonal_correctors of this FluidNumerics.  # noqa: E501

        <p>The pressure equation is repeatedly solved based on the value of non-orthogonal correctors in the PISO/SIMPLE/PIMPLE algorithm. This may reduce the effect of bad mesh.</p>  # noqa: E501

        :return: The num_non_orthogonal_correctors of this FluidNumerics.  # noqa: E501
        :rtype: int
        """
        return self._num_non_orthogonal_correctors

    @num_non_orthogonal_correctors.setter
    def num_non_orthogonal_correctors(self, num_non_orthogonal_correctors):
        """Sets the num_non_orthogonal_correctors of this FluidNumerics.

        <p>The pressure equation is repeatedly solved based on the value of non-orthogonal correctors in the PISO/SIMPLE/PIMPLE algorithm. This may reduce the effect of bad mesh.</p>  # noqa: E501

        :param num_non_orthogonal_correctors: The num_non_orthogonal_correctors of this FluidNumerics.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_non_orthogonal_correctors is not None and num_non_orthogonal_correctors < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_non_orthogonal_correctors`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_non_orthogonal_correctors = num_non_orthogonal_correctors

    @property
    def smoothing_parameter(self):
        """Gets the smoothing_parameter of this FluidNumerics.  # noqa: E501


        :return: The smoothing_parameter of this FluidNumerics.  # noqa: E501
        :rtype: float
        """
        return self._smoothing_parameter

    @smoothing_parameter.setter
    def smoothing_parameter(self, smoothing_parameter):
        """Sets the smoothing_parameter of this FluidNumerics.


        :param smoothing_parameter: The smoothing_parameter of this FluidNumerics.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                smoothing_parameter is not None and smoothing_parameter > 10000000):  # noqa: E501
            raise ValueError("Invalid value for `smoothing_parameter`, must be a value less than or equal to `10000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                smoothing_parameter is not None and smoothing_parameter < 0):  # noqa: E501
            raise ValueError("Invalid value for `smoothing_parameter`, must be a value greater than or equal to `0`")  # noqa: E501

        self._smoothing_parameter = smoothing_parameter

    @property
    def damping_coefficient(self):
        """Gets the damping_coefficient of this FluidNumerics.  # noqa: E501


        :return: The damping_coefficient of this FluidNumerics.  # noqa: E501
        :rtype: float
        """
        return self._damping_coefficient

    @damping_coefficient.setter
    def damping_coefficient(self, damping_coefficient):
        """Sets the damping_coefficient of this FluidNumerics.


        :param damping_coefficient: The damping_coefficient of this FluidNumerics.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                damping_coefficient is not None and damping_coefficient > 10000000):  # noqa: E501
            raise ValueError("Invalid value for `damping_coefficient`, must be a value less than or equal to `10000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                damping_coefficient is not None and damping_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `damping_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._damping_coefficient = damping_coefficient

    @property
    def num_alpha_spread_iterations(self):
        """Gets the num_alpha_spread_iterations of this FluidNumerics.  # noqa: E501


        :return: The num_alpha_spread_iterations of this FluidNumerics.  # noqa: E501
        :rtype: int
        """
        return self._num_alpha_spread_iterations

    @num_alpha_spread_iterations.setter
    def num_alpha_spread_iterations(self, num_alpha_spread_iterations):
        """Sets the num_alpha_spread_iterations of this FluidNumerics.


        :param num_alpha_spread_iterations: The num_alpha_spread_iterations of this FluidNumerics.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_alpha_spread_iterations is not None and num_alpha_spread_iterations > 10000000):  # noqa: E501
            raise ValueError("Invalid value for `num_alpha_spread_iterations`, must be a value less than or equal to `10000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_alpha_spread_iterations is not None and num_alpha_spread_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_alpha_spread_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_alpha_spread_iterations = num_alpha_spread_iterations

    @property
    def num_alpha_sweep_iterations(self):
        """Gets the num_alpha_sweep_iterations of this FluidNumerics.  # noqa: E501


        :return: The num_alpha_sweep_iterations of this FluidNumerics.  # noqa: E501
        :rtype: int
        """
        return self._num_alpha_sweep_iterations

    @num_alpha_sweep_iterations.setter
    def num_alpha_sweep_iterations(self, num_alpha_sweep_iterations):
        """Sets the num_alpha_sweep_iterations of this FluidNumerics.


        :param num_alpha_sweep_iterations: The num_alpha_sweep_iterations of this FluidNumerics.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_alpha_sweep_iterations is not None and num_alpha_sweep_iterations > 10000000):  # noqa: E501
            raise ValueError("Invalid value for `num_alpha_sweep_iterations`, must be a value less than or equal to `10000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_alpha_sweep_iterations is not None and num_alpha_sweep_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_alpha_sweep_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_alpha_sweep_iterations = num_alpha_sweep_iterations

    @property
    def evaluate_turbulence_only_on_final_iteration(self):
        """Gets the evaluate_turbulence_only_on_final_iteration of this FluidNumerics.  # noqa: E501


        :return: The evaluate_turbulence_only_on_final_iteration of this FluidNumerics.  # noqa: E501
        :rtype: bool
        """
        return self._evaluate_turbulence_only_on_final_iteration

    @evaluate_turbulence_only_on_final_iteration.setter
    def evaluate_turbulence_only_on_final_iteration(self, evaluate_turbulence_only_on_final_iteration):
        """Sets the evaluate_turbulence_only_on_final_iteration of this FluidNumerics.


        :param evaluate_turbulence_only_on_final_iteration: The evaluate_turbulence_only_on_final_iteration of this FluidNumerics.  # noqa: E501
        :type: bool
        """

        self._evaluate_turbulence_only_on_final_iteration = evaluate_turbulence_only_on_final_iteration

    @property
    def pressure_reference_cell(self):
        """Gets the pressure_reference_cell of this FluidNumerics.  # noqa: E501

        <p>Enter the cell where you want to define reference pressure in the PISO/SIMPLE/PIMPLE algorithm.</p>  # noqa: E501

        :return: The pressure_reference_cell of this FluidNumerics.  # noqa: E501
        :rtype: int
        """
        return self._pressure_reference_cell

    @pressure_reference_cell.setter
    def pressure_reference_cell(self, pressure_reference_cell):
        """Sets the pressure_reference_cell of this FluidNumerics.

        <p>Enter the cell where you want to define reference pressure in the PISO/SIMPLE/PIMPLE algorithm.</p>  # noqa: E501

        :param pressure_reference_cell: The pressure_reference_cell of this FluidNumerics.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                pressure_reference_cell is not None and pressure_reference_cell < 0):  # noqa: E501
            raise ValueError("Invalid value for `pressure_reference_cell`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pressure_reference_cell = pressure_reference_cell

    @property
    def pressure_reference_value(self):
        """Gets the pressure_reference_value of this FluidNumerics.  # noqa: E501


        :return: The pressure_reference_value of this FluidNumerics.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._pressure_reference_value

    @pressure_reference_value.setter
    def pressure_reference_value(self, pressure_reference_value):
        """Sets the pressure_reference_value of this FluidNumerics.


        :param pressure_reference_value: The pressure_reference_value of this FluidNumerics.  # noqa: E501
        :type: DimensionalPressure
        """

        self._pressure_reference_value = pressure_reference_value

    @property
    def velocity_limit(self):
        """Gets the velocity_limit of this FluidNumerics.  # noqa: E501


        :return: The velocity_limit of this FluidNumerics.  # noqa: E501
        :rtype: DimensionalSpeed
        """
        return self._velocity_limit

    @velocity_limit.setter
    def velocity_limit(self, velocity_limit):
        """Sets the velocity_limit of this FluidNumerics.


        :param velocity_limit: The velocity_limit of this FluidNumerics.  # noqa: E501
        :type: DimensionalSpeed
        """

        self._velocity_limit = velocity_limit

    @property
    def residual_controls(self):
        """Gets the residual_controls of this FluidNumerics.  # noqa: E501


        :return: The residual_controls of this FluidNumerics.  # noqa: E501
        :rtype: ResidualControls
        """
        return self._residual_controls

    @residual_controls.setter
    def residual_controls(self, residual_controls):
        """Sets the residual_controls of this FluidNumerics.


        :param residual_controls: The residual_controls of this FluidNumerics.  # noqa: E501
        :type: ResidualControls
        """

        self._residual_controls = residual_controls

    @property
    def solvers(self):
        """Gets the solvers of this FluidNumerics.  # noqa: E501


        :return: The solvers of this FluidNumerics.  # noqa: E501
        :rtype: FluidSolvers
        """
        return self._solvers

    @solvers.setter
    def solvers(self, solvers):
        """Sets the solvers of this FluidNumerics.


        :param solvers: The solvers of this FluidNumerics.  # noqa: E501
        :type: FluidSolvers
        """

        self._solvers = solvers

    @property
    def schemes(self):
        """Gets the schemes of this FluidNumerics.  # noqa: E501


        :return: The schemes of this FluidNumerics.  # noqa: E501
        :rtype: Schemes
        """
        return self._schemes

    @schemes.setter
    def schemes(self, schemes):
        """Sets the schemes of this FluidNumerics.


        :param schemes: The schemes of this FluidNumerics.  # noqa: E501
        :type: Schemes
        """

        self._schemes = schemes

    @property
    def stabilization(self):
        """Gets the stabilization of this FluidNumerics.  # noqa: E501


        :return: The stabilization of this FluidNumerics.  # noqa: E501
        :rtype: Stabilization
        """
        return self._stabilization

    @stabilization.setter
    def stabilization(self, stabilization):
        """Sets the stabilization of this FluidNumerics.


        :param stabilization: The stabilization of this FluidNumerics.  # noqa: E501
        :type: Stabilization
        """

        self._stabilization = stabilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidNumerics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FluidNumerics):
            return True

        return self.to_dict() != other.to_dict()
