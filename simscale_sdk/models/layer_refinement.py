# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class LayerRefinement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'total_thickness': 'float',
        'layers': 'int',
        'stretch_factor': 'float',
        'allow_quadrangles': 'bool',
        'topological_reference': 'TopologicalReference'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'total_thickness': 'totalThickness',
        'layers': 'layers',
        'stretch_factor': 'stretchFactor',
        'allow_quadrangles': 'allowQuadrangles',
        'topological_reference': 'topologicalReference'
    }

    def __init__(self, type='LAYER_INFLATION', name=None, total_thickness=None, layers=None, stretch_factor=None, allow_quadrangles=None, topological_reference=None, local_vars_configuration=None):  # noqa: E501
        """LayerRefinement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._total_thickness = None
        self._layers = None
        self._stretch_factor = None
        self._allow_quadrangles = None
        self._topological_reference = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if total_thickness is not None:
            self.total_thickness = total_thickness
        if layers is not None:
            self.layers = layers
        if stretch_factor is not None:
            self.stretch_factor = stretch_factor
        if allow_quadrangles is not None:
            self.allow_quadrangles = allow_quadrangles
        if topological_reference is not None:
            self.topological_reference = topological_reference

    @property
    def type(self):
        """Gets the type of this LayerRefinement.  # noqa: E501

        <p><a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#layer-inflation' target='_blank'><b>Layer inflation</b></a> allows the creation of prismatic boundary layers for certain mesh regions.</p><p>Prismatic layers are mostly used in CFD simulations on no-slip walls in order to efficiently capture the boundary layer velocity profile, but they may be also used in certain structural simulations like stamping or deep-drawing processes.</p><p><img src=\"/spec/resources/help/imgs/boundary-layer.png\" class=\"helpPopupImage\"/> The figure shows a sample mesh with boundary layers added.</p>  Schema name: LayerRefinement  # noqa: E501

        :return: The type of this LayerRefinement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LayerRefinement.

        <p><a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#layer-inflation' target='_blank'><b>Layer inflation</b></a> allows the creation of prismatic boundary layers for certain mesh regions.</p><p>Prismatic layers are mostly used in CFD simulations on no-slip walls in order to efficiently capture the boundary layer velocity profile, but they may be also used in certain structural simulations like stamping or deep-drawing processes.</p><p><img src=\"/spec/resources/help/imgs/boundary-layer.png\" class=\"helpPopupImage\"/> The figure shows a sample mesh with boundary layers added.</p>  Schema name: LayerRefinement  # noqa: E501

        :param type: The type of this LayerRefinement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this LayerRefinement.  # noqa: E501


        :return: The name of this LayerRefinement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LayerRefinement.


        :param name: The name of this LayerRefinement.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def total_thickness(self):
        """Gets the total_thickness of this LayerRefinement.  # noqa: E501

        This parameter controls the <b>overall thickness</b> of all the generated boundary layers together. This value must be smaller than the minimal geometry thickness at the specified locations, otherwise the meshing will fail.  # noqa: E501

        :return: The total_thickness of this LayerRefinement.  # noqa: E501
        :rtype: float
        """
        return self._total_thickness

    @total_thickness.setter
    def total_thickness(self, total_thickness):
        """Sets the total_thickness of this LayerRefinement.

        This parameter controls the <b>overall thickness</b> of all the generated boundary layers together. This value must be smaller than the minimal geometry thickness at the specified locations, otherwise the meshing will fail.  # noqa: E501

        :param total_thickness: The total_thickness of this LayerRefinement.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                total_thickness is not None and total_thickness > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `total_thickness`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                total_thickness is not None and total_thickness < 0):  # noqa: E501
            raise ValueError("Invalid value for `total_thickness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_thickness = total_thickness

    @property
    def layers(self):
        """Gets the layers of this LayerRefinement.  # noqa: E501

        The number of <b>layers</b> defines how many prismatic boundary layers should be created.  # noqa: E501

        :return: The layers of this LayerRefinement.  # noqa: E501
        :rtype: int
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this LayerRefinement.

        The number of <b>layers</b> defines how many prismatic boundary layers should be created.  # noqa: E501

        :param layers: The layers of this LayerRefinement.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                layers is not None and layers > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `layers`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                layers is not None and layers < 0):  # noqa: E501
            raise ValueError("Invalid value for `layers`, must be a value greater than or equal to `0`")  # noqa: E501

        self._layers = layers

    @property
    def stretch_factor(self):
        """Gets the stretch_factor of this LayerRefinement.  # noqa: E501

        <p>The <b>stretch factor</b> determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each element layer will be in comparison to the neighbouring layer closer to the wall.</p><p><img src=\"/spec/resources/help/imgs/shm_bl_expansion-ratio.png\" class=\"helpPopupImage\"/> The figure shows a ratio of 1.3.</p>  # noqa: E501

        :return: The stretch_factor of this LayerRefinement.  # noqa: E501
        :rtype: float
        """
        return self._stretch_factor

    @stretch_factor.setter
    def stretch_factor(self, stretch_factor):
        """Sets the stretch_factor of this LayerRefinement.

        <p>The <b>stretch factor</b> determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each element layer will be in comparison to the neighbouring layer closer to the wall.</p><p><img src=\"/spec/resources/help/imgs/shm_bl_expansion-ratio.png\" class=\"helpPopupImage\"/> The figure shows a ratio of 1.3.</p>  # noqa: E501

        :param stretch_factor: The stretch_factor of this LayerRefinement.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                stretch_factor is not None and stretch_factor > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `stretch_factor`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                stretch_factor is not None and stretch_factor < 0):  # noqa: E501
            raise ValueError("Invalid value for `stretch_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._stretch_factor = stretch_factor

    @property
    def allow_quadrangles(self):
        """Gets the allow_quadrangles of this LayerRefinement.  # noqa: E501

        <p>This parameter determines if <a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles' target='_blank'><b>quadrangular surface elements</b></a> shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.</p><p><img src=\"/spec/resources/help/imgs/allow_quads_comparison.png\" class=\"helpPopupImage\"/> The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).</p>  # noqa: E501

        :return: The allow_quadrangles of this LayerRefinement.  # noqa: E501
        :rtype: bool
        """
        return self._allow_quadrangles

    @allow_quadrangles.setter
    def allow_quadrangles(self, allow_quadrangles):
        """Sets the allow_quadrangles of this LayerRefinement.

        <p>This parameter determines if <a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#quadrangles' target='_blank'><b>quadrangular surface elements</b></a> shall be allowed. When disabled, only triangles will be used. Meshing with triangles only is usually more robust while quadrangular elements may lead to better results.</p><p><img src=\"/spec/resources/help/imgs/allow_quads_comparison.png\" class=\"helpPopupImage\"/> The figure shows sample meshes with quadrangular surface elements disallowed (left) and allowed (right).</p>  # noqa: E501

        :param allow_quadrangles: The allow_quadrangles of this LayerRefinement.  # noqa: E501
        :type: bool
        """

        self._allow_quadrangles = allow_quadrangles

    @property
    def topological_reference(self):
        """Gets the topological_reference of this LayerRefinement.  # noqa: E501


        :return: The topological_reference of this LayerRefinement.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this LayerRefinement.


        :param topological_reference: The topological_reference of this LayerRefinement.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerRefinement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LayerRefinement):
            return True

        return self.to_dict() != other.to_dict()
