# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class TrueSemiImplicit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'limiter_iterations': 'int',
        'compression_correction': 'bool',
        'solver': 'OneOfTrueSemiImplicitSolver'
    }

    attribute_map = {
        'type': 'type',
        'limiter_iterations': 'limiterIterations',
        'compression_correction': 'compressionCorrection',
        'solver': 'solver'
    }

    def __init__(self, type='TRUE_SEMI_IMPLICIT', limiter_iterations=None, compression_correction=None, solver=None, local_vars_configuration=None):  # noqa: E501
        """TrueSemiImplicit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._limiter_iterations = None
        self._compression_correction = None
        self._solver = None
        self.discriminator = None

        self.type = type
        if limiter_iterations is not None:
            self.limiter_iterations = limiter_iterations
        if compression_correction is not None:
            self.compression_correction = compression_correction
        if solver is not None:
            self.solver = solver

    @property
    def type(self):
        """Gets the type of this TrueSemiImplicit.  # noqa: E501

        Schema name: TrueSemiImplicit  # noqa: E501

        :return: The type of this TrueSemiImplicit.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrueSemiImplicit.

        Schema name: TrueSemiImplicit  # noqa: E501

        :param type: The type of this TrueSemiImplicit.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def limiter_iterations(self):
        """Gets the limiter_iterations of this TrueSemiImplicit.  # noqa: E501


        :return: The limiter_iterations of this TrueSemiImplicit.  # noqa: E501
        :rtype: int
        """
        return self._limiter_iterations

    @limiter_iterations.setter
    def limiter_iterations(self, limiter_iterations):
        """Sets the limiter_iterations of this TrueSemiImplicit.


        :param limiter_iterations: The limiter_iterations of this TrueSemiImplicit.  # noqa: E501
        :type: int
        """

        self._limiter_iterations = limiter_iterations

    @property
    def compression_correction(self):
        """Gets the compression_correction of this TrueSemiImplicit.  # noqa: E501


        :return: The compression_correction of this TrueSemiImplicit.  # noqa: E501
        :rtype: bool
        """
        return self._compression_correction

    @compression_correction.setter
    def compression_correction(self, compression_correction):
        """Sets the compression_correction of this TrueSemiImplicit.


        :param compression_correction: The compression_correction of this TrueSemiImplicit.  # noqa: E501
        :type: bool
        """

        self._compression_correction = compression_correction

    @property
    def solver(self):
        """Gets the solver of this TrueSemiImplicit.  # noqa: E501


        :return: The solver of this TrueSemiImplicit.  # noqa: E501
        :rtype: OneOfTrueSemiImplicitSolver
        """
        return self._solver

    @solver.setter
    def solver(self, solver):
        """Sets the solver of this TrueSemiImplicit.


        :param solver: The solver of this TrueSemiImplicit.  # noqa: E501
        :type: OneOfTrueSemiImplicitSolver
        """

        self._solver = solver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrueSemiImplicit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrueSemiImplicit):
            return True

        return self.to_dict() != other.to_dict()
