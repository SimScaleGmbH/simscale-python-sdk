# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class StressTensorPressure(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sigma_xx': 'OneOfStressTensorPressureSigmaXX',
        'sigma_yy': 'OneOfStressTensorPressureSigmaYY',
        'sigma_zz': 'OneOfStressTensorPressureSigmaZZ',
        'sigma_yz': 'OneOfStressTensorPressureSigmaYZ',
        'sigma_xz': 'OneOfStressTensorPressureSigmaXZ',
        'sigma_xy': 'OneOfStressTensorPressureSigmaXY',
        'unit': 'str'
    }

    attribute_map = {
        'sigma_xx': 'sigmaXX',
        'sigma_yy': 'sigmaYY',
        'sigma_zz': 'sigmaZZ',
        'sigma_yz': 'sigmaYZ',
        'sigma_xz': 'sigmaXZ',
        'sigma_xy': 'sigmaXY',
        'unit': 'unit'
    }

    def __init__(self, sigma_xx=None, sigma_yy=None, sigma_zz=None, sigma_yz=None, sigma_xz=None, sigma_xy=None, unit=None, local_vars_configuration=None):  # noqa: E501
        """StressTensorPressure - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sigma_xx = None
        self._sigma_yy = None
        self._sigma_zz = None
        self._sigma_yz = None
        self._sigma_xz = None
        self._sigma_xy = None
        self._unit = None
        self.discriminator = None

        if sigma_xx is not None:
            self.sigma_xx = sigma_xx
        if sigma_yy is not None:
            self.sigma_yy = sigma_yy
        if sigma_zz is not None:
            self.sigma_zz = sigma_zz
        if sigma_yz is not None:
            self.sigma_yz = sigma_yz
        if sigma_xz is not None:
            self.sigma_xz = sigma_xz
        if sigma_xy is not None:
            self.sigma_xy = sigma_xy
        self.unit = unit

    @property
    def sigma_xx(self):
        """Gets the sigma_xx of this StressTensorPressure.  # noqa: E501


        :return: The sigma_xx of this StressTensorPressure.  # noqa: E501
        :rtype: OneOfStressTensorPressureSigmaXX
        """
        return self._sigma_xx

    @sigma_xx.setter
    def sigma_xx(self, sigma_xx):
        """Sets the sigma_xx of this StressTensorPressure.


        :param sigma_xx: The sigma_xx of this StressTensorPressure.  # noqa: E501
        :type: OneOfStressTensorPressureSigmaXX
        """

        self._sigma_xx = sigma_xx

    @property
    def sigma_yy(self):
        """Gets the sigma_yy of this StressTensorPressure.  # noqa: E501


        :return: The sigma_yy of this StressTensorPressure.  # noqa: E501
        :rtype: OneOfStressTensorPressureSigmaYY
        """
        return self._sigma_yy

    @sigma_yy.setter
    def sigma_yy(self, sigma_yy):
        """Sets the sigma_yy of this StressTensorPressure.


        :param sigma_yy: The sigma_yy of this StressTensorPressure.  # noqa: E501
        :type: OneOfStressTensorPressureSigmaYY
        """

        self._sigma_yy = sigma_yy

    @property
    def sigma_zz(self):
        """Gets the sigma_zz of this StressTensorPressure.  # noqa: E501


        :return: The sigma_zz of this StressTensorPressure.  # noqa: E501
        :rtype: OneOfStressTensorPressureSigmaZZ
        """
        return self._sigma_zz

    @sigma_zz.setter
    def sigma_zz(self, sigma_zz):
        """Sets the sigma_zz of this StressTensorPressure.


        :param sigma_zz: The sigma_zz of this StressTensorPressure.  # noqa: E501
        :type: OneOfStressTensorPressureSigmaZZ
        """

        self._sigma_zz = sigma_zz

    @property
    def sigma_yz(self):
        """Gets the sigma_yz of this StressTensorPressure.  # noqa: E501


        :return: The sigma_yz of this StressTensorPressure.  # noqa: E501
        :rtype: OneOfStressTensorPressureSigmaYZ
        """
        return self._sigma_yz

    @sigma_yz.setter
    def sigma_yz(self, sigma_yz):
        """Sets the sigma_yz of this StressTensorPressure.


        :param sigma_yz: The sigma_yz of this StressTensorPressure.  # noqa: E501
        :type: OneOfStressTensorPressureSigmaYZ
        """

        self._sigma_yz = sigma_yz

    @property
    def sigma_xz(self):
        """Gets the sigma_xz of this StressTensorPressure.  # noqa: E501


        :return: The sigma_xz of this StressTensorPressure.  # noqa: E501
        :rtype: OneOfStressTensorPressureSigmaXZ
        """
        return self._sigma_xz

    @sigma_xz.setter
    def sigma_xz(self, sigma_xz):
        """Sets the sigma_xz of this StressTensorPressure.


        :param sigma_xz: The sigma_xz of this StressTensorPressure.  # noqa: E501
        :type: OneOfStressTensorPressureSigmaXZ
        """

        self._sigma_xz = sigma_xz

    @property
    def sigma_xy(self):
        """Gets the sigma_xy of this StressTensorPressure.  # noqa: E501


        :return: The sigma_xy of this StressTensorPressure.  # noqa: E501
        :rtype: OneOfStressTensorPressureSigmaXY
        """
        return self._sigma_xy

    @sigma_xy.setter
    def sigma_xy(self, sigma_xy):
        """Sets the sigma_xy of this StressTensorPressure.


        :param sigma_xy: The sigma_xy of this StressTensorPressure.  # noqa: E501
        :type: OneOfStressTensorPressureSigmaXY
        """

        self._sigma_xy = sigma_xy

    @property
    def unit(self):
        """Gets the unit of this StressTensorPressure.  # noqa: E501


        :return: The unit of this StressTensorPressure.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this StressTensorPressure.


        :param unit: The unit of this StressTensorPressure.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and unit is None:  # noqa: E501
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501
        allowed_values = ["Pa", "lbf/in²", "hPa", "kPa", "MPa", "atm", "mbar", "bar", "mH2O", "mmH2O", "mmHg", "dyne/cm²", "inH2O", "ftH2O", "inHg", "psf"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and unit not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StressTensorPressure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StressTensorPressure):
            return True

        return self.to_dict() != other.to_dict()
