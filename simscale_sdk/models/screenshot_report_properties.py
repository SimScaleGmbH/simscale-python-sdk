# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ScreenshotReportProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'report_type': 'str',
        'model_settings': 'ModelSettings',
        'filters': 'Filters',
        'camera_settings': 'OneOfCameraSettings',
        'output_settings': 'ScreenshotOutputSettings'
    }

    attribute_map = {
        'report_type': 'reportType',
        'model_settings': 'modelSettings',
        'filters': 'filters',
        'camera_settings': 'cameraSettings',
        'output_settings': 'outputSettings'
    }

    def __init__(self, report_type='SCREENSHOT', model_settings=None, filters=None, camera_settings=None, output_settings=None, local_vars_configuration=None):  # noqa: E501
        """ScreenshotReportProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._report_type = None
        self._model_settings = None
        self._filters = None
        self._camera_settings = None
        self._output_settings = None
        self.discriminator = None

        self.report_type = report_type
        self.model_settings = model_settings
        if filters is not None:
            self.filters = filters
        self.camera_settings = camera_settings
        self.output_settings = output_settings

    @property
    def report_type(self):
        """Gets the report_type of this ScreenshotReportProperties.  # noqa: E501


        :return: The report_type of this ScreenshotReportProperties.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ScreenshotReportProperties.


        :param report_type: The report_type of this ScreenshotReportProperties.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and report_type is None:  # noqa: E501
            raise ValueError("Invalid value for `report_type`, must not be `None`")  # noqa: E501

        self._report_type = report_type

    @property
    def model_settings(self):
        """Gets the model_settings of this ScreenshotReportProperties.  # noqa: E501


        :return: The model_settings of this ScreenshotReportProperties.  # noqa: E501
        :rtype: ModelSettings
        """
        return self._model_settings

    @model_settings.setter
    def model_settings(self, model_settings):
        """Sets the model_settings of this ScreenshotReportProperties.


        :param model_settings: The model_settings of this ScreenshotReportProperties.  # noqa: E501
        :type: ModelSettings
        """
        if self.local_vars_configuration.client_side_validation and model_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `model_settings`, must not be `None`")  # noqa: E501

        self._model_settings = model_settings

    @property
    def filters(self):
        """Gets the filters of this ScreenshotReportProperties.  # noqa: E501


        :return: The filters of this ScreenshotReportProperties.  # noqa: E501
        :rtype: Filters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ScreenshotReportProperties.


        :param filters: The filters of this ScreenshotReportProperties.  # noqa: E501
        :type: Filters
        """

        self._filters = filters

    @property
    def camera_settings(self):
        """Gets the camera_settings of this ScreenshotReportProperties.  # noqa: E501


        :return: The camera_settings of this ScreenshotReportProperties.  # noqa: E501
        :rtype: OneOfCameraSettings
        """
        return self._camera_settings

    @camera_settings.setter
    def camera_settings(self, camera_settings):
        """Sets the camera_settings of this ScreenshotReportProperties.


        :param camera_settings: The camera_settings of this ScreenshotReportProperties.  # noqa: E501
        :type: OneOfCameraSettings
        """
        if self.local_vars_configuration.client_side_validation and camera_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `camera_settings`, must not be `None`")  # noqa: E501

        self._camera_settings = camera_settings

    @property
    def output_settings(self):
        """Gets the output_settings of this ScreenshotReportProperties.  # noqa: E501


        :return: The output_settings of this ScreenshotReportProperties.  # noqa: E501
        :rtype: ScreenshotOutputSettings
        """
        return self._output_settings

    @output_settings.setter
    def output_settings(self, output_settings):
        """Sets the output_settings of this ScreenshotReportProperties.


        :param output_settings: The output_settings of this ScreenshotReportProperties.  # noqa: E501
        :type: ScreenshotOutputSettings
        """
        if self.local_vars_configuration.client_side_validation and output_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `output_settings`, must not be `None`")  # noqa: E501

        self._output_settings = output_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreenshotReportProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScreenshotReportProperties):
            return True

        return self.to_dict() != other.to_dict()
