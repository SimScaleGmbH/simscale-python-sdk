# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class RelaxationFactor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pressure_field': 'float',
        'pressure_rgh_field': 'float',
        'passive_scalar_equation': 'float',
        'velocity_equation': 'float',
        'temperature_equation': 'float',
        'density_field': 'float',
        'enthalpy_equation': 'float',
        'internal_energy_equation': 'float',
        'turbulent_kinetic_energy_equation': 'float',
        'omega_dissipation_rate_equation': 'float',
        'epsilon_dissipation_rate_equation': 'float',
        'nu_tilda_equation': 'float',
        'net_radiative_heat_flux_field': 'float',
        'radiative_intensity_ray_equation': 'float',
        'specific_humidity_equation': 'float',
        'age_of_fluid_equation': 'float'
    }

    attribute_map = {
        'pressure_field': 'pressureField',
        'pressure_rgh_field': 'pressureRghField',
        'passive_scalar_equation': 'passiveScalarEquation',
        'velocity_equation': 'velocityEquation',
        'temperature_equation': 'temperatureEquation',
        'density_field': 'densityField',
        'enthalpy_equation': 'enthalpyEquation',
        'internal_energy_equation': 'internalEnergyEquation',
        'turbulent_kinetic_energy_equation': 'turbulentKineticEnergyEquation',
        'omega_dissipation_rate_equation': 'omegaDissipationRateEquation',
        'epsilon_dissipation_rate_equation': 'epsilonDissipationRateEquation',
        'nu_tilda_equation': 'nuTildaEquation',
        'net_radiative_heat_flux_field': 'netRadiativeHeatFluxField',
        'radiative_intensity_ray_equation': 'radiativeIntensityRayEquation',
        'specific_humidity_equation': 'specificHumidityEquation',
        'age_of_fluid_equation': 'ageOfFluidEquation'
    }

    def __init__(self, pressure_field=None, pressure_rgh_field=None, passive_scalar_equation=None, velocity_equation=None, temperature_equation=None, density_field=None, enthalpy_equation=None, internal_energy_equation=None, turbulent_kinetic_energy_equation=None, omega_dissipation_rate_equation=None, epsilon_dissipation_rate_equation=None, nu_tilda_equation=None, net_radiative_heat_flux_field=None, radiative_intensity_ray_equation=None, specific_humidity_equation=None, age_of_fluid_equation=None, local_vars_configuration=None):  # noqa: E501
        """RelaxationFactor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pressure_field = None
        self._pressure_rgh_field = None
        self._passive_scalar_equation = None
        self._velocity_equation = None
        self._temperature_equation = None
        self._density_field = None
        self._enthalpy_equation = None
        self._internal_energy_equation = None
        self._turbulent_kinetic_energy_equation = None
        self._omega_dissipation_rate_equation = None
        self._epsilon_dissipation_rate_equation = None
        self._nu_tilda_equation = None
        self._net_radiative_heat_flux_field = None
        self._radiative_intensity_ray_equation = None
        self._specific_humidity_equation = None
        self._age_of_fluid_equation = None
        self.discriminator = None

        if pressure_field is not None:
            self.pressure_field = pressure_field
        if pressure_rgh_field is not None:
            self.pressure_rgh_field = pressure_rgh_field
        if passive_scalar_equation is not None:
            self.passive_scalar_equation = passive_scalar_equation
        if velocity_equation is not None:
            self.velocity_equation = velocity_equation
        if temperature_equation is not None:
            self.temperature_equation = temperature_equation
        if density_field is not None:
            self.density_field = density_field
        if enthalpy_equation is not None:
            self.enthalpy_equation = enthalpy_equation
        if internal_energy_equation is not None:
            self.internal_energy_equation = internal_energy_equation
        if turbulent_kinetic_energy_equation is not None:
            self.turbulent_kinetic_energy_equation = turbulent_kinetic_energy_equation
        if omega_dissipation_rate_equation is not None:
            self.omega_dissipation_rate_equation = omega_dissipation_rate_equation
        if epsilon_dissipation_rate_equation is not None:
            self.epsilon_dissipation_rate_equation = epsilon_dissipation_rate_equation
        if nu_tilda_equation is not None:
            self.nu_tilda_equation = nu_tilda_equation
        if net_radiative_heat_flux_field is not None:
            self.net_radiative_heat_flux_field = net_radiative_heat_flux_field
        if radiative_intensity_ray_equation is not None:
            self.radiative_intensity_ray_equation = radiative_intensity_ray_equation
        if specific_humidity_equation is not None:
            self.specific_humidity_equation = specific_humidity_equation
        if age_of_fluid_equation is not None:
            self.age_of_fluid_equation = age_of_fluid_equation

    @property
    def pressure_field(self):
        """Gets the pressure_field of this RelaxationFactor.  # noqa: E501

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :return: The pressure_field of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._pressure_field

    @pressure_field.setter
    def pressure_field(self, pressure_field):
        """Sets the pressure_field of this RelaxationFactor.

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :param pressure_field: The pressure_field of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                pressure_field is not None and pressure_field > 1):  # noqa: E501
            raise ValueError("Invalid value for `pressure_field`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                pressure_field is not None and pressure_field < 0):  # noqa: E501
            raise ValueError("Invalid value for `pressure_field`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pressure_field = pressure_field

    @property
    def pressure_rgh_field(self):
        """Gets the pressure_rgh_field of this RelaxationFactor.  # noqa: E501


        :return: The pressure_rgh_field of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._pressure_rgh_field

    @pressure_rgh_field.setter
    def pressure_rgh_field(self, pressure_rgh_field):
        """Sets the pressure_rgh_field of this RelaxationFactor.


        :param pressure_rgh_field: The pressure_rgh_field of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                pressure_rgh_field is not None and pressure_rgh_field > 1):  # noqa: E501
            raise ValueError("Invalid value for `pressure_rgh_field`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                pressure_rgh_field is not None and pressure_rgh_field < 0):  # noqa: E501
            raise ValueError("Invalid value for `pressure_rgh_field`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pressure_rgh_field = pressure_rgh_field

    @property
    def passive_scalar_equation(self):
        """Gets the passive_scalar_equation of this RelaxationFactor.  # noqa: E501


        :return: The passive_scalar_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._passive_scalar_equation

    @passive_scalar_equation.setter
    def passive_scalar_equation(self, passive_scalar_equation):
        """Sets the passive_scalar_equation of this RelaxationFactor.


        :param passive_scalar_equation: The passive_scalar_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                passive_scalar_equation is not None and passive_scalar_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `passive_scalar_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                passive_scalar_equation is not None and passive_scalar_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `passive_scalar_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._passive_scalar_equation = passive_scalar_equation

    @property
    def velocity_equation(self):
        """Gets the velocity_equation of this RelaxationFactor.  # noqa: E501

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :return: The velocity_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._velocity_equation

    @velocity_equation.setter
    def velocity_equation(self, velocity_equation):
        """Sets the velocity_equation of this RelaxationFactor.

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :param velocity_equation: The velocity_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                velocity_equation is not None and velocity_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `velocity_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                velocity_equation is not None and velocity_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `velocity_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._velocity_equation = velocity_equation

    @property
    def temperature_equation(self):
        """Gets the temperature_equation of this RelaxationFactor.  # noqa: E501


        :return: The temperature_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._temperature_equation

    @temperature_equation.setter
    def temperature_equation(self, temperature_equation):
        """Sets the temperature_equation of this RelaxationFactor.


        :param temperature_equation: The temperature_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                temperature_equation is not None and temperature_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `temperature_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                temperature_equation is not None and temperature_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `temperature_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._temperature_equation = temperature_equation

    @property
    def density_field(self):
        """Gets the density_field of this RelaxationFactor.  # noqa: E501


        :return: The density_field of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._density_field

    @density_field.setter
    def density_field(self, density_field):
        """Sets the density_field of this RelaxationFactor.


        :param density_field: The density_field of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                density_field is not None and density_field > 1):  # noqa: E501
            raise ValueError("Invalid value for `density_field`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                density_field is not None and density_field < 0):  # noqa: E501
            raise ValueError("Invalid value for `density_field`, must be a value greater than or equal to `0`")  # noqa: E501

        self._density_field = density_field

    @property
    def enthalpy_equation(self):
        """Gets the enthalpy_equation of this RelaxationFactor.  # noqa: E501

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :return: The enthalpy_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._enthalpy_equation

    @enthalpy_equation.setter
    def enthalpy_equation(self, enthalpy_equation):
        """Sets the enthalpy_equation of this RelaxationFactor.

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :param enthalpy_equation: The enthalpy_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                enthalpy_equation is not None and enthalpy_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `enthalpy_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                enthalpy_equation is not None and enthalpy_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `enthalpy_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._enthalpy_equation = enthalpy_equation

    @property
    def internal_energy_equation(self):
        """Gets the internal_energy_equation of this RelaxationFactor.  # noqa: E501

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :return: The internal_energy_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._internal_energy_equation

    @internal_energy_equation.setter
    def internal_energy_equation(self, internal_energy_equation):
        """Sets the internal_energy_equation of this RelaxationFactor.

        <p>With this parameter you can initialize the under-relaxation of a field or equation. The solver will dynamically adapt this factor to improve stability.</p>  # noqa: E501

        :param internal_energy_equation: The internal_energy_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                internal_energy_equation is not None and internal_energy_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `internal_energy_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                internal_energy_equation is not None and internal_energy_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `internal_energy_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._internal_energy_equation = internal_energy_equation

    @property
    def turbulent_kinetic_energy_equation(self):
        """Gets the turbulent_kinetic_energy_equation of this RelaxationFactor.  # noqa: E501


        :return: The turbulent_kinetic_energy_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._turbulent_kinetic_energy_equation

    @turbulent_kinetic_energy_equation.setter
    def turbulent_kinetic_energy_equation(self, turbulent_kinetic_energy_equation):
        """Sets the turbulent_kinetic_energy_equation of this RelaxationFactor.


        :param turbulent_kinetic_energy_equation: The turbulent_kinetic_energy_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                turbulent_kinetic_energy_equation is not None and turbulent_kinetic_energy_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `turbulent_kinetic_energy_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                turbulent_kinetic_energy_equation is not None and turbulent_kinetic_energy_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `turbulent_kinetic_energy_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._turbulent_kinetic_energy_equation = turbulent_kinetic_energy_equation

    @property
    def omega_dissipation_rate_equation(self):
        """Gets the omega_dissipation_rate_equation of this RelaxationFactor.  # noqa: E501


        :return: The omega_dissipation_rate_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._omega_dissipation_rate_equation

    @omega_dissipation_rate_equation.setter
    def omega_dissipation_rate_equation(self, omega_dissipation_rate_equation):
        """Sets the omega_dissipation_rate_equation of this RelaxationFactor.


        :param omega_dissipation_rate_equation: The omega_dissipation_rate_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                omega_dissipation_rate_equation is not None and omega_dissipation_rate_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `omega_dissipation_rate_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                omega_dissipation_rate_equation is not None and omega_dissipation_rate_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `omega_dissipation_rate_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._omega_dissipation_rate_equation = omega_dissipation_rate_equation

    @property
    def epsilon_dissipation_rate_equation(self):
        """Gets the epsilon_dissipation_rate_equation of this RelaxationFactor.  # noqa: E501


        :return: The epsilon_dissipation_rate_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._epsilon_dissipation_rate_equation

    @epsilon_dissipation_rate_equation.setter
    def epsilon_dissipation_rate_equation(self, epsilon_dissipation_rate_equation):
        """Sets the epsilon_dissipation_rate_equation of this RelaxationFactor.


        :param epsilon_dissipation_rate_equation: The epsilon_dissipation_rate_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                epsilon_dissipation_rate_equation is not None and epsilon_dissipation_rate_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `epsilon_dissipation_rate_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                epsilon_dissipation_rate_equation is not None and epsilon_dissipation_rate_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `epsilon_dissipation_rate_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._epsilon_dissipation_rate_equation = epsilon_dissipation_rate_equation

    @property
    def nu_tilda_equation(self):
        """Gets the nu_tilda_equation of this RelaxationFactor.  # noqa: E501


        :return: The nu_tilda_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._nu_tilda_equation

    @nu_tilda_equation.setter
    def nu_tilda_equation(self, nu_tilda_equation):
        """Sets the nu_tilda_equation of this RelaxationFactor.


        :param nu_tilda_equation: The nu_tilda_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                nu_tilda_equation is not None and nu_tilda_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `nu_tilda_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                nu_tilda_equation is not None and nu_tilda_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `nu_tilda_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nu_tilda_equation = nu_tilda_equation

    @property
    def net_radiative_heat_flux_field(self):
        """Gets the net_radiative_heat_flux_field of this RelaxationFactor.  # noqa: E501


        :return: The net_radiative_heat_flux_field of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._net_radiative_heat_flux_field

    @net_radiative_heat_flux_field.setter
    def net_radiative_heat_flux_field(self, net_radiative_heat_flux_field):
        """Sets the net_radiative_heat_flux_field of this RelaxationFactor.


        :param net_radiative_heat_flux_field: The net_radiative_heat_flux_field of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                net_radiative_heat_flux_field is not None and net_radiative_heat_flux_field > 1):  # noqa: E501
            raise ValueError("Invalid value for `net_radiative_heat_flux_field`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                net_radiative_heat_flux_field is not None and net_radiative_heat_flux_field < 0):  # noqa: E501
            raise ValueError("Invalid value for `net_radiative_heat_flux_field`, must be a value greater than or equal to `0`")  # noqa: E501

        self._net_radiative_heat_flux_field = net_radiative_heat_flux_field

    @property
    def radiative_intensity_ray_equation(self):
        """Gets the radiative_intensity_ray_equation of this RelaxationFactor.  # noqa: E501


        :return: The radiative_intensity_ray_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._radiative_intensity_ray_equation

    @radiative_intensity_ray_equation.setter
    def radiative_intensity_ray_equation(self, radiative_intensity_ray_equation):
        """Sets the radiative_intensity_ray_equation of this RelaxationFactor.


        :param radiative_intensity_ray_equation: The radiative_intensity_ray_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                radiative_intensity_ray_equation is not None and radiative_intensity_ray_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `radiative_intensity_ray_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                radiative_intensity_ray_equation is not None and radiative_intensity_ray_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `radiative_intensity_ray_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._radiative_intensity_ray_equation = radiative_intensity_ray_equation

    @property
    def specific_humidity_equation(self):
        """Gets the specific_humidity_equation of this RelaxationFactor.  # noqa: E501


        :return: The specific_humidity_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._specific_humidity_equation

    @specific_humidity_equation.setter
    def specific_humidity_equation(self, specific_humidity_equation):
        """Sets the specific_humidity_equation of this RelaxationFactor.


        :param specific_humidity_equation: The specific_humidity_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                specific_humidity_equation is not None and specific_humidity_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `specific_humidity_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                specific_humidity_equation is not None and specific_humidity_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `specific_humidity_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._specific_humidity_equation = specific_humidity_equation

    @property
    def age_of_fluid_equation(self):
        """Gets the age_of_fluid_equation of this RelaxationFactor.  # noqa: E501


        :return: The age_of_fluid_equation of this RelaxationFactor.  # noqa: E501
        :rtype: float
        """
        return self._age_of_fluid_equation

    @age_of_fluid_equation.setter
    def age_of_fluid_equation(self, age_of_fluid_equation):
        """Sets the age_of_fluid_equation of this RelaxationFactor.


        :param age_of_fluid_equation: The age_of_fluid_equation of this RelaxationFactor.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                age_of_fluid_equation is not None and age_of_fluid_equation > 1):  # noqa: E501
            raise ValueError("Invalid value for `age_of_fluid_equation`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                age_of_fluid_equation is not None and age_of_fluid_equation < 0):  # noqa: E501
            raise ValueError("Invalid value for `age_of_fluid_equation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age_of_fluid_equation = age_of_fluid_equation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelaxationFactor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelaxationFactor):
            return True

        return self.to_dict() != other.to_dict()
