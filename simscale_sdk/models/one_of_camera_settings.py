# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfCameraSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'setting_type': 'str',
        'projection_type': 'ProjectionType',
        'up': 'Vector3D',
        'eye': 'Vector3D',
        'center': 'Vector3D',
        'front_plane_frustum_height': 'float',
        'field_of_view_y_degrees': 'float',
        'direction_specifier': 'str'
    }

    attribute_map = {
        'setting_type': 'settingType',
        'projection_type': 'projectionType',
        'up': 'up',
        'eye': 'eye',
        'center': 'center',
        'front_plane_frustum_height': 'frontPlaneFrustumHeight',
        'field_of_view_y_degrees': 'fieldOfViewYDegrees',
        'direction_specifier': 'directionSpecifier'
    }

    discriminator_value_class_map = {
        'USER_INPUT': 'UserInputCameraSettings',
        'TOP_VIEW': 'TopViewPredefinedCameraSettings',
        'FORTY_FIVE_FORTY_FIVE_VIEW': 'FortyFiveViewPredefinedCameraSettings'
    }

    def __init__(self, setting_type='FORTY_FIVE_FORTY_FIVE_VIEW', projection_type=None, up=None, eye=None, center=None, front_plane_frustum_height=None, field_of_view_y_degrees=None, direction_specifier=None, local_vars_configuration=None):  # noqa: E501
        """OneOfCameraSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._setting_type = None
        self._projection_type = None
        self._up = None
        self._eye = None
        self._center = None
        self._front_plane_frustum_height = None
        self._field_of_view_y_degrees = None
        self._direction_specifier = None
        self.discriminator = 'setting_type'

        self.setting_type = setting_type
        self.projection_type = projection_type
        self.up = up
        self.eye = eye
        self.center = center
        if front_plane_frustum_height is not None:
            self.front_plane_frustum_height = front_plane_frustum_height
        if field_of_view_y_degrees is not None:
            self.field_of_view_y_degrees = field_of_view_y_degrees
        self.direction_specifier = direction_specifier

    @property
    def setting_type(self):
        """Gets the setting_type of this OneOfCameraSettings.  # noqa: E501


        :return: The setting_type of this OneOfCameraSettings.  # noqa: E501
        :rtype: str
        """
        return self._setting_type

    @setting_type.setter
    def setting_type(self, setting_type):
        """Sets the setting_type of this OneOfCameraSettings.


        :param setting_type: The setting_type of this OneOfCameraSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and setting_type is None:  # noqa: E501
            raise ValueError("Invalid value for `setting_type`, must not be `None`")  # noqa: E501

        self._setting_type = setting_type

    @property
    def projection_type(self):
        """Gets the projection_type of this OneOfCameraSettings.  # noqa: E501


        :return: The projection_type of this OneOfCameraSettings.  # noqa: E501
        :rtype: ProjectionType
        """
        return self._projection_type

    @projection_type.setter
    def projection_type(self, projection_type):
        """Sets the projection_type of this OneOfCameraSettings.


        :param projection_type: The projection_type of this OneOfCameraSettings.  # noqa: E501
        :type: ProjectionType
        """
        if self.local_vars_configuration.client_side_validation and projection_type is None:  # noqa: E501
            raise ValueError("Invalid value for `projection_type`, must not be `None`")  # noqa: E501

        self._projection_type = projection_type

    @property
    def up(self):
        """Gets the up of this OneOfCameraSettings.  # noqa: E501


        :return: The up of this OneOfCameraSettings.  # noqa: E501
        :rtype: Vector3D
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this OneOfCameraSettings.


        :param up: The up of this OneOfCameraSettings.  # noqa: E501
        :type: Vector3D
        """
        if self.local_vars_configuration.client_side_validation and up is None:  # noqa: E501
            raise ValueError("Invalid value for `up`, must not be `None`")  # noqa: E501

        self._up = up

    @property
    def eye(self):
        """Gets the eye of this OneOfCameraSettings.  # noqa: E501


        :return: The eye of this OneOfCameraSettings.  # noqa: E501
        :rtype: Vector3D
        """
        return self._eye

    @eye.setter
    def eye(self, eye):
        """Sets the eye of this OneOfCameraSettings.


        :param eye: The eye of this OneOfCameraSettings.  # noqa: E501
        :type: Vector3D
        """
        if self.local_vars_configuration.client_side_validation and eye is None:  # noqa: E501
            raise ValueError("Invalid value for `eye`, must not be `None`")  # noqa: E501

        self._eye = eye

    @property
    def center(self):
        """Gets the center of this OneOfCameraSettings.  # noqa: E501


        :return: The center of this OneOfCameraSettings.  # noqa: E501
        :rtype: Vector3D
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this OneOfCameraSettings.


        :param center: The center of this OneOfCameraSettings.  # noqa: E501
        :type: Vector3D
        """
        if self.local_vars_configuration.client_side_validation and center is None:  # noqa: E501
            raise ValueError("Invalid value for `center`, must not be `None`")  # noqa: E501

        self._center = center

    @property
    def front_plane_frustum_height(self):
        """Gets the front_plane_frustum_height of this OneOfCameraSettings.  # noqa: E501

        required only for orthogonal projection type.  # noqa: E501

        :return: The front_plane_frustum_height of this OneOfCameraSettings.  # noqa: E501
        :rtype: float
        """
        return self._front_plane_frustum_height

    @front_plane_frustum_height.setter
    def front_plane_frustum_height(self, front_plane_frustum_height):
        """Sets the front_plane_frustum_height of this OneOfCameraSettings.

        required only for orthogonal projection type.  # noqa: E501

        :param front_plane_frustum_height: The front_plane_frustum_height of this OneOfCameraSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                front_plane_frustum_height is not None and front_plane_frustum_height < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `front_plane_frustum_height`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._front_plane_frustum_height = front_plane_frustum_height

    @property
    def field_of_view_y_degrees(self):
        """Gets the field_of_view_y_degrees of this OneOfCameraSettings.  # noqa: E501

        The total field of view in Y direction in degrees. Required onlyf for perspective projection type.  # noqa: E501

        :return: The field_of_view_y_degrees of this OneOfCameraSettings.  # noqa: E501
        :rtype: float
        """
        return self._field_of_view_y_degrees

    @field_of_view_y_degrees.setter
    def field_of_view_y_degrees(self, field_of_view_y_degrees):
        """Sets the field_of_view_y_degrees of this OneOfCameraSettings.

        The total field of view in Y direction in degrees. Required onlyf for perspective projection type.  # noqa: E501

        :param field_of_view_y_degrees: The field_of_view_y_degrees of this OneOfCameraSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                field_of_view_y_degrees is not None and field_of_view_y_degrees < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `field_of_view_y_degrees`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._field_of_view_y_degrees = field_of_view_y_degrees

    @property
    def direction_specifier(self):
        """Gets the direction_specifier of this OneOfCameraSettings.  # noqa: E501


        :return: The direction_specifier of this OneOfCameraSettings.  # noqa: E501
        :rtype: str
        """
        return self._direction_specifier

    @direction_specifier.setter
    def direction_specifier(self, direction_specifier):
        """Sets the direction_specifier of this OneOfCameraSettings.


        :param direction_specifier: The direction_specifier of this OneOfCameraSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and direction_specifier is None:  # noqa: E501
            raise ValueError("Invalid value for `direction_specifier`, must not be `None`")  # noqa: E501
        allowed_values = ["X_NEGATIVE_Y_NEGATIVE_Z_NEGATIVE", "X_NEGATIVE_Y_NEGATIVE_Z_POSITIVE", "X_NEGATIVE_Y_POSITIVE_Z_NEGATIVE", "X_NEGATIVE_Y_POSITIVE_Z_POSITIVE", "X_POSITIVE_Y_NEGATIVE_Z_NEGATIVE", "X_POSITIVE_Y_NEGATIVE_Z_POSITIVE", "X_POSITIVE_Y_POSITIVE_Z_NEGATIVE", "X_POSITIVE_Y_POSITIVE_Z_POSITIVE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and direction_specifier not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `direction_specifier` ({0}), must be one of {1}"  # noqa: E501
                .format(direction_specifier, allowed_values)
            )

        self._direction_specifier = direction_specifier

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfCameraSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfCameraSettings):
            return True

        return self.to_dict() != other.to_dict()
