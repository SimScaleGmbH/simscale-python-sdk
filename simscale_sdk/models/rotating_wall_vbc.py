# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class RotatingWallVBC(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'rotation': 'AngularRotation',
        'turbulence_wall': 'str'
    }

    attribute_map = {
        'type': 'type',
        'rotation': 'rotation',
        'turbulence_wall': 'turbulenceWall'
    }

    def __init__(self, type='ROTATING_WALL_VELOCITY', rotation=None, turbulence_wall=None, local_vars_configuration=None):  # noqa: E501
        """RotatingWallVBC - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._rotation = None
        self._turbulence_wall = None
        self.discriminator = None

        self.type = type
        if rotation is not None:
            self.rotation = rotation
        if turbulence_wall is not None:
            self.turbulence_wall = turbulence_wall

    @property
    def type(self):
        """Gets the type of this RotatingWallVBC.  # noqa: E501

        Schema name: RotatingWallVBC  # noqa: E501

        :return: The type of this RotatingWallVBC.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RotatingWallVBC.

        Schema name: RotatingWallVBC  # noqa: E501

        :param type: The type of this RotatingWallVBC.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def rotation(self):
        """Gets the rotation of this RotatingWallVBC.  # noqa: E501


        :return: The rotation of this RotatingWallVBC.  # noqa: E501
        :rtype: AngularRotation
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this RotatingWallVBC.


        :param rotation: The rotation of this RotatingWallVBC.  # noqa: E501
        :type: AngularRotation
        """

        self._rotation = rotation

    @property
    def turbulence_wall(self):
        """Gets the turbulence_wall of this RotatingWallVBC.  # noqa: E501


        :return: The turbulence_wall of this RotatingWallVBC.  # noqa: E501
        :rtype: str
        """
        return self._turbulence_wall

    @turbulence_wall.setter
    def turbulence_wall(self, turbulence_wall):
        """Sets the turbulence_wall of this RotatingWallVBC.


        :param turbulence_wall: The turbulence_wall of this RotatingWallVBC.  # noqa: E501
        :type: str
        """
        allowed_values = ["WALL_FUNCTION", "FULL_RESOLUTION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and turbulence_wall not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `turbulence_wall` ({0}), must be one of {1}"  # noqa: E501
                .format(turbulence_wall, allowed_values)
            )

        self._turbulence_wall = turbulence_wall

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RotatingWallVBC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RotatingWallVBC):
            return True

        return self.to_dict() != other.to_dict()
