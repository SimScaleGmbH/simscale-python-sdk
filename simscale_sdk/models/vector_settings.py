# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class VectorSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vector_field': 'VectorField',
        'scale_factor': 'float',
        'solid_color': 'Color',
        'coloring': 'str',
        'minimum_clamping_range': 'float',
        'maximum_clamping_range': 'float',
        'minimum_filtering_range': 'float',
        'maximum_filtering_range': 'float'
    }

    attribute_map = {
        'vector_field': 'vectorField',
        'scale_factor': 'scaleFactor',
        'solid_color': 'solidColor',
        'coloring': 'coloring',
        'minimum_clamping_range': 'minimumClampingRange',
        'maximum_clamping_range': 'maximumClampingRange',
        'minimum_filtering_range': 'minimumFilteringRange',
        'maximum_filtering_range': 'maximumFilteringRange'
    }

    def __init__(self, vector_field=None, scale_factor=0.2, solid_color=None, coloring='BY_VECTOR_FIELD', minimum_clamping_range=None, maximum_clamping_range=None, minimum_filtering_range=None, maximum_filtering_range=None, local_vars_configuration=None):  # noqa: E501
        """VectorSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vector_field = None
        self._scale_factor = None
        self._solid_color = None
        self._coloring = None
        self._minimum_clamping_range = None
        self._maximum_clamping_range = None
        self._minimum_filtering_range = None
        self._maximum_filtering_range = None
        self.discriminator = None

        self.vector_field = vector_field
        self.scale_factor = scale_factor
        if solid_color is not None:
            self.solid_color = solid_color
        self.coloring = coloring
        if minimum_clamping_range is not None:
            self.minimum_clamping_range = minimum_clamping_range
        if maximum_clamping_range is not None:
            self.maximum_clamping_range = maximum_clamping_range
        if minimum_filtering_range is not None:
            self.minimum_filtering_range = minimum_filtering_range
        if maximum_filtering_range is not None:
            self.maximum_filtering_range = maximum_filtering_range

    @property
    def vector_field(self):
        """Gets the vector_field of this VectorSettings.  # noqa: E501


        :return: The vector_field of this VectorSettings.  # noqa: E501
        :rtype: VectorField
        """
        return self._vector_field

    @vector_field.setter
    def vector_field(self, vector_field):
        """Sets the vector_field of this VectorSettings.


        :param vector_field: The vector_field of this VectorSettings.  # noqa: E501
        :type: VectorField
        """
        if self.local_vars_configuration.client_side_validation and vector_field is None:  # noqa: E501
            raise ValueError("Invalid value for `vector_field`, must not be `None`")  # noqa: E501

        self._vector_field = vector_field

    @property
    def scale_factor(self):
        """Gets the scale_factor of this VectorSettings.  # noqa: E501


        :return: The scale_factor of this VectorSettings.  # noqa: E501
        :rtype: float
        """
        return self._scale_factor

    @scale_factor.setter
    def scale_factor(self, scale_factor):
        """Sets the scale_factor of this VectorSettings.


        :param scale_factor: The scale_factor of this VectorSettings.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and scale_factor is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_factor`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                scale_factor is not None and scale_factor > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `scale_factor`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                scale_factor is not None and scale_factor < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `scale_factor`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._scale_factor = scale_factor

    @property
    def solid_color(self):
        """Gets the solid_color of this VectorSettings.  # noqa: E501


        :return: The solid_color of this VectorSettings.  # noqa: E501
        :rtype: Color
        """
        return self._solid_color

    @solid_color.setter
    def solid_color(self, solid_color):
        """Sets the solid_color of this VectorSettings.


        :param solid_color: The solid_color of this VectorSettings.  # noqa: E501
        :type: Color
        """

        self._solid_color = solid_color

    @property
    def coloring(self):
        """Gets the coloring of this VectorSettings.  # noqa: E501


        :return: The coloring of this VectorSettings.  # noqa: E501
        :rtype: str
        """
        return self._coloring

    @coloring.setter
    def coloring(self, coloring):
        """Sets the coloring of this VectorSettings.


        :param coloring: The coloring of this VectorSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and coloring is None:  # noqa: E501
            raise ValueError("Invalid value for `coloring`, must not be `None`")  # noqa: E501
        allowed_values = ["BY_VECTOR_FIELD", "SOLID_COLOR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and coloring not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `coloring` ({0}), must be one of {1}"  # noqa: E501
                .format(coloring, allowed_values)
            )

        self._coloring = coloring

    @property
    def minimum_clamping_range(self):
        """Gets the minimum_clamping_range of this VectorSettings.  # noqa: E501

        The minimum length of (non-zero) vectors will be drawn as. Must not be larger than maximumClampingRange. Default value is the minimum length of the specified vector field.  # noqa: E501

        :return: The minimum_clamping_range of this VectorSettings.  # noqa: E501
        :rtype: float
        """
        return self._minimum_clamping_range

    @minimum_clamping_range.setter
    def minimum_clamping_range(self, minimum_clamping_range):
        """Sets the minimum_clamping_range of this VectorSettings.

        The minimum length of (non-zero) vectors will be drawn as. Must not be larger than maximumClampingRange. Default value is the minimum length of the specified vector field.  # noqa: E501

        :param minimum_clamping_range: The minimum_clamping_range of this VectorSettings.  # noqa: E501
        :type: float
        """

        self._minimum_clamping_range = minimum_clamping_range

    @property
    def maximum_clamping_range(self):
        """Gets the maximum_clamping_range of this VectorSettings.  # noqa: E501

        The maximum length of (non-zero) vectors will be drawn as. Must not be smaller than minimumClampingRange. Default value is the maximum length of the specified vector field.  # noqa: E501

        :return: The maximum_clamping_range of this VectorSettings.  # noqa: E501
        :rtype: float
        """
        return self._maximum_clamping_range

    @maximum_clamping_range.setter
    def maximum_clamping_range(self, maximum_clamping_range):
        """Sets the maximum_clamping_range of this VectorSettings.

        The maximum length of (non-zero) vectors will be drawn as. Must not be smaller than minimumClampingRange. Default value is the maximum length of the specified vector field.  # noqa: E501

        :param maximum_clamping_range: The maximum_clamping_range of this VectorSettings.  # noqa: E501
        :type: float
        """

        self._maximum_clamping_range = maximum_clamping_range

    @property
    def minimum_filtering_range(self):
        """Gets the minimum_filtering_range of this VectorSettings.  # noqa: E501

        The required minimum length of the vectors in order to be drawn. Must not be larger than maximumFilteringRange. Default value is the minimum length of the specified vector field.  # noqa: E501

        :return: The minimum_filtering_range of this VectorSettings.  # noqa: E501
        :rtype: float
        """
        return self._minimum_filtering_range

    @minimum_filtering_range.setter
    def minimum_filtering_range(self, minimum_filtering_range):
        """Sets the minimum_filtering_range of this VectorSettings.

        The required minimum length of the vectors in order to be drawn. Must not be larger than maximumFilteringRange. Default value is the minimum length of the specified vector field.  # noqa: E501

        :param minimum_filtering_range: The minimum_filtering_range of this VectorSettings.  # noqa: E501
        :type: float
        """

        self._minimum_filtering_range = minimum_filtering_range

    @property
    def maximum_filtering_range(self):
        """Gets the maximum_filtering_range of this VectorSettings.  # noqa: E501

        The required maximum length of the vectors in order to be drawn. Must not be smaller than minimumFilteringRange. Default value is the maximum length of the specified vector field.  # noqa: E501

        :return: The maximum_filtering_range of this VectorSettings.  # noqa: E501
        :rtype: float
        """
        return self._maximum_filtering_range

    @maximum_filtering_range.setter
    def maximum_filtering_range(self, maximum_filtering_range):
        """Sets the maximum_filtering_range of this VectorSettings.

        The required maximum length of the vectors in order to be drawn. Must not be smaller than minimumFilteringRange. Default value is the maximum length of the specified vector field.  # noqa: E501

        :param maximum_filtering_range: The maximum_filtering_range of this VectorSettings.  # noqa: E501
        :type: float
        """

        self._maximum_filtering_range = maximum_filtering_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VectorSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VectorSettings):
            return True

        return self.to_dict() != other.to_dict()
