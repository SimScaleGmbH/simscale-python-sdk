# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfAdvancedConceptsPorousMediums(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'porosity': 'float',
        'permeability': 'DimensionalArea',
        'drag_coefficient': 'float',
        'topological_reference': 'TopologicalReference',
        'pressure_loss_function': 'DimensionalFunctionPressure',
        'coefficient_d': 'DimensionalVectorReciprocalPermeability',
        'coefficient_f': 'DimensionalVectorAbsorptivity',
        'orientation': 'OneOfFixedCoeffMediumOrientation',
        'geometry_primitive_uuids': 'list[str]',
        'alpha': 'DimensionalVectorSpecificTurbulenceDissipationRate',
        'beta': 'DimensionalVectorAbsorptivity',
        'reference_density': 'DimensionalDensity',
        'linear_coefficient': 'float',
        'exponent_coefficient': 'float',
        'pressure_loss_data': 'PressureLossData',
        'directional_dependency': 'DirectionalDependency',
        'plate_data': 'PlateData',
        'darcy_forchheimer_type': 'RectifyingDarcyForchheimer'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'porosity': 'porosity',
        'permeability': 'permeability',
        'drag_coefficient': 'dragCoefficient',
        'topological_reference': 'topologicalReference',
        'pressure_loss_function': 'pressureLossFunction',
        'coefficient_d': 'coefficientD',
        'coefficient_f': 'coefficientF',
        'orientation': 'orientation',
        'geometry_primitive_uuids': 'geometryPrimitiveUuids',
        'alpha': 'alpha',
        'beta': 'beta',
        'reference_density': 'referenceDensity',
        'linear_coefficient': 'linearCoefficient',
        'exponent_coefficient': 'exponentCoefficient',
        'pressure_loss_data': 'pressureLossData',
        'directional_dependency': 'directionalDependency',
        'plate_data': 'plateData',
        'darcy_forchheimer_type': 'darcyForchheimerType'
    }

    discriminator_value_class_map = {
        'DARCY': 'DarcyMedium',
        'PRESSURE_LOSS_FUNCTION': 'PressureLossFunctionMedium',
        'DARCY_FORCHHEIMER': 'DarcyForchheimerMedium',
        'FIXED_COEFFICIENTS': 'FixedCoeffMedium',
        'POWER_LAW': 'PowerLawMedium',
        'PRESSURE_LOSS_CURVE': 'PressureLossCurve',
        'PERFORATED_PLATE': 'PerforatedPlate'
    }

    def __init__(self, type='PERFORATED_PLATE', name=None, porosity=None, permeability=None, drag_coefficient=None, topological_reference=None, pressure_loss_function=None, coefficient_d=None, coefficient_f=None, orientation=None, geometry_primitive_uuids=None, alpha=None, beta=None, reference_density=None, linear_coefficient=None, exponent_coefficient=None, pressure_loss_data=None, directional_dependency=None, plate_data=None, darcy_forchheimer_type=None, local_vars_configuration=None):  # noqa: E501
        """OneOfAdvancedConceptsPorousMediums - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._porosity = None
        self._permeability = None
        self._drag_coefficient = None
        self._topological_reference = None
        self._pressure_loss_function = None
        self._coefficient_d = None
        self._coefficient_f = None
        self._orientation = None
        self._geometry_primitive_uuids = None
        self._alpha = None
        self._beta = None
        self._reference_density = None
        self._linear_coefficient = None
        self._exponent_coefficient = None
        self._pressure_loss_data = None
        self._directional_dependency = None
        self._plate_data = None
        self._darcy_forchheimer_type = None
        self.discriminator = 'type'

        self.type = type
        if name is not None:
            self.name = name
        if porosity is not None:
            self.porosity = porosity
        if permeability is not None:
            self.permeability = permeability
        if drag_coefficient is not None:
            self.drag_coefficient = drag_coefficient
        if topological_reference is not None:
            self.topological_reference = topological_reference
        if pressure_loss_function is not None:
            self.pressure_loss_function = pressure_loss_function
        if coefficient_d is not None:
            self.coefficient_d = coefficient_d
        if coefficient_f is not None:
            self.coefficient_f = coefficient_f
        if orientation is not None:
            self.orientation = orientation
        if geometry_primitive_uuids is not None:
            self.geometry_primitive_uuids = geometry_primitive_uuids
        if alpha is not None:
            self.alpha = alpha
        if beta is not None:
            self.beta = beta
        if reference_density is not None:
            self.reference_density = reference_density
        if linear_coefficient is not None:
            self.linear_coefficient = linear_coefficient
        if exponent_coefficient is not None:
            self.exponent_coefficient = exponent_coefficient
        if pressure_loss_data is not None:
            self.pressure_loss_data = pressure_loss_data
        if directional_dependency is not None:
            self.directional_dependency = directional_dependency
        if plate_data is not None:
            self.plate_data = plate_data
        if darcy_forchheimer_type is not None:
            self.darcy_forchheimer_type = darcy_forchheimer_type

    @property
    def type(self):
        """Gets the type of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501

        Schema name: PerforatedPlate  # noqa: E501

        :return: The type of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfAdvancedConceptsPorousMediums.

        Schema name: PerforatedPlate  # noqa: E501

        :param type: The type of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The name of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OneOfAdvancedConceptsPorousMediums.


        :param name: The name of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def porosity(self):
        """Gets the porosity of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501

        Porosity is the fraction of a volume of material is that is void. It ranges from φ = 0 (completely empty) to φ = 1 (completely solid).  # noqa: E501

        :return: The porosity of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: float
        """
        return self._porosity

    @porosity.setter
    def porosity(self, porosity):
        """Sets the porosity of this OneOfAdvancedConceptsPorousMediums.

        Porosity is the fraction of a volume of material is that is void. It ranges from φ = 0 (completely empty) to φ = 1 (completely solid).  # noqa: E501

        :param porosity: The porosity of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                porosity is not None and porosity > 1):  # noqa: E501
            raise ValueError("Invalid value for `porosity`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                porosity is not None and porosity < 0):  # noqa: E501
            raise ValueError("Invalid value for `porosity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._porosity = porosity

    @property
    def permeability(self):
        """Gets the permeability of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The permeability of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DimensionalArea
        """
        return self._permeability

    @permeability.setter
    def permeability(self, permeability):
        """Sets the permeability of this OneOfAdvancedConceptsPorousMediums.


        :param permeability: The permeability of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DimensionalArea
        """

        self._permeability = permeability

    @property
    def drag_coefficient(self):
        """Gets the drag_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501

        The Darcy law may be extended to include the Forchheimer drag term for more inertial flows (Re > 10). This term is quadratic in flow velocity. Its coefficient includes the fluid drag coefficient Cd.  # noqa: E501

        :return: The drag_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: float
        """
        return self._drag_coefficient

    @drag_coefficient.setter
    def drag_coefficient(self, drag_coefficient):
        """Sets the drag_coefficient of this OneOfAdvancedConceptsPorousMediums.

        The Darcy law may be extended to include the Forchheimer drag term for more inertial flows (Re > 10). This term is quadratic in flow velocity. Its coefficient includes the fluid drag coefficient Cd.  # noqa: E501

        :param drag_coefficient: The drag_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                drag_coefficient is not None and drag_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `drag_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._drag_coefficient = drag_coefficient

    @property
    def topological_reference(self):
        """Gets the topological_reference of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The topological_reference of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this OneOfAdvancedConceptsPorousMediums.


        :param topological_reference: The topological_reference of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    @property
    def pressure_loss_function(self):
        """Gets the pressure_loss_function of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The pressure_loss_function of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DimensionalFunctionPressure
        """
        return self._pressure_loss_function

    @pressure_loss_function.setter
    def pressure_loss_function(self, pressure_loss_function):
        """Sets the pressure_loss_function of this OneOfAdvancedConceptsPorousMediums.


        :param pressure_loss_function: The pressure_loss_function of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DimensionalFunctionPressure
        """

        self._pressure_loss_function = pressure_loss_function

    @property
    def coefficient_d(self):
        """Gets the coefficient_d of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The coefficient_d of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DimensionalVectorReciprocalPermeability
        """
        return self._coefficient_d

    @coefficient_d.setter
    def coefficient_d(self, coefficient_d):
        """Sets the coefficient_d of this OneOfAdvancedConceptsPorousMediums.


        :param coefficient_d: The coefficient_d of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DimensionalVectorReciprocalPermeability
        """

        self._coefficient_d = coefficient_d

    @property
    def coefficient_f(self):
        """Gets the coefficient_f of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The coefficient_f of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DimensionalVectorAbsorptivity
        """
        return self._coefficient_f

    @coefficient_f.setter
    def coefficient_f(self, coefficient_f):
        """Sets the coefficient_f of this OneOfAdvancedConceptsPorousMediums.


        :param coefficient_f: The coefficient_f of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DimensionalVectorAbsorptivity
        """

        self._coefficient_f = coefficient_f

    @property
    def orientation(self):
        """Gets the orientation of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The orientation of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: OneOfFixedCoeffMediumOrientation
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this OneOfAdvancedConceptsPorousMediums.


        :param orientation: The orientation of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: OneOfFixedCoeffMediumOrientation
        """

        self._orientation = orientation

    @property
    def geometry_primitive_uuids(self):
        """Gets the geometry_primitive_uuids of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The geometry_primitive_uuids of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: list[str]
        """
        return self._geometry_primitive_uuids

    @geometry_primitive_uuids.setter
    def geometry_primitive_uuids(self, geometry_primitive_uuids):
        """Sets the geometry_primitive_uuids of this OneOfAdvancedConceptsPorousMediums.


        :param geometry_primitive_uuids: The geometry_primitive_uuids of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: list[str]
        """

        self._geometry_primitive_uuids = geometry_primitive_uuids

    @property
    def alpha(self):
        """Gets the alpha of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The alpha of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DimensionalVectorSpecificTurbulenceDissipationRate
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this OneOfAdvancedConceptsPorousMediums.


        :param alpha: The alpha of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DimensionalVectorSpecificTurbulenceDissipationRate
        """

        self._alpha = alpha

    @property
    def beta(self):
        """Gets the beta of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The beta of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DimensionalVectorAbsorptivity
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this OneOfAdvancedConceptsPorousMediums.


        :param beta: The beta of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DimensionalVectorAbsorptivity
        """

        self._beta = beta

    @property
    def reference_density(self):
        """Gets the reference_density of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The reference_density of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DimensionalDensity
        """
        return self._reference_density

    @reference_density.setter
    def reference_density(self, reference_density):
        """Sets the reference_density of this OneOfAdvancedConceptsPorousMediums.


        :param reference_density: The reference_density of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DimensionalDensity
        """

        self._reference_density = reference_density

    @property
    def linear_coefficient(self):
        """Gets the linear_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The linear_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: float
        """
        return self._linear_coefficient

    @linear_coefficient.setter
    def linear_coefficient(self, linear_coefficient):
        """Sets the linear_coefficient of this OneOfAdvancedConceptsPorousMediums.


        :param linear_coefficient: The linear_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                linear_coefficient is not None and linear_coefficient > 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000):  # noqa: E501
            raise ValueError("Invalid value for `linear_coefficient`, must be a value less than or equal to `100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                linear_coefficient is not None and linear_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `linear_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._linear_coefficient = linear_coefficient

    @property
    def exponent_coefficient(self):
        """Gets the exponent_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The exponent_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: float
        """
        return self._exponent_coefficient

    @exponent_coefficient.setter
    def exponent_coefficient(self, exponent_coefficient):
        """Sets the exponent_coefficient of this OneOfAdvancedConceptsPorousMediums.


        :param exponent_coefficient: The exponent_coefficient of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                exponent_coefficient is not None and exponent_coefficient > 50):  # noqa: E501
            raise ValueError("Invalid value for `exponent_coefficient`, must be a value less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                exponent_coefficient is not None and exponent_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `exponent_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._exponent_coefficient = exponent_coefficient

    @property
    def pressure_loss_data(self):
        """Gets the pressure_loss_data of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The pressure_loss_data of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: PressureLossData
        """
        return self._pressure_loss_data

    @pressure_loss_data.setter
    def pressure_loss_data(self, pressure_loss_data):
        """Sets the pressure_loss_data of this OneOfAdvancedConceptsPorousMediums.


        :param pressure_loss_data: The pressure_loss_data of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: PressureLossData
        """

        self._pressure_loss_data = pressure_loss_data

    @property
    def directional_dependency(self):
        """Gets the directional_dependency of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The directional_dependency of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: DirectionalDependency
        """
        return self._directional_dependency

    @directional_dependency.setter
    def directional_dependency(self, directional_dependency):
        """Sets the directional_dependency of this OneOfAdvancedConceptsPorousMediums.


        :param directional_dependency: The directional_dependency of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: DirectionalDependency
        """

        self._directional_dependency = directional_dependency

    @property
    def plate_data(self):
        """Gets the plate_data of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The plate_data of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: PlateData
        """
        return self._plate_data

    @plate_data.setter
    def plate_data(self, plate_data):
        """Sets the plate_data of this OneOfAdvancedConceptsPorousMediums.


        :param plate_data: The plate_data of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: PlateData
        """

        self._plate_data = plate_data

    @property
    def darcy_forchheimer_type(self):
        """Gets the darcy_forchheimer_type of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501


        :return: The darcy_forchheimer_type of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :rtype: RectifyingDarcyForchheimer
        """
        return self._darcy_forchheimer_type

    @darcy_forchheimer_type.setter
    def darcy_forchheimer_type(self, darcy_forchheimer_type):
        """Sets the darcy_forchheimer_type of this OneOfAdvancedConceptsPorousMediums.


        :param darcy_forchheimer_type: The darcy_forchheimer_type of this OneOfAdvancedConceptsPorousMediums.  # noqa: E501
        :type: RectifyingDarcyForchheimer
        """

        self._darcy_forchheimer_type = darcy_forchheimer_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfAdvancedConceptsPorousMediums):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfAdvancedConceptsPorousMediums):
            return True

        return self.to_dict() != other.to_dict()
