# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class Cavitation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vapor_molecular_weight': 'DimensionalMolarMass',
        'liquid_bulk_modulus': 'DimensionalPressure',
        'liquid_bulk_modulus_coefficient': 'float',
        'liquid_reference_pressure': 'DimensionalPressure',
        'saturation_pressure': 'DimensionalPressure',
        'liquid_temperature': 'DimensionalTemperature'
    }

    attribute_map = {
        'vapor_molecular_weight': 'vaporMolecularWeight',
        'liquid_bulk_modulus': 'liquidBulkModulus',
        'liquid_bulk_modulus_coefficient': 'liquidBulkModulusCoefficient',
        'liquid_reference_pressure': 'liquidReferencePressure',
        'saturation_pressure': 'saturationPressure',
        'liquid_temperature': 'liquidTemperature'
    }

    def __init__(self, vapor_molecular_weight=None, liquid_bulk_modulus=None, liquid_bulk_modulus_coefficient=None, liquid_reference_pressure=None, saturation_pressure=None, liquid_temperature=None, local_vars_configuration=None):  # noqa: E501
        """Cavitation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vapor_molecular_weight = None
        self._liquid_bulk_modulus = None
        self._liquid_bulk_modulus_coefficient = None
        self._liquid_reference_pressure = None
        self._saturation_pressure = None
        self._liquid_temperature = None
        self.discriminator = None

        if vapor_molecular_weight is not None:
            self.vapor_molecular_weight = vapor_molecular_weight
        if liquid_bulk_modulus is not None:
            self.liquid_bulk_modulus = liquid_bulk_modulus
        if liquid_bulk_modulus_coefficient is not None:
            self.liquid_bulk_modulus_coefficient = liquid_bulk_modulus_coefficient
        if liquid_reference_pressure is not None:
            self.liquid_reference_pressure = liquid_reference_pressure
        if saturation_pressure is not None:
            self.saturation_pressure = saturation_pressure
        if liquid_temperature is not None:
            self.liquid_temperature = liquid_temperature

    @property
    def vapor_molecular_weight(self):
        """Gets the vapor_molecular_weight of this Cavitation.  # noqa: E501


        :return: The vapor_molecular_weight of this Cavitation.  # noqa: E501
        :rtype: DimensionalMolarMass
        """
        return self._vapor_molecular_weight

    @vapor_molecular_weight.setter
    def vapor_molecular_weight(self, vapor_molecular_weight):
        """Sets the vapor_molecular_weight of this Cavitation.


        :param vapor_molecular_weight: The vapor_molecular_weight of this Cavitation.  # noqa: E501
        :type: DimensionalMolarMass
        """

        self._vapor_molecular_weight = vapor_molecular_weight

    @property
    def liquid_bulk_modulus(self):
        """Gets the liquid_bulk_modulus of this Cavitation.  # noqa: E501


        :return: The liquid_bulk_modulus of this Cavitation.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._liquid_bulk_modulus

    @liquid_bulk_modulus.setter
    def liquid_bulk_modulus(self, liquid_bulk_modulus):
        """Sets the liquid_bulk_modulus of this Cavitation.


        :param liquid_bulk_modulus: The liquid_bulk_modulus of this Cavitation.  # noqa: E501
        :type: DimensionalPressure
        """

        self._liquid_bulk_modulus = liquid_bulk_modulus

    @property
    def liquid_bulk_modulus_coefficient(self):
        """Gets the liquid_bulk_modulus_coefficient of this Cavitation.  # noqa: E501

        The <b>liquid bulk modulus coefficient</b> <i>B<sub>1</sub></i> accounts for a linear rate of change in the liquid bulk modulus with respect to pressure such that <i>B = B<sub>0</sub> + B<sub>1</sub> (P - P<sub>ref</sub>)</i>, where <i>B<sub>0</sub></i> is the constant liquid bulk modulus. Typically only applicable in cases where pressure differences exceed 100 bar, otherwise a zero value should be specified.  # noqa: E501

        :return: The liquid_bulk_modulus_coefficient of this Cavitation.  # noqa: E501
        :rtype: float
        """
        return self._liquid_bulk_modulus_coefficient

    @liquid_bulk_modulus_coefficient.setter
    def liquid_bulk_modulus_coefficient(self, liquid_bulk_modulus_coefficient):
        """Sets the liquid_bulk_modulus_coefficient of this Cavitation.

        The <b>liquid bulk modulus coefficient</b> <i>B<sub>1</sub></i> accounts for a linear rate of change in the liquid bulk modulus with respect to pressure such that <i>B = B<sub>0</sub> + B<sub>1</sub> (P - P<sub>ref</sub>)</i>, where <i>B<sub>0</sub></i> is the constant liquid bulk modulus. Typically only applicable in cases where pressure differences exceed 100 bar, otherwise a zero value should be specified.  # noqa: E501

        :param liquid_bulk_modulus_coefficient: The liquid_bulk_modulus_coefficient of this Cavitation.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                liquid_bulk_modulus_coefficient is not None and liquid_bulk_modulus_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `liquid_bulk_modulus_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._liquid_bulk_modulus_coefficient = liquid_bulk_modulus_coefficient

    @property
    def liquid_reference_pressure(self):
        """Gets the liquid_reference_pressure of this Cavitation.  # noqa: E501


        :return: The liquid_reference_pressure of this Cavitation.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._liquid_reference_pressure

    @liquid_reference_pressure.setter
    def liquid_reference_pressure(self, liquid_reference_pressure):
        """Sets the liquid_reference_pressure of this Cavitation.


        :param liquid_reference_pressure: The liquid_reference_pressure of this Cavitation.  # noqa: E501
        :type: DimensionalPressure
        """

        self._liquid_reference_pressure = liquid_reference_pressure

    @property
    def saturation_pressure(self):
        """Gets the saturation_pressure of this Cavitation.  # noqa: E501


        :return: The saturation_pressure of this Cavitation.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._saturation_pressure

    @saturation_pressure.setter
    def saturation_pressure(self, saturation_pressure):
        """Sets the saturation_pressure of this Cavitation.


        :param saturation_pressure: The saturation_pressure of this Cavitation.  # noqa: E501
        :type: DimensionalPressure
        """

        self._saturation_pressure = saturation_pressure

    @property
    def liquid_temperature(self):
        """Gets the liquid_temperature of this Cavitation.  # noqa: E501


        :return: The liquid_temperature of this Cavitation.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._liquid_temperature

    @liquid_temperature.setter
    def liquid_temperature(self, liquid_temperature):
        """Sets the liquid_temperature of this Cavitation.


        :param liquid_temperature: The liquid_temperature of this Cavitation.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._liquid_temperature = liquid_temperature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cavitation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Cavitation):
            return True

        return self.to_dict() != other.to_dict()
