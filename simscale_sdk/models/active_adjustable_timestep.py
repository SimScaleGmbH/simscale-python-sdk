# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ActiveAdjustableTimestep(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'maximal_courant_number': 'float',
        'maximal_step': 'float',
        'max_alpha_co': 'float'
    }

    attribute_map = {
        'type': 'type',
        'maximal_courant_number': 'maximalCourantNumber',
        'maximal_step': 'maximalStep',
        'max_alpha_co': 'maxAlphaCo'
    }

    def __init__(self, type='ACTIVE_TIMESTEP', maximal_courant_number=None, maximal_step=None, max_alpha_co=None, local_vars_configuration=None):  # noqa: E501
        """ActiveAdjustableTimestep - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._maximal_courant_number = None
        self._maximal_step = None
        self._max_alpha_co = None
        self.discriminator = None

        self.type = type
        if maximal_courant_number is not None:
            self.maximal_courant_number = maximal_courant_number
        if maximal_step is not None:
            self.maximal_step = maximal_step
        if max_alpha_co is not None:
            self.max_alpha_co = max_alpha_co

    @property
    def type(self):
        """Gets the type of this ActiveAdjustableTimestep.  # noqa: E501

        This option activates an adjustable time step. The time step is being modified according to the Courant number.  Schema name: ActiveAdjustableTimestep  # noqa: E501

        :return: The type of this ActiveAdjustableTimestep.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActiveAdjustableTimestep.

        This option activates an adjustable time step. The time step is being modified according to the Courant number.  Schema name: ActiveAdjustableTimestep  # noqa: E501

        :param type: The type of this ActiveAdjustableTimestep.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def maximal_courant_number(self):
        """Gets the maximal_courant_number of this ActiveAdjustableTimestep.  # noqa: E501

        This option defines a maximum Courant number. The resulting time step should resolve relevant transient effects with at least 100 steps. <br><b>Transient multiphase simulations</b>: Maximum Courant number may not be greater than 1. Values of 0.5-0.7 are recommended for many cases.  # noqa: E501

        :return: The maximal_courant_number of this ActiveAdjustableTimestep.  # noqa: E501
        :rtype: float
        """
        return self._maximal_courant_number

    @maximal_courant_number.setter
    def maximal_courant_number(self, maximal_courant_number):
        """Sets the maximal_courant_number of this ActiveAdjustableTimestep.

        This option defines a maximum Courant number. The resulting time step should resolve relevant transient effects with at least 100 steps. <br><b>Transient multiphase simulations</b>: Maximum Courant number may not be greater than 1. Values of 0.5-0.7 are recommended for many cases.  # noqa: E501

        :param maximal_courant_number: The maximal_courant_number of this ActiveAdjustableTimestep.  # noqa: E501
        :type: float
        """

        self._maximal_courant_number = maximal_courant_number

    @property
    def maximal_step(self):
        """Gets the maximal_step of this ActiveAdjustableTimestep.  # noqa: E501

        This option defines a maximum time step length which may not be exceeded when the time step is adapted during runtime.  # noqa: E501

        :return: The maximal_step of this ActiveAdjustableTimestep.  # noqa: E501
        :rtype: float
        """
        return self._maximal_step

    @maximal_step.setter
    def maximal_step(self, maximal_step):
        """Sets the maximal_step of this ActiveAdjustableTimestep.

        This option defines a maximum time step length which may not be exceeded when the time step is adapted during runtime.  # noqa: E501

        :param maximal_step: The maximal_step of this ActiveAdjustableTimestep.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                maximal_step is not None and maximal_step <= 0):  # noqa: E501
            raise ValueError("Invalid value for `maximal_step`, must be a value greater than `0`")  # noqa: E501

        self._maximal_step = maximal_step

    @property
    def max_alpha_co(self):
        """Gets the max_alpha_co of this ActiveAdjustableTimestep.  # noqa: E501

        Define a maximum Courant number based on the interface velocity.  # noqa: E501

        :return: The max_alpha_co of this ActiveAdjustableTimestep.  # noqa: E501
        :rtype: float
        """
        return self._max_alpha_co

    @max_alpha_co.setter
    def max_alpha_co(self, max_alpha_co):
        """Sets the max_alpha_co of this ActiveAdjustableTimestep.

        Define a maximum Courant number based on the interface velocity.  # noqa: E501

        :param max_alpha_co: The max_alpha_co of this ActiveAdjustableTimestep.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                max_alpha_co is not None and max_alpha_co < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_alpha_co`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_alpha_co = max_alpha_co

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveAdjustableTimestep):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActiveAdjustableTimestep):
            return True

        return self.to_dict() != other.to_dict()
