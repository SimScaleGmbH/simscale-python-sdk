# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SpacePermissions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'can_list_content_in_root': 'bool',
        'can_create_content_in_root': 'bool',
        'can_move_content_to_root': 'bool',
        'can_move_content_out_of_root': 'bool',
        'can_edit_space_metadata': 'bool',
        'can_edit_space_settings': 'bool',
        'can_edit_space_permissions': 'bool',
        'can_delete_space': 'bool'
    }

    attribute_map = {
        'can_list_content_in_root': 'canListContentInRoot',
        'can_create_content_in_root': 'canCreateContentInRoot',
        'can_move_content_to_root': 'canMoveContentToRoot',
        'can_move_content_out_of_root': 'canMoveContentOutOfRoot',
        'can_edit_space_metadata': 'canEditSpaceMetadata',
        'can_edit_space_settings': 'canEditSpaceSettings',
        'can_edit_space_permissions': 'canEditSpacePermissions',
        'can_delete_space': 'canDeleteSpace'
    }

    def __init__(self, can_list_content_in_root=None, can_create_content_in_root=None, can_move_content_to_root=None, can_move_content_out_of_root=None, can_edit_space_metadata=None, can_edit_space_settings=None, can_edit_space_permissions=None, can_delete_space=None, local_vars_configuration=None):  # noqa: E501
        """SpacePermissions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._can_list_content_in_root = None
        self._can_create_content_in_root = None
        self._can_move_content_to_root = None
        self._can_move_content_out_of_root = None
        self._can_edit_space_metadata = None
        self._can_edit_space_settings = None
        self._can_edit_space_permissions = None
        self._can_delete_space = None
        self.discriminator = None

        if can_list_content_in_root is not None:
            self.can_list_content_in_root = can_list_content_in_root
        if can_create_content_in_root is not None:
            self.can_create_content_in_root = can_create_content_in_root
        if can_move_content_to_root is not None:
            self.can_move_content_to_root = can_move_content_to_root
        if can_move_content_out_of_root is not None:
            self.can_move_content_out_of_root = can_move_content_out_of_root
        if can_edit_space_metadata is not None:
            self.can_edit_space_metadata = can_edit_space_metadata
        if can_edit_space_settings is not None:
            self.can_edit_space_settings = can_edit_space_settings
        if can_edit_space_permissions is not None:
            self.can_edit_space_permissions = can_edit_space_permissions
        if can_delete_space is not None:
            self.can_delete_space = can_delete_space

    @property
    def can_list_content_in_root(self):
        """Gets the can_list_content_in_root of this SpacePermissions.  # noqa: E501

        Whether the current user can list the contents of the root of this Space.  # noqa: E501

        :return: The can_list_content_in_root of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_list_content_in_root

    @can_list_content_in_root.setter
    def can_list_content_in_root(self, can_list_content_in_root):
        """Sets the can_list_content_in_root of this SpacePermissions.

        Whether the current user can list the contents of the root of this Space.  # noqa: E501

        :param can_list_content_in_root: The can_list_content_in_root of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_list_content_in_root = can_list_content_in_root

    @property
    def can_create_content_in_root(self):
        """Gets the can_create_content_in_root of this SpacePermissions.  # noqa: E501

        Whether the current user can create new content in the root of this Space.  # noqa: E501

        :return: The can_create_content_in_root of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_content_in_root

    @can_create_content_in_root.setter
    def can_create_content_in_root(self, can_create_content_in_root):
        """Sets the can_create_content_in_root of this SpacePermissions.

        Whether the current user can create new content in the root of this Space.  # noqa: E501

        :param can_create_content_in_root: The can_create_content_in_root of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_create_content_in_root = can_create_content_in_root

    @property
    def can_move_content_to_root(self):
        """Gets the can_move_content_to_root of this SpacePermissions.  # noqa: E501

        Whether the current user can move content into the root folder of this Space.  # noqa: E501

        :return: The can_move_content_to_root of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_move_content_to_root

    @can_move_content_to_root.setter
    def can_move_content_to_root(self, can_move_content_to_root):
        """Sets the can_move_content_to_root of this SpacePermissions.

        Whether the current user can move content into the root folder of this Space.  # noqa: E501

        :param can_move_content_to_root: The can_move_content_to_root of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_move_content_to_root = can_move_content_to_root

    @property
    def can_move_content_out_of_root(self):
        """Gets the can_move_content_out_of_root of this SpacePermissions.  # noqa: E501

        Whether the current user can move content out of the root folder of this Space.  # noqa: E501

        :return: The can_move_content_out_of_root of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_move_content_out_of_root

    @can_move_content_out_of_root.setter
    def can_move_content_out_of_root(self, can_move_content_out_of_root):
        """Sets the can_move_content_out_of_root of this SpacePermissions.

        Whether the current user can move content out of the root folder of this Space.  # noqa: E501

        :param can_move_content_out_of_root: The can_move_content_out_of_root of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_move_content_out_of_root = can_move_content_out_of_root

    @property
    def can_edit_space_metadata(self):
        """Gets the can_edit_space_metadata of this SpacePermissions.  # noqa: E501

        Whether the current user can edit the metadata of this Space.  # noqa: E501

        :return: The can_edit_space_metadata of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_space_metadata

    @can_edit_space_metadata.setter
    def can_edit_space_metadata(self, can_edit_space_metadata):
        """Sets the can_edit_space_metadata of this SpacePermissions.

        Whether the current user can edit the metadata of this Space.  # noqa: E501

        :param can_edit_space_metadata: The can_edit_space_metadata of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_edit_space_metadata = can_edit_space_metadata

    @property
    def can_edit_space_settings(self):
        """Gets the can_edit_space_settings of this SpacePermissions.  # noqa: E501

        Whether the current user can edit the settings of this Space.  # noqa: E501

        :return: The can_edit_space_settings of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_space_settings

    @can_edit_space_settings.setter
    def can_edit_space_settings(self, can_edit_space_settings):
        """Sets the can_edit_space_settings of this SpacePermissions.

        Whether the current user can edit the settings of this Space.  # noqa: E501

        :param can_edit_space_settings: The can_edit_space_settings of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_edit_space_settings = can_edit_space_settings

    @property
    def can_edit_space_permissions(self):
        """Gets the can_edit_space_permissions of this SpacePermissions.  # noqa: E501

        Whether the current user can add or remove users to this Space.  # noqa: E501

        :return: The can_edit_space_permissions of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_space_permissions

    @can_edit_space_permissions.setter
    def can_edit_space_permissions(self, can_edit_space_permissions):
        """Sets the can_edit_space_permissions of this SpacePermissions.

        Whether the current user can add or remove users to this Space.  # noqa: E501

        :param can_edit_space_permissions: The can_edit_space_permissions of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_edit_space_permissions = can_edit_space_permissions

    @property
    def can_delete_space(self):
        """Gets the can_delete_space of this SpacePermissions.  # noqa: E501

        Whether the current user can delete this Space.  # noqa: E501

        :return: The can_delete_space of this SpacePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_space

    @can_delete_space.setter
    def can_delete_space(self, can_delete_space):
        """Sets the can_delete_space of this SpacePermissions.

        Whether the current user can delete this Space.  # noqa: E501

        :param can_delete_space: The can_delete_space of this SpacePermissions.  # noqa: E501
        :type: bool
        """

        self._can_delete_space = can_delete_space

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpacePermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpacePermissions):
            return True

        return self.to_dict() != other.to_dict()
