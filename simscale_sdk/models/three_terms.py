# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ThreeTerms(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'modulus1': 'DimensionalPressure',
        'exponent1': 'float',
        'modulus2': 'DimensionalPressure',
        'exponent2': 'float',
        'modulus3': 'DimensionalPressure',
        'exponent3': 'float'
    }

    attribute_map = {
        'type': 'type',
        'modulus1': 'modulus1',
        'exponent1': 'exponent1',
        'modulus2': 'modulus2',
        'exponent2': 'exponent2',
        'modulus3': 'modulus3',
        'exponent3': 'exponent3'
    }

    def __init__(self, type='THREE_TERMS', modulus1=None, exponent1=None, modulus2=None, exponent2=None, modulus3=None, exponent3=None, local_vars_configuration=None):  # noqa: E501
        """ThreeTerms - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._modulus1 = None
        self._exponent1 = None
        self._modulus2 = None
        self._exponent2 = None
        self._modulus3 = None
        self._exponent3 = None
        self.discriminator = None

        self.type = type
        if modulus1 is not None:
            self.modulus1 = modulus1
        if exponent1 is not None:
            self.exponent1 = exponent1
        if modulus2 is not None:
            self.modulus2 = modulus2
        if exponent2 is not None:
            self.exponent2 = exponent2
        if modulus3 is not None:
            self.modulus3 = modulus3
        if exponent3 is not None:
            self.exponent3 = exponent3

    @property
    def type(self):
        """Gets the type of this ThreeTerms.  # noqa: E501

        Schema name: ThreeTerms  # noqa: E501

        :return: The type of this ThreeTerms.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThreeTerms.

        Schema name: ThreeTerms  # noqa: E501

        :param type: The type of this ThreeTerms.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def modulus1(self):
        """Gets the modulus1 of this ThreeTerms.  # noqa: E501


        :return: The modulus1 of this ThreeTerms.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._modulus1

    @modulus1.setter
    def modulus1(self, modulus1):
        """Sets the modulus1 of this ThreeTerms.


        :param modulus1: The modulus1 of this ThreeTerms.  # noqa: E501
        :type: DimensionalPressure
        """

        self._modulus1 = modulus1

    @property
    def exponent1(self):
        """Gets the exponent1 of this ThreeTerms.  # noqa: E501


        :return: The exponent1 of this ThreeTerms.  # noqa: E501
        :rtype: float
        """
        return self._exponent1

    @exponent1.setter
    def exponent1(self, exponent1):
        """Sets the exponent1 of this ThreeTerms.


        :param exponent1: The exponent1 of this ThreeTerms.  # noqa: E501
        :type: float
        """

        self._exponent1 = exponent1

    @property
    def modulus2(self):
        """Gets the modulus2 of this ThreeTerms.  # noqa: E501


        :return: The modulus2 of this ThreeTerms.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._modulus2

    @modulus2.setter
    def modulus2(self, modulus2):
        """Sets the modulus2 of this ThreeTerms.


        :param modulus2: The modulus2 of this ThreeTerms.  # noqa: E501
        :type: DimensionalPressure
        """

        self._modulus2 = modulus2

    @property
    def exponent2(self):
        """Gets the exponent2 of this ThreeTerms.  # noqa: E501


        :return: The exponent2 of this ThreeTerms.  # noqa: E501
        :rtype: float
        """
        return self._exponent2

    @exponent2.setter
    def exponent2(self, exponent2):
        """Sets the exponent2 of this ThreeTerms.


        :param exponent2: The exponent2 of this ThreeTerms.  # noqa: E501
        :type: float
        """

        self._exponent2 = exponent2

    @property
    def modulus3(self):
        """Gets the modulus3 of this ThreeTerms.  # noqa: E501


        :return: The modulus3 of this ThreeTerms.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._modulus3

    @modulus3.setter
    def modulus3(self, modulus3):
        """Sets the modulus3 of this ThreeTerms.


        :param modulus3: The modulus3 of this ThreeTerms.  # noqa: E501
        :type: DimensionalPressure
        """

        self._modulus3 = modulus3

    @property
    def exponent3(self):
        """Gets the exponent3 of this ThreeTerms.  # noqa: E501


        :return: The exponent3 of this ThreeTerms.  # noqa: E501
        :rtype: float
        """
        return self._exponent3

    @exponent3.setter
    def exponent3(self, exponent3):
        """Sets the exponent3 of this ThreeTerms.


        :param exponent3: The exponent3 of this ThreeTerms.  # noqa: E501
        :type: float
        """

        self._exponent3 = exponent3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreeTerms):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThreeTerms):
            return True

        return self.to_dict() != other.to_dict()
