# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class IncompressiblePacefish(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'bounding_box_uuid': 'str',
        'turbulence_model': 'str',
        'material': 'IncompressibleMaterial',
        'flow_domain_boundaries': 'FlowDomainBoundaries',
        'simulation_control': 'FluidSimulationControl',
        'advanced_modelling': 'AdvancedModelling',
        'result_control': 'FluidResultControls',
        'mesh_settings_new': 'OneOfIncompressiblePacefishMeshSettingsNew'
    }

    attribute_map = {
        'type': 'type',
        'bounding_box_uuid': 'boundingBoxUuid',
        'turbulence_model': 'turbulenceModel',
        'material': 'material',
        'flow_domain_boundaries': 'flowDomainBoundaries',
        'simulation_control': 'simulationControl',
        'advanced_modelling': 'advancedModelling',
        'result_control': 'resultControl',
        'mesh_settings_new': 'meshSettingsNew'
    }

    def __init__(self, type='INCOMPRESSIBLE_PACEFISH', bounding_box_uuid=None, turbulence_model=None, material=None, flow_domain_boundaries=None, simulation_control=None, advanced_modelling=None, result_control=None, mesh_settings_new=None, local_vars_configuration=None):  # noqa: E501
        """IncompressiblePacefish - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._bounding_box_uuid = None
        self._turbulence_model = None
        self._material = None
        self._flow_domain_boundaries = None
        self._simulation_control = None
        self._advanced_modelling = None
        self._result_control = None
        self._mesh_settings_new = None
        self.discriminator = None

        self.type = type
        if bounding_box_uuid is not None:
            self.bounding_box_uuid = bounding_box_uuid
        if turbulence_model is not None:
            self.turbulence_model = turbulence_model
        if material is not None:
            self.material = material
        if flow_domain_boundaries is not None:
            self.flow_domain_boundaries = flow_domain_boundaries
        if simulation_control is not None:
            self.simulation_control = simulation_control
        if advanced_modelling is not None:
            self.advanced_modelling = advanced_modelling
        if result_control is not None:
            self.result_control = result_control
        if mesh_settings_new is not None:
            self.mesh_settings_new = mesh_settings_new

    @property
    def type(self):
        """Gets the type of this IncompressiblePacefish.  # noqa: E501

        Schema name: IncompressiblePacefish  # noqa: E501

        :return: The type of this IncompressiblePacefish.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IncompressiblePacefish.

        Schema name: IncompressiblePacefish  # noqa: E501

        :param type: The type of this IncompressiblePacefish.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def bounding_box_uuid(self):
        """Gets the bounding_box_uuid of this IncompressiblePacefish.  # noqa: E501


        :return: The bounding_box_uuid of this IncompressiblePacefish.  # noqa: E501
        :rtype: str
        """
        return self._bounding_box_uuid

    @bounding_box_uuid.setter
    def bounding_box_uuid(self, bounding_box_uuid):
        """Sets the bounding_box_uuid of this IncompressiblePacefish.


        :param bounding_box_uuid: The bounding_box_uuid of this IncompressiblePacefish.  # noqa: E501
        :type: str
        """

        self._bounding_box_uuid = bounding_box_uuid

    @property
    def turbulence_model(self):
        """Gets the turbulence_model of this IncompressiblePacefish.  # noqa: E501

        Choose between RANS, LES, or DES turbulence models. <a href='https://www.simscale.com/docs/incompressible-lbm-lattice-boltzmann-advanced/#turbulence-models-in-incompressible-lbm' target='_blank'>Learn more</a>.  # noqa: E501

        :return: The turbulence_model of this IncompressiblePacefish.  # noqa: E501
        :rtype: str
        """
        return self._turbulence_model

    @turbulence_model.setter
    def turbulence_model(self, turbulence_model):
        """Sets the turbulence_model of this IncompressiblePacefish.

        Choose between RANS, LES, or DES turbulence models. <a href='https://www.simscale.com/docs/incompressible-lbm-lattice-boltzmann-advanced/#turbulence-models-in-incompressible-lbm' target='_blank'>Learn more</a>.  # noqa: E501

        :param turbulence_model: The turbulence_model of this IncompressiblePacefish.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMAGORINSKY", "SMAGORINSKY_DIRECT", "NONE", "KOMEGASST", "KOMEGASST_DDES", "KOMEGASST_IDDES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and turbulence_model not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `turbulence_model` ({0}), must be one of {1}"  # noqa: E501
                .format(turbulence_model, allowed_values)
            )

        self._turbulence_model = turbulence_model

    @property
    def material(self):
        """Gets the material of this IncompressiblePacefish.  # noqa: E501


        :return: The material of this IncompressiblePacefish.  # noqa: E501
        :rtype: IncompressibleMaterial
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this IncompressiblePacefish.


        :param material: The material of this IncompressiblePacefish.  # noqa: E501
        :type: IncompressibleMaterial
        """

        self._material = material

    @property
    def flow_domain_boundaries(self):
        """Gets the flow_domain_boundaries of this IncompressiblePacefish.  # noqa: E501


        :return: The flow_domain_boundaries of this IncompressiblePacefish.  # noqa: E501
        :rtype: FlowDomainBoundaries
        """
        return self._flow_domain_boundaries

    @flow_domain_boundaries.setter
    def flow_domain_boundaries(self, flow_domain_boundaries):
        """Sets the flow_domain_boundaries of this IncompressiblePacefish.


        :param flow_domain_boundaries: The flow_domain_boundaries of this IncompressiblePacefish.  # noqa: E501
        :type: FlowDomainBoundaries
        """

        self._flow_domain_boundaries = flow_domain_boundaries

    @property
    def simulation_control(self):
        """Gets the simulation_control of this IncompressiblePacefish.  # noqa: E501


        :return: The simulation_control of this IncompressiblePacefish.  # noqa: E501
        :rtype: FluidSimulationControl
        """
        return self._simulation_control

    @simulation_control.setter
    def simulation_control(self, simulation_control):
        """Sets the simulation_control of this IncompressiblePacefish.


        :param simulation_control: The simulation_control of this IncompressiblePacefish.  # noqa: E501
        :type: FluidSimulationControl
        """

        self._simulation_control = simulation_control

    @property
    def advanced_modelling(self):
        """Gets the advanced_modelling of this IncompressiblePacefish.  # noqa: E501


        :return: The advanced_modelling of this IncompressiblePacefish.  # noqa: E501
        :rtype: AdvancedModelling
        """
        return self._advanced_modelling

    @advanced_modelling.setter
    def advanced_modelling(self, advanced_modelling):
        """Sets the advanced_modelling of this IncompressiblePacefish.


        :param advanced_modelling: The advanced_modelling of this IncompressiblePacefish.  # noqa: E501
        :type: AdvancedModelling
        """

        self._advanced_modelling = advanced_modelling

    @property
    def result_control(self):
        """Gets the result_control of this IncompressiblePacefish.  # noqa: E501


        :return: The result_control of this IncompressiblePacefish.  # noqa: E501
        :rtype: FluidResultControls
        """
        return self._result_control

    @result_control.setter
    def result_control(self, result_control):
        """Sets the result_control of this IncompressiblePacefish.


        :param result_control: The result_control of this IncompressiblePacefish.  # noqa: E501
        :type: FluidResultControls
        """

        self._result_control = result_control

    @property
    def mesh_settings_new(self):
        """Gets the mesh_settings_new of this IncompressiblePacefish.  # noqa: E501


        :return: The mesh_settings_new of this IncompressiblePacefish.  # noqa: E501
        :rtype: OneOfIncompressiblePacefishMeshSettingsNew
        """
        return self._mesh_settings_new

    @mesh_settings_new.setter
    def mesh_settings_new(self, mesh_settings_new):
        """Sets the mesh_settings_new of this IncompressiblePacefish.


        :param mesh_settings_new: The mesh_settings_new of this IncompressiblePacefish.  # noqa: E501
        :type: OneOfIncompressiblePacefishMeshSettingsNew
        """

        self._mesh_settings_new = mesh_settings_new

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncompressiblePacefish):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IncompressiblePacefish):
            return True

        return self.to_dict() != other.to_dict()
