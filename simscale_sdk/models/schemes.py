# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class Schemes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'flux': 'FluxSchemes',
        'time_differentiation': 'TimeDifferentiationSchemes',
        'gradient': 'GradientSchemes',
        'divergence': 'DivergenceSchemes',
        'laplacian': 'LaplacianSchemes',
        'interpolation': 'InterpolationSchemes',
        'surface_normal_gradient': 'SurfaceNormalGradientSchemes',
        'second_order_convection': 'bool'
    }

    attribute_map = {
        'flux': 'flux',
        'time_differentiation': 'timeDifferentiation',
        'gradient': 'gradient',
        'divergence': 'divergence',
        'laplacian': 'laplacian',
        'interpolation': 'interpolation',
        'surface_normal_gradient': 'surfaceNormalGradient',
        'second_order_convection': 'secondOrderConvection'
    }

    def __init__(self, flux=None, time_differentiation=None, gradient=None, divergence=None, laplacian=None, interpolation=None, surface_normal_gradient=None, second_order_convection=None, local_vars_configuration=None):  # noqa: E501
        """Schemes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._flux = None
        self._time_differentiation = None
        self._gradient = None
        self._divergence = None
        self._laplacian = None
        self._interpolation = None
        self._surface_normal_gradient = None
        self._second_order_convection = None
        self.discriminator = None

        if flux is not None:
            self.flux = flux
        if time_differentiation is not None:
            self.time_differentiation = time_differentiation
        if gradient is not None:
            self.gradient = gradient
        if divergence is not None:
            self.divergence = divergence
        if laplacian is not None:
            self.laplacian = laplacian
        if interpolation is not None:
            self.interpolation = interpolation
        if surface_normal_gradient is not None:
            self.surface_normal_gradient = surface_normal_gradient
        if second_order_convection is not None:
            self.second_order_convection = second_order_convection

    @property
    def flux(self):
        """Gets the flux of this Schemes.  # noqa: E501


        :return: The flux of this Schemes.  # noqa: E501
        :rtype: FluxSchemes
        """
        return self._flux

    @flux.setter
    def flux(self, flux):
        """Sets the flux of this Schemes.


        :param flux: The flux of this Schemes.  # noqa: E501
        :type: FluxSchemes
        """

        self._flux = flux

    @property
    def time_differentiation(self):
        """Gets the time_differentiation of this Schemes.  # noqa: E501


        :return: The time_differentiation of this Schemes.  # noqa: E501
        :rtype: TimeDifferentiationSchemes
        """
        return self._time_differentiation

    @time_differentiation.setter
    def time_differentiation(self, time_differentiation):
        """Sets the time_differentiation of this Schemes.


        :param time_differentiation: The time_differentiation of this Schemes.  # noqa: E501
        :type: TimeDifferentiationSchemes
        """

        self._time_differentiation = time_differentiation

    @property
    def gradient(self):
        """Gets the gradient of this Schemes.  # noqa: E501


        :return: The gradient of this Schemes.  # noqa: E501
        :rtype: GradientSchemes
        """
        return self._gradient

    @gradient.setter
    def gradient(self, gradient):
        """Sets the gradient of this Schemes.


        :param gradient: The gradient of this Schemes.  # noqa: E501
        :type: GradientSchemes
        """

        self._gradient = gradient

    @property
    def divergence(self):
        """Gets the divergence of this Schemes.  # noqa: E501


        :return: The divergence of this Schemes.  # noqa: E501
        :rtype: DivergenceSchemes
        """
        return self._divergence

    @divergence.setter
    def divergence(self, divergence):
        """Sets the divergence of this Schemes.


        :param divergence: The divergence of this Schemes.  # noqa: E501
        :type: DivergenceSchemes
        """

        self._divergence = divergence

    @property
    def laplacian(self):
        """Gets the laplacian of this Schemes.  # noqa: E501


        :return: The laplacian of this Schemes.  # noqa: E501
        :rtype: LaplacianSchemes
        """
        return self._laplacian

    @laplacian.setter
    def laplacian(self, laplacian):
        """Sets the laplacian of this Schemes.


        :param laplacian: The laplacian of this Schemes.  # noqa: E501
        :type: LaplacianSchemes
        """

        self._laplacian = laplacian

    @property
    def interpolation(self):
        """Gets the interpolation of this Schemes.  # noqa: E501


        :return: The interpolation of this Schemes.  # noqa: E501
        :rtype: InterpolationSchemes
        """
        return self._interpolation

    @interpolation.setter
    def interpolation(self, interpolation):
        """Sets the interpolation of this Schemes.


        :param interpolation: The interpolation of this Schemes.  # noqa: E501
        :type: InterpolationSchemes
        """

        self._interpolation = interpolation

    @property
    def surface_normal_gradient(self):
        """Gets the surface_normal_gradient of this Schemes.  # noqa: E501


        :return: The surface_normal_gradient of this Schemes.  # noqa: E501
        :rtype: SurfaceNormalGradientSchemes
        """
        return self._surface_normal_gradient

    @surface_normal_gradient.setter
    def surface_normal_gradient(self, surface_normal_gradient):
        """Sets the surface_normal_gradient of this Schemes.


        :param surface_normal_gradient: The surface_normal_gradient of this Schemes.  # noqa: E501
        :type: SurfaceNormalGradientSchemes
        """

        self._surface_normal_gradient = surface_normal_gradient

    @property
    def second_order_convection(self):
        """Gets the second_order_convection of this Schemes.  # noqa: E501

        Whether to use second-order convection scheme, which is less stable but more accurate for a given mesh. If false, first-order accurate upwind scheme is used.  # noqa: E501

        :return: The second_order_convection of this Schemes.  # noqa: E501
        :rtype: bool
        """
        return self._second_order_convection

    @second_order_convection.setter
    def second_order_convection(self, second_order_convection):
        """Sets the second_order_convection of this Schemes.

        Whether to use second-order convection scheme, which is less stable but more accurate for a given mesh. If false, first-order accurate upwind scheme is used.  # noqa: E501

        :param second_order_convection: The second_order_convection of this Schemes.  # noqa: E501
        :type: bool
        """

        self._second_order_convection = second_order_convection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schemes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Schemes):
            return True

        return self.to_dict() != other.to_dict()
