# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FlowDomainBoundaries(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'xmin': 'OneOfFlowDomainBoundariesXMIN',
        'xmax': 'OneOfFlowDomainBoundariesXMAX',
        'ymin': 'OneOfFlowDomainBoundariesYMIN',
        'ymax': 'OneOfFlowDomainBoundariesYMAX',
        'zmin': 'OneOfFlowDomainBoundariesZMIN',
        'zmax': 'OneOfFlowDomainBoundariesZMAX'
    }

    attribute_map = {
        'xmin': 'XMIN',
        'xmax': 'XMAX',
        'ymin': 'YMIN',
        'ymax': 'YMAX',
        'zmin': 'ZMIN',
        'zmax': 'ZMAX'
    }

    def __init__(self, xmin=None, xmax=None, ymin=None, ymax=None, zmin=None, zmax=None, local_vars_configuration=None):  # noqa: E501
        """FlowDomainBoundaries - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._xmin = None
        self._xmax = None
        self._ymin = None
        self._ymax = None
        self._zmin = None
        self._zmax = None
        self.discriminator = None

        if xmin is not None:
            self.xmin = xmin
        if xmax is not None:
            self.xmax = xmax
        if ymin is not None:
            self.ymin = ymin
        if ymax is not None:
            self.ymax = ymax
        if zmin is not None:
            self.zmin = zmin
        if zmax is not None:
            self.zmax = zmax

    @property
    def xmin(self):
        """Gets the xmin of this FlowDomainBoundaries.  # noqa: E501


        :return: The xmin of this FlowDomainBoundaries.  # noqa: E501
        :rtype: OneOfFlowDomainBoundariesXMIN
        """
        return self._xmin

    @xmin.setter
    def xmin(self, xmin):
        """Sets the xmin of this FlowDomainBoundaries.


        :param xmin: The xmin of this FlowDomainBoundaries.  # noqa: E501
        :type: OneOfFlowDomainBoundariesXMIN
        """

        self._xmin = xmin

    @property
    def xmax(self):
        """Gets the xmax of this FlowDomainBoundaries.  # noqa: E501


        :return: The xmax of this FlowDomainBoundaries.  # noqa: E501
        :rtype: OneOfFlowDomainBoundariesXMAX
        """
        return self._xmax

    @xmax.setter
    def xmax(self, xmax):
        """Sets the xmax of this FlowDomainBoundaries.


        :param xmax: The xmax of this FlowDomainBoundaries.  # noqa: E501
        :type: OneOfFlowDomainBoundariesXMAX
        """

        self._xmax = xmax

    @property
    def ymin(self):
        """Gets the ymin of this FlowDomainBoundaries.  # noqa: E501


        :return: The ymin of this FlowDomainBoundaries.  # noqa: E501
        :rtype: OneOfFlowDomainBoundariesYMIN
        """
        return self._ymin

    @ymin.setter
    def ymin(self, ymin):
        """Sets the ymin of this FlowDomainBoundaries.


        :param ymin: The ymin of this FlowDomainBoundaries.  # noqa: E501
        :type: OneOfFlowDomainBoundariesYMIN
        """

        self._ymin = ymin

    @property
    def ymax(self):
        """Gets the ymax of this FlowDomainBoundaries.  # noqa: E501


        :return: The ymax of this FlowDomainBoundaries.  # noqa: E501
        :rtype: OneOfFlowDomainBoundariesYMAX
        """
        return self._ymax

    @ymax.setter
    def ymax(self, ymax):
        """Sets the ymax of this FlowDomainBoundaries.


        :param ymax: The ymax of this FlowDomainBoundaries.  # noqa: E501
        :type: OneOfFlowDomainBoundariesYMAX
        """

        self._ymax = ymax

    @property
    def zmin(self):
        """Gets the zmin of this FlowDomainBoundaries.  # noqa: E501


        :return: The zmin of this FlowDomainBoundaries.  # noqa: E501
        :rtype: OneOfFlowDomainBoundariesZMIN
        """
        return self._zmin

    @zmin.setter
    def zmin(self, zmin):
        """Sets the zmin of this FlowDomainBoundaries.


        :param zmin: The zmin of this FlowDomainBoundaries.  # noqa: E501
        :type: OneOfFlowDomainBoundariesZMIN
        """

        self._zmin = zmin

    @property
    def zmax(self):
        """Gets the zmax of this FlowDomainBoundaries.  # noqa: E501


        :return: The zmax of this FlowDomainBoundaries.  # noqa: E501
        :rtype: OneOfFlowDomainBoundariesZMAX
        """
        return self._zmax

    @zmax.setter
    def zmax(self, zmax):
        """Sets the zmax of this FlowDomainBoundaries.


        :param zmax: The zmax of this FlowDomainBoundaries.  # noqa: E501
        :type: OneOfFlowDomainBoundariesZMAX
        """

        self._zmax = zmax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowDomainBoundaries):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FlowDomainBoundaries):
            return True

        return self.to_dict() != other.to_dict()
