# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfFluidCompressibleMaterialTransport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'dynamic_viscosity': 'DimensionalDynamicViscosity',
        'dynamic_viscosity_function': 'DimensionalFunctionDynamicViscosity',
        'prandtl_number': 'float',
        'turbulent_prandtl_number': 'float',
        'thermo': 'HConstThermo',
        'reference_viscosity': 'DimensionalDynamicViscosity',
        'reference_temperature': 'DimensionalTemperature',
        'ts': 'DimensionalTemperature',
        'viscosity_model': 'StandardHerschelBulkleyViscosityModel'
    }

    attribute_map = {
        'type': 'type',
        'dynamic_viscosity': 'dynamicViscosity',
        'dynamic_viscosity_function': 'dynamicViscosityFunction',
        'prandtl_number': 'prandtlNumber',
        'turbulent_prandtl_number': 'turbulentPrandtlNumber',
        'thermo': 'thermo',
        'reference_viscosity': 'referenceViscosity',
        'reference_temperature': 'referenceTemperature',
        'ts': 'ts',
        'viscosity_model': 'viscosityModel'
    }

    discriminator_value_class_map = {
        'CONST': 'ConstTransport',
        'SUTHERLAND': 'SutherlandTransport',
        'HERSCHEL_BULKLEY': 'HerschelBulkleyTransport'
    }

    def __init__(self, type='HERSCHEL_BULKLEY', dynamic_viscosity=None, dynamic_viscosity_function=None, prandtl_number=None, turbulent_prandtl_number=None, thermo=None, reference_viscosity=None, reference_temperature=None, ts=None, viscosity_model=None, local_vars_configuration=None):  # noqa: E501
        """OneOfFluidCompressibleMaterialTransport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._dynamic_viscosity = None
        self._dynamic_viscosity_function = None
        self._prandtl_number = None
        self._turbulent_prandtl_number = None
        self._thermo = None
        self._reference_viscosity = None
        self._reference_temperature = None
        self._ts = None
        self._viscosity_model = None
        self.discriminator = 'type'

        self.type = type
        if dynamic_viscosity is not None:
            self.dynamic_viscosity = dynamic_viscosity
        if dynamic_viscosity_function is not None:
            self.dynamic_viscosity_function = dynamic_viscosity_function
        if prandtl_number is not None:
            self.prandtl_number = prandtl_number
        if turbulent_prandtl_number is not None:
            self.turbulent_prandtl_number = turbulent_prandtl_number
        if thermo is not None:
            self.thermo = thermo
        if reference_viscosity is not None:
            self.reference_viscosity = reference_viscosity
        if reference_temperature is not None:
            self.reference_temperature = reference_temperature
        if ts is not None:
            self.ts = ts
        if viscosity_model is not None:
            self.viscosity_model = viscosity_model

    @property
    def type(self):
        """Gets the type of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501

        Schema name: HerschelBulkleyTransport  # noqa: E501

        :return: The type of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfFluidCompressibleMaterialTransport.

        Schema name: HerschelBulkleyTransport  # noqa: E501

        :param type: The type of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def dynamic_viscosity(self):
        """Gets the dynamic_viscosity of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501


        :return: The dynamic_viscosity of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: DimensionalDynamicViscosity
        """
        return self._dynamic_viscosity

    @dynamic_viscosity.setter
    def dynamic_viscosity(self, dynamic_viscosity):
        """Sets the dynamic_viscosity of this OneOfFluidCompressibleMaterialTransport.


        :param dynamic_viscosity: The dynamic_viscosity of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: DimensionalDynamicViscosity
        """

        self._dynamic_viscosity = dynamic_viscosity

    @property
    def dynamic_viscosity_function(self):
        """Gets the dynamic_viscosity_function of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501


        :return: The dynamic_viscosity_function of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: DimensionalFunctionDynamicViscosity
        """
        return self._dynamic_viscosity_function

    @dynamic_viscosity_function.setter
    def dynamic_viscosity_function(self, dynamic_viscosity_function):
        """Sets the dynamic_viscosity_function of this OneOfFluidCompressibleMaterialTransport.


        :param dynamic_viscosity_function: The dynamic_viscosity_function of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: DimensionalFunctionDynamicViscosity
        """

        self._dynamic_viscosity_function = dynamic_viscosity_function

    @property
    def prandtl_number(self):
        """Gets the prandtl_number of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501

        Prandtl number (<i>Pr</i>) is the ratio of momentum transport to thermal tranport. Fluids with low <i>Pr</i> are free flowing and good for heat conduction.  # noqa: E501

        :return: The prandtl_number of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: float
        """
        return self._prandtl_number

    @prandtl_number.setter
    def prandtl_number(self, prandtl_number):
        """Sets the prandtl_number of this OneOfFluidCompressibleMaterialTransport.

        Prandtl number (<i>Pr</i>) is the ratio of momentum transport to thermal tranport. Fluids with low <i>Pr</i> are free flowing and good for heat conduction.  # noqa: E501

        :param prandtl_number: The prandtl_number of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                prandtl_number is not None and prandtl_number <= 0):  # noqa: E501
            raise ValueError("Invalid value for `prandtl_number`, must be a value greater than `0`")  # noqa: E501

        self._prandtl_number = prandtl_number

    @property
    def turbulent_prandtl_number(self):
        """Gets the turbulent_prandtl_number of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501

        Turbulent Prandtl number is used to calculate the heat transfer due to turbulent effects in the domain.  # noqa: E501

        :return: The turbulent_prandtl_number of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: float
        """
        return self._turbulent_prandtl_number

    @turbulent_prandtl_number.setter
    def turbulent_prandtl_number(self, turbulent_prandtl_number):
        """Sets the turbulent_prandtl_number of this OneOfFluidCompressibleMaterialTransport.

        Turbulent Prandtl number is used to calculate the heat transfer due to turbulent effects in the domain.  # noqa: E501

        :param turbulent_prandtl_number: The turbulent_prandtl_number of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                turbulent_prandtl_number is not None and turbulent_prandtl_number <= 0):  # noqa: E501
            raise ValueError("Invalid value for `turbulent_prandtl_number`, must be a value greater than `0`")  # noqa: E501

        self._turbulent_prandtl_number = turbulent_prandtl_number

    @property
    def thermo(self):
        """Gets the thermo of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501


        :return: The thermo of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: HConstThermo
        """
        return self._thermo

    @thermo.setter
    def thermo(self, thermo):
        """Sets the thermo of this OneOfFluidCompressibleMaterialTransport.


        :param thermo: The thermo of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: HConstThermo
        """

        self._thermo = thermo

    @property
    def reference_viscosity(self):
        """Gets the reference_viscosity of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501


        :return: The reference_viscosity of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: DimensionalDynamicViscosity
        """
        return self._reference_viscosity

    @reference_viscosity.setter
    def reference_viscosity(self, reference_viscosity):
        """Sets the reference_viscosity of this OneOfFluidCompressibleMaterialTransport.


        :param reference_viscosity: The reference_viscosity of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: DimensionalDynamicViscosity
        """

        self._reference_viscosity = reference_viscosity

    @property
    def reference_temperature(self):
        """Gets the reference_temperature of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501


        :return: The reference_temperature of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._reference_temperature

    @reference_temperature.setter
    def reference_temperature(self, reference_temperature):
        """Sets the reference_temperature of this OneOfFluidCompressibleMaterialTransport.


        :param reference_temperature: The reference_temperature of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._reference_temperature = reference_temperature

    @property
    def ts(self):
        """Gets the ts of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501


        :return: The ts of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this OneOfFluidCompressibleMaterialTransport.


        :param ts: The ts of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._ts = ts

    @property
    def viscosity_model(self):
        """Gets the viscosity_model of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501


        :return: The viscosity_model of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :rtype: StandardHerschelBulkleyViscosityModel
        """
        return self._viscosity_model

    @viscosity_model.setter
    def viscosity_model(self, viscosity_model):
        """Sets the viscosity_model of this OneOfFluidCompressibleMaterialTransport.


        :param viscosity_model: The viscosity_model of this OneOfFluidCompressibleMaterialTransport.  # noqa: E501
        :type: StandardHerschelBulkleyViscosityModel
        """

        self._viscosity_model = viscosity_model

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfFluidCompressibleMaterialTransport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfFluidCompressibleMaterialTransport):
            return True

        return self.to_dict() != other.to_dict()
