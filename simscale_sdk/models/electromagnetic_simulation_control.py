# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ElectromagneticSimulationControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transient_magnetics_control': 'ElectromagneticTransientControl',
        'write_control': 'TimeStepWriteControl',
        'num_processors': 'int',
        'max_run_time': 'DimensionalTime',
        'core_loss_reference_period': 'DimensionalTime',
        'time_periodic_acceleration': 'bool'
    }

    attribute_map = {
        'transient_magnetics_control': 'transientMagneticsControl',
        'write_control': 'writeControl',
        'num_processors': 'numProcessors',
        'max_run_time': 'maxRunTime',
        'core_loss_reference_period': 'coreLossReferencePeriod',
        'time_periodic_acceleration': 'timePeriodicAcceleration'
    }

    def __init__(self, transient_magnetics_control=None, write_control=None, num_processors=None, max_run_time=None, core_loss_reference_period=None, time_periodic_acceleration=None, local_vars_configuration=None):  # noqa: E501
        """ElectromagneticSimulationControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transient_magnetics_control = None
        self._write_control = None
        self._num_processors = None
        self._max_run_time = None
        self._core_loss_reference_period = None
        self._time_periodic_acceleration = None
        self.discriminator = None

        if transient_magnetics_control is not None:
            self.transient_magnetics_control = transient_magnetics_control
        if write_control is not None:
            self.write_control = write_control
        if num_processors is not None:
            self.num_processors = num_processors
        if max_run_time is not None:
            self.max_run_time = max_run_time
        if core_loss_reference_period is not None:
            self.core_loss_reference_period = core_loss_reference_period
        if time_periodic_acceleration is not None:
            self.time_periodic_acceleration = time_periodic_acceleration

    @property
    def transient_magnetics_control(self):
        """Gets the transient_magnetics_control of this ElectromagneticSimulationControl.  # noqa: E501


        :return: The transient_magnetics_control of this ElectromagneticSimulationControl.  # noqa: E501
        :rtype: ElectromagneticTransientControl
        """
        return self._transient_magnetics_control

    @transient_magnetics_control.setter
    def transient_magnetics_control(self, transient_magnetics_control):
        """Sets the transient_magnetics_control of this ElectromagneticSimulationControl.


        :param transient_magnetics_control: The transient_magnetics_control of this ElectromagneticSimulationControl.  # noqa: E501
        :type: ElectromagneticTransientControl
        """

        self._transient_magnetics_control = transient_magnetics_control

    @property
    def write_control(self):
        """Gets the write_control of this ElectromagneticSimulationControl.  # noqa: E501


        :return: The write_control of this ElectromagneticSimulationControl.  # noqa: E501
        :rtype: TimeStepWriteControl
        """
        return self._write_control

    @write_control.setter
    def write_control(self, write_control):
        """Sets the write_control of this ElectromagneticSimulationControl.


        :param write_control: The write_control of this ElectromagneticSimulationControl.  # noqa: E501
        :type: TimeStepWriteControl
        """

        self._write_control = write_control

    @property
    def num_processors(self):
        """Gets the num_processors of this ElectromagneticSimulationControl.  # noqa: E501

        <p>Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. <a href='https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors' target='_blank'>Learn more</a>.</p>  # noqa: E501

        :return: The num_processors of this ElectromagneticSimulationControl.  # noqa: E501
        :rtype: int
        """
        return self._num_processors

    @num_processors.setter
    def num_processors(self, num_processors):
        """Sets the num_processors of this ElectromagneticSimulationControl.

        <p>Selecting more processor cores will speed up the simulation process. Choosing a smaller computation instance will save core hours. <a href='https://www.simscale.com/docs/simulation-setup/simulation-control-fluid/#number-of-processors' target='_blank'>Learn more</a>.</p>  # noqa: E501

        :param num_processors: The num_processors of this ElectromagneticSimulationControl.  # noqa: E501
        :type: int
        """
        allowed_values = [-1, 1, 2, 4, 8, 16, 32, 48, 64, 96, 128, 192]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and num_processors not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `num_processors` ({0}), must be one of {1}"  # noqa: E501
                .format(num_processors, allowed_values)
            )

        self._num_processors = num_processors

    @property
    def max_run_time(self):
        """Gets the max_run_time of this ElectromagneticSimulationControl.  # noqa: E501


        :return: The max_run_time of this ElectromagneticSimulationControl.  # noqa: E501
        :rtype: DimensionalTime
        """
        return self._max_run_time

    @max_run_time.setter
    def max_run_time(self, max_run_time):
        """Sets the max_run_time of this ElectromagneticSimulationControl.


        :param max_run_time: The max_run_time of this ElectromagneticSimulationControl.  # noqa: E501
        :type: DimensionalTime
        """

        self._max_run_time = max_run_time

    @property
    def core_loss_reference_period(self):
        """Gets the core_loss_reference_period of this ElectromagneticSimulationControl.  # noqa: E501


        :return: The core_loss_reference_period of this ElectromagneticSimulationControl.  # noqa: E501
        :rtype: DimensionalTime
        """
        return self._core_loss_reference_period

    @core_loss_reference_period.setter
    def core_loss_reference_period(self, core_loss_reference_period):
        """Sets the core_loss_reference_period of this ElectromagneticSimulationControl.


        :param core_loss_reference_period: The core_loss_reference_period of this ElectromagneticSimulationControl.  # noqa: E501
        :type: DimensionalTime
        """

        self._core_loss_reference_period = core_loss_reference_period

    @property
    def time_periodic_acceleration(self):
        """Gets the time_periodic_acceleration of this ElectromagneticSimulationControl.  # noqa: E501

        Activate when the coil excitation is periodic to accelerate simulation. For more information, please refer to our <a href='https://www.simscale.com/docs/analysis-types/electromagnetics/#time-periodic-acceleration' target='_blank'>documentation</a>.  # noqa: E501

        :return: The time_periodic_acceleration of this ElectromagneticSimulationControl.  # noqa: E501
        :rtype: bool
        """
        return self._time_periodic_acceleration

    @time_periodic_acceleration.setter
    def time_periodic_acceleration(self, time_periodic_acceleration):
        """Sets the time_periodic_acceleration of this ElectromagneticSimulationControl.

        Activate when the coil excitation is periodic to accelerate simulation. For more information, please refer to our <a href='https://www.simscale.com/docs/analysis-types/electromagnetics/#time-periodic-acceleration' target='_blank'>documentation</a>.  # noqa: E501

        :param time_periodic_acceleration: The time_periodic_acceleration of this ElectromagneticSimulationControl.  # noqa: E501
        :type: bool
        """

        self._time_periodic_acceleration = time_periodic_acceleration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElectromagneticSimulationControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElectromagneticSimulationControl):
            return True

        return self.to_dict() != other.to_dict()
