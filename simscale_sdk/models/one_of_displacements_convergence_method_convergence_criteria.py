# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfDisplacementsConvergenceMethodConvergenceCriteria(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'relative_displacement_tolerance': 'float',
        'relative_rotation_tolerance': 'float',
        'max_displacement_increment': 'DimensionalLength',
        'max_rotation_increment': 'DimensionalAngle'
    }

    attribute_map = {
        'type': 'type',
        'relative_displacement_tolerance': 'relativeDisplacementTolerance',
        'relative_rotation_tolerance': 'relativeRotationTolerance',
        'max_displacement_increment': 'maxDisplacementIncrement',
        'max_rotation_increment': 'maxRotationIncrement'
    }

    discriminator_value_class_map = {
        'RELATIVE': 'RelativeConvergenceDisplacements',
        'ABSOLUTE': 'AbsoluteConvergenceDisplacements',
        'ADAPTIVE': 'AdaptiveConvergenceDisplacements'
    }

    def __init__(self, type='ADAPTIVE', relative_displacement_tolerance=None, relative_rotation_tolerance=None, max_displacement_increment=None, max_rotation_increment=None, local_vars_configuration=None):  # noqa: E501
        """OneOfDisplacementsConvergenceMethodConvergenceCriteria - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._relative_displacement_tolerance = None
        self._relative_rotation_tolerance = None
        self._max_displacement_increment = None
        self._max_rotation_increment = None
        self.discriminator = 'type'

        self.type = type
        if relative_displacement_tolerance is not None:
            self.relative_displacement_tolerance = relative_displacement_tolerance
        if relative_rotation_tolerance is not None:
            self.relative_rotation_tolerance = relative_rotation_tolerance
        if max_displacement_increment is not None:
            self.max_displacement_increment = max_displacement_increment
        if max_rotation_increment is not None:
            self.max_rotation_increment = max_rotation_increment

    @property
    def type(self):
        """Gets the type of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501

        Schema name: AdaptiveConvergenceDisplacements  # noqa: E501

        :return: The type of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.

        Schema name: AdaptiveConvergenceDisplacements  # noqa: E501

        :param type: The type of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def relative_displacement_tolerance(self):
        """Gets the relative_displacement_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501


        :return: The relative_displacement_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :rtype: float
        """
        return self._relative_displacement_tolerance

    @relative_displacement_tolerance.setter
    def relative_displacement_tolerance(self, relative_displacement_tolerance):
        """Sets the relative_displacement_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.


        :param relative_displacement_tolerance: The relative_displacement_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                relative_displacement_tolerance is not None and relative_displacement_tolerance < 0):  # noqa: E501
            raise ValueError("Invalid value for `relative_displacement_tolerance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relative_displacement_tolerance = relative_displacement_tolerance

    @property
    def relative_rotation_tolerance(self):
        """Gets the relative_rotation_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501


        :return: The relative_rotation_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :rtype: float
        """
        return self._relative_rotation_tolerance

    @relative_rotation_tolerance.setter
    def relative_rotation_tolerance(self, relative_rotation_tolerance):
        """Sets the relative_rotation_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.


        :param relative_rotation_tolerance: The relative_rotation_tolerance of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                relative_rotation_tolerance is not None and relative_rotation_tolerance < 0):  # noqa: E501
            raise ValueError("Invalid value for `relative_rotation_tolerance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relative_rotation_tolerance = relative_rotation_tolerance

    @property
    def max_displacement_increment(self):
        """Gets the max_displacement_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501


        :return: The max_displacement_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._max_displacement_increment

    @max_displacement_increment.setter
    def max_displacement_increment(self, max_displacement_increment):
        """Sets the max_displacement_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.


        :param max_displacement_increment: The max_displacement_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :type: DimensionalLength
        """

        self._max_displacement_increment = max_displacement_increment

    @property
    def max_rotation_increment(self):
        """Gets the max_rotation_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501


        :return: The max_rotation_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :rtype: DimensionalAngle
        """
        return self._max_rotation_increment

    @max_rotation_increment.setter
    def max_rotation_increment(self, max_rotation_increment):
        """Sets the max_rotation_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.


        :param max_rotation_increment: The max_rotation_increment of this OneOfDisplacementsConvergenceMethodConvergenceCriteria.  # noqa: E501
        :type: DimensionalAngle
        """

        self._max_rotation_increment = max_rotation_increment

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfDisplacementsConvergenceMethodConvergenceCriteria):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfDisplacementsConvergenceMethodConvergenceCriteria):
            return True

        return self.to_dict() != other.to_dict()
