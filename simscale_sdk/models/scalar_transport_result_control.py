# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ScalarTransportResultControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'diffusion_coefficient': 'float',
        'volume_mode': 'str',
        'su': 'float',
        'sp': 'float',
        'write_control': 'OneOfScalarTransportResultControlWriteControl',
        'geometry_primitive_uuids': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'diffusion_coefficient': 'diffusionCoefficient',
        'volume_mode': 'volumeMode',
        'su': 'su',
        'sp': 'sp',
        'write_control': 'writeControl',
        'geometry_primitive_uuids': 'geometryPrimitiveUuids'
    }

    def __init__(self, name=None, diffusion_coefficient=None, volume_mode=None, su=None, sp=None, write_control=None, geometry_primitive_uuids=None, local_vars_configuration=None):  # noqa: E501
        """ScalarTransportResultControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._diffusion_coefficient = None
        self._volume_mode = None
        self._su = None
        self._sp = None
        self._write_control = None
        self._geometry_primitive_uuids = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if diffusion_coefficient is not None:
            self.diffusion_coefficient = diffusion_coefficient
        if volume_mode is not None:
            self.volume_mode = volume_mode
        if su is not None:
            self.su = su
        if sp is not None:
            self.sp = sp
        if write_control is not None:
            self.write_control = write_control
        if geometry_primitive_uuids is not None:
            self.geometry_primitive_uuids = geometry_primitive_uuids

    @property
    def name(self):
        """Gets the name of this ScalarTransportResultControl.  # noqa: E501


        :return: The name of this ScalarTransportResultControl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScalarTransportResultControl.


        :param name: The name of this ScalarTransportResultControl.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$/`")  # noqa: E501

        self._name = name

    @property
    def diffusion_coefficient(self):
        """Gets the diffusion_coefficient of this ScalarTransportResultControl.  # noqa: E501


        :return: The diffusion_coefficient of this ScalarTransportResultControl.  # noqa: E501
        :rtype: float
        """
        return self._diffusion_coefficient

    @diffusion_coefficient.setter
    def diffusion_coefficient(self, diffusion_coefficient):
        """Sets the diffusion_coefficient of this ScalarTransportResultControl.


        :param diffusion_coefficient: The diffusion_coefficient of this ScalarTransportResultControl.  # noqa: E501
        :type: float
        """

        self._diffusion_coefficient = diffusion_coefficient

    @property
    def volume_mode(self):
        """Gets the volume_mode of this ScalarTransportResultControl.  # noqa: E501


        :return: The volume_mode of this ScalarTransportResultControl.  # noqa: E501
        :rtype: str
        """
        return self._volume_mode

    @volume_mode.setter
    def volume_mode(self, volume_mode):
        """Sets the volume_mode of this ScalarTransportResultControl.


        :param volume_mode: The volume_mode of this ScalarTransportResultControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["SPECIFIC", "ABSOLUTE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and volume_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `volume_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(volume_mode, allowed_values)
            )

        self._volume_mode = volume_mode

    @property
    def su(self):
        """Gets the su of this ScalarTransportResultControl.  # noqa: E501


        :return: The su of this ScalarTransportResultControl.  # noqa: E501
        :rtype: float
        """
        return self._su

    @su.setter
    def su(self, su):
        """Sets the su of this ScalarTransportResultControl.


        :param su: The su of this ScalarTransportResultControl.  # noqa: E501
        :type: float
        """

        self._su = su

    @property
    def sp(self):
        """Gets the sp of this ScalarTransportResultControl.  # noqa: E501


        :return: The sp of this ScalarTransportResultControl.  # noqa: E501
        :rtype: float
        """
        return self._sp

    @sp.setter
    def sp(self, sp):
        """Sets the sp of this ScalarTransportResultControl.


        :param sp: The sp of this ScalarTransportResultControl.  # noqa: E501
        :type: float
        """

        self._sp = sp

    @property
    def write_control(self):
        """Gets the write_control of this ScalarTransportResultControl.  # noqa: E501


        :return: The write_control of this ScalarTransportResultControl.  # noqa: E501
        :rtype: OneOfScalarTransportResultControlWriteControl
        """
        return self._write_control

    @write_control.setter
    def write_control(self, write_control):
        """Sets the write_control of this ScalarTransportResultControl.


        :param write_control: The write_control of this ScalarTransportResultControl.  # noqa: E501
        :type: OneOfScalarTransportResultControlWriteControl
        """

        self._write_control = write_control

    @property
    def geometry_primitive_uuids(self):
        """Gets the geometry_primitive_uuids of this ScalarTransportResultControl.  # noqa: E501


        :return: The geometry_primitive_uuids of this ScalarTransportResultControl.  # noqa: E501
        :rtype: list[str]
        """
        return self._geometry_primitive_uuids

    @geometry_primitive_uuids.setter
    def geometry_primitive_uuids(self, geometry_primitive_uuids):
        """Sets the geometry_primitive_uuids of this ScalarTransportResultControl.


        :param geometry_primitive_uuids: The geometry_primitive_uuids of this ScalarTransportResultControl.  # noqa: E501
        :type: list[str]
        """

        self._geometry_primitive_uuids = geometry_primitive_uuids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScalarTransportResultControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScalarTransportResultControl):
            return True

        return self.to_dict() != other.to_dict()
