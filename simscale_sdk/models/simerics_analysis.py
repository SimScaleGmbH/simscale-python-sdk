# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SimericsAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'materials': 'SimericsFluidMaterials',
        'is_compressible': 'bool',
        'turbulence_model': 'str',
        'boundary_conditions': 'list[OneOfSimericsAnalysisBoundaryConditions]',
        'simulation_control': 'FluidSimulationControl',
        'mesh_settings': 'OneOfSimericsAnalysisMeshSettings',
        'result_control': 'FluidResultControls',
        'advanced_concepts': 'AdvancedConcepts'
    }

    attribute_map = {
        'type': 'type',
        'materials': 'materials',
        'is_compressible': 'isCompressible',
        'turbulence_model': 'turbulenceModel',
        'boundary_conditions': 'boundaryConditions',
        'simulation_control': 'simulationControl',
        'mesh_settings': 'meshSettings',
        'result_control': 'resultControl',
        'advanced_concepts': 'advancedConcepts'
    }

    def __init__(self, type='SIMERICS_ANALYSIS', materials=None, is_compressible=None, turbulence_model=None, boundary_conditions=None, simulation_control=None, mesh_settings=None, result_control=None, advanced_concepts=None, local_vars_configuration=None):  # noqa: E501
        """SimericsAnalysis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._materials = None
        self._is_compressible = None
        self._turbulence_model = None
        self._boundary_conditions = None
        self._simulation_control = None
        self._mesh_settings = None
        self._result_control = None
        self._advanced_concepts = None
        self.discriminator = None

        self.type = type
        if materials is not None:
            self.materials = materials
        if is_compressible is not None:
            self.is_compressible = is_compressible
        if turbulence_model is not None:
            self.turbulence_model = turbulence_model
        if boundary_conditions is not None:
            self.boundary_conditions = boundary_conditions
        if simulation_control is not None:
            self.simulation_control = simulation_control
        if mesh_settings is not None:
            self.mesh_settings = mesh_settings
        if result_control is not None:
            self.result_control = result_control
        if advanced_concepts is not None:
            self.advanced_concepts = advanced_concepts

    @property
    def type(self):
        """Gets the type of this SimericsAnalysis.  # noqa: E501

        Schema name: SimericsAnalysis  # noqa: E501

        :return: The type of this SimericsAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimericsAnalysis.

        Schema name: SimericsAnalysis  # noqa: E501

        :param type: The type of this SimericsAnalysis.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def materials(self):
        """Gets the materials of this SimericsAnalysis.  # noqa: E501


        :return: The materials of this SimericsAnalysis.  # noqa: E501
        :rtype: SimericsFluidMaterials
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this SimericsAnalysis.


        :param materials: The materials of this SimericsAnalysis.  # noqa: E501
        :type: SimericsFluidMaterials
        """

        self._materials = materials

    @property
    def is_compressible(self):
        """Gets the is_compressible of this SimericsAnalysis.  # noqa: E501


        :return: The is_compressible of this SimericsAnalysis.  # noqa: E501
        :rtype: bool
        """
        return self._is_compressible

    @is_compressible.setter
    def is_compressible(self, is_compressible):
        """Sets the is_compressible of this SimericsAnalysis.


        :param is_compressible: The is_compressible of this SimericsAnalysis.  # noqa: E501
        :type: bool
        """

        self._is_compressible = is_compressible

    @property
    def turbulence_model(self):
        """Gets the turbulence_model of this SimericsAnalysis.  # noqa: E501


        :return: The turbulence_model of this SimericsAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._turbulence_model

    @turbulence_model.setter
    def turbulence_model(self, turbulence_model):
        """Sets the turbulence_model of this SimericsAnalysis.


        :param turbulence_model: The turbulence_model of this SimericsAnalysis.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "KEPSILON"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and turbulence_model not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `turbulence_model` ({0}), must be one of {1}"  # noqa: E501
                .format(turbulence_model, allowed_values)
            )

        self._turbulence_model = turbulence_model

    @property
    def boundary_conditions(self):
        """Gets the boundary_conditions of this SimericsAnalysis.  # noqa: E501


        :return: The boundary_conditions of this SimericsAnalysis.  # noqa: E501
        :rtype: list[OneOfSimericsAnalysisBoundaryConditions]
        """
        return self._boundary_conditions

    @boundary_conditions.setter
    def boundary_conditions(self, boundary_conditions):
        """Sets the boundary_conditions of this SimericsAnalysis.


        :param boundary_conditions: The boundary_conditions of this SimericsAnalysis.  # noqa: E501
        :type: list[OneOfSimericsAnalysisBoundaryConditions]
        """

        self._boundary_conditions = boundary_conditions

    @property
    def simulation_control(self):
        """Gets the simulation_control of this SimericsAnalysis.  # noqa: E501


        :return: The simulation_control of this SimericsAnalysis.  # noqa: E501
        :rtype: FluidSimulationControl
        """
        return self._simulation_control

    @simulation_control.setter
    def simulation_control(self, simulation_control):
        """Sets the simulation_control of this SimericsAnalysis.


        :param simulation_control: The simulation_control of this SimericsAnalysis.  # noqa: E501
        :type: FluidSimulationControl
        """

        self._simulation_control = simulation_control

    @property
    def mesh_settings(self):
        """Gets the mesh_settings of this SimericsAnalysis.  # noqa: E501


        :return: The mesh_settings of this SimericsAnalysis.  # noqa: E501
        :rtype: OneOfSimericsAnalysisMeshSettings
        """
        return self._mesh_settings

    @mesh_settings.setter
    def mesh_settings(self, mesh_settings):
        """Sets the mesh_settings of this SimericsAnalysis.


        :param mesh_settings: The mesh_settings of this SimericsAnalysis.  # noqa: E501
        :type: OneOfSimericsAnalysisMeshSettings
        """

        self._mesh_settings = mesh_settings

    @property
    def result_control(self):
        """Gets the result_control of this SimericsAnalysis.  # noqa: E501


        :return: The result_control of this SimericsAnalysis.  # noqa: E501
        :rtype: FluidResultControls
        """
        return self._result_control

    @result_control.setter
    def result_control(self, result_control):
        """Sets the result_control of this SimericsAnalysis.


        :param result_control: The result_control of this SimericsAnalysis.  # noqa: E501
        :type: FluidResultControls
        """

        self._result_control = result_control

    @property
    def advanced_concepts(self):
        """Gets the advanced_concepts of this SimericsAnalysis.  # noqa: E501


        :return: The advanced_concepts of this SimericsAnalysis.  # noqa: E501
        :rtype: AdvancedConcepts
        """
        return self._advanced_concepts

    @advanced_concepts.setter
    def advanced_concepts(self, advanced_concepts):
        """Sets the advanced_concepts of this SimericsAnalysis.


        :param advanced_concepts: The advanced_concepts of this SimericsAnalysis.  # noqa: E501
        :type: AdvancedConcepts
        """

        self._advanced_concepts = advanced_concepts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimericsAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimericsAnalysis):
            return True

        return self.to_dict() != other.to_dict()
