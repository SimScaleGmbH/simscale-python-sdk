# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class PengRobinsonGasEquationOfState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'critical_temperature': 'DimensionalTemperature',
        'critical_volume': 'DimensionalMolarMass',
        'critical_pressure': 'DimensionalPressure',
        'acentric_factor': 'float',
        'energy': 'str'
    }

    attribute_map = {
        'type': 'type',
        'critical_temperature': 'criticalTemperature',
        'critical_volume': 'criticalVolume',
        'critical_pressure': 'criticalPressure',
        'acentric_factor': 'acentricFactor',
        'energy': 'energy'
    }

    def __init__(self, type='PENG_ROBINSON_GAS', critical_temperature=None, critical_volume=None, critical_pressure=None, acentric_factor=None, energy=None, local_vars_configuration=None):  # noqa: E501
        """PengRobinsonGasEquationOfState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._critical_temperature = None
        self._critical_volume = None
        self._critical_pressure = None
        self._acentric_factor = None
        self._energy = None
        self.discriminator = None

        self.type = type
        if critical_temperature is not None:
            self.critical_temperature = critical_temperature
        if critical_volume is not None:
            self.critical_volume = critical_volume
        if critical_pressure is not None:
            self.critical_pressure = critical_pressure
        if acentric_factor is not None:
            self.acentric_factor = acentric_factor
        if energy is not None:
            self.energy = energy

    @property
    def type(self):
        """Gets the type of this PengRobinsonGasEquationOfState.  # noqa: E501

        <br><p>The <b>Equation of state</b> describes the relation between density of a fluid and the fluid pressure and temperature. The available options are:</p><p><b>Rho const:</b> Fluid density is assumed constant.</p><p><b>Incompressibel perfect gas:</b> The fluid is assumed to be an 'Ideal Gas' that is incompressible by pressure. But, fluid density can change due to temperature.</p><p><b>Perfect gas:</b> Fluid is assumed to be an 'Ideal Gas' and obeys the 'Ideal Gas Law'.</p><p><b>Perfect fluid:</b> Fluid density can change due to pressure and temperature with respect to a base value.</p><p><b>Adiabatic perfect fluid:</b> The fluid is a perfect fluid which is adiabatic in nature.</p> <a href='https://www.simscale.com/docs/simulation-setup/materials/thermophysical-fluid-models/#equation-of-state' target='_blank'>Learn more</a>.  Schema name: PengRobinsonGasEquationOfState  # noqa: E501

        :return: The type of this PengRobinsonGasEquationOfState.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PengRobinsonGasEquationOfState.

        <br><p>The <b>Equation of state</b> describes the relation between density of a fluid and the fluid pressure and temperature. The available options are:</p><p><b>Rho const:</b> Fluid density is assumed constant.</p><p><b>Incompressibel perfect gas:</b> The fluid is assumed to be an 'Ideal Gas' that is incompressible by pressure. But, fluid density can change due to temperature.</p><p><b>Perfect gas:</b> Fluid is assumed to be an 'Ideal Gas' and obeys the 'Ideal Gas Law'.</p><p><b>Perfect fluid:</b> Fluid density can change due to pressure and temperature with respect to a base value.</p><p><b>Adiabatic perfect fluid:</b> The fluid is a perfect fluid which is adiabatic in nature.</p> <a href='https://www.simscale.com/docs/simulation-setup/materials/thermophysical-fluid-models/#equation-of-state' target='_blank'>Learn more</a>.  Schema name: PengRobinsonGasEquationOfState  # noqa: E501

        :param type: The type of this PengRobinsonGasEquationOfState.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def critical_temperature(self):
        """Gets the critical_temperature of this PengRobinsonGasEquationOfState.  # noqa: E501


        :return: The critical_temperature of this PengRobinsonGasEquationOfState.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._critical_temperature

    @critical_temperature.setter
    def critical_temperature(self, critical_temperature):
        """Sets the critical_temperature of this PengRobinsonGasEquationOfState.


        :param critical_temperature: The critical_temperature of this PengRobinsonGasEquationOfState.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._critical_temperature = critical_temperature

    @property
    def critical_volume(self):
        """Gets the critical_volume of this PengRobinsonGasEquationOfState.  # noqa: E501


        :return: The critical_volume of this PengRobinsonGasEquationOfState.  # noqa: E501
        :rtype: DimensionalMolarMass
        """
        return self._critical_volume

    @critical_volume.setter
    def critical_volume(self, critical_volume):
        """Sets the critical_volume of this PengRobinsonGasEquationOfState.


        :param critical_volume: The critical_volume of this PengRobinsonGasEquationOfState.  # noqa: E501
        :type: DimensionalMolarMass
        """

        self._critical_volume = critical_volume

    @property
    def critical_pressure(self):
        """Gets the critical_pressure of this PengRobinsonGasEquationOfState.  # noqa: E501


        :return: The critical_pressure of this PengRobinsonGasEquationOfState.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._critical_pressure

    @critical_pressure.setter
    def critical_pressure(self, critical_pressure):
        """Sets the critical_pressure of this PengRobinsonGasEquationOfState.


        :param critical_pressure: The critical_pressure of this PengRobinsonGasEquationOfState.  # noqa: E501
        :type: DimensionalPressure
        """

        self._critical_pressure = critical_pressure

    @property
    def acentric_factor(self):
        """Gets the acentric_factor of this PengRobinsonGasEquationOfState.  # noqa: E501

        Specify the acentric factor. It is a property of the material that characterized the changes in thermodynamic properties of the fluid due to non-spherical molecules.  # noqa: E501

        :return: The acentric_factor of this PengRobinsonGasEquationOfState.  # noqa: E501
        :rtype: float
        """
        return self._acentric_factor

    @acentric_factor.setter
    def acentric_factor(self, acentric_factor):
        """Sets the acentric_factor of this PengRobinsonGasEquationOfState.

        Specify the acentric factor. It is a property of the material that characterized the changes in thermodynamic properties of the fluid due to non-spherical molecules.  # noqa: E501

        :param acentric_factor: The acentric_factor of this PengRobinsonGasEquationOfState.  # noqa: E501
        :type: float
        """

        self._acentric_factor = acentric_factor

    @property
    def energy(self):
        """Gets the energy of this PengRobinsonGasEquationOfState.  # noqa: E501

        <p><b>Energy</b> provides the methods for the form of energy to be used. The options are:</p><p><b>Sensible enthalpy:</b> The enthalpy form of equation is used without the heat of formation. In most cases this is the recommended choice.</p><p><b>Sensible internal Energy:</b> The internal energy form of equation is used without the heat of formation but also incorporates energy change due to reactions.</p>  # noqa: E501

        :return: The energy of this PengRobinsonGasEquationOfState.  # noqa: E501
        :rtype: str
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this PengRobinsonGasEquationOfState.

        <p><b>Energy</b> provides the methods for the form of energy to be used. The options are:</p><p><b>Sensible enthalpy:</b> The enthalpy form of equation is used without the heat of formation. In most cases this is the recommended choice.</p><p><b>Sensible internal Energy:</b> The internal energy form of equation is used without the heat of formation but also incorporates energy change due to reactions.</p>  # noqa: E501

        :param energy: The energy of this PengRobinsonGasEquationOfState.  # noqa: E501
        :type: str
        """
        allowed_values = ["SENSIBLE_ENTHALPY", "SENSIBLE_INTERNAL_ENERGY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and energy not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `energy` ({0}), must be one of {1}"  # noqa: E501
                .format(energy, allowed_values)
            )

        self._energy = energy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PengRobinsonGasEquationOfState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PengRobinsonGasEquationOfState):
            return True

        return self.to_dict() != other.to_dict()
