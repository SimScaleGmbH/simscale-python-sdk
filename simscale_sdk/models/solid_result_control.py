# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SolidResultControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'solution_fields': 'list[OneOfSolidResultControlSolutionFields]',
        'edge_calculation': 'list[OneOfSolidResultControlEdgeCalculation]',
        'area_calculation': 'list[OneOfSolidResultControlAreaCalculation]',
        'volume_calculation': 'list[OneOfSolidResultControlVolumeCalculation]',
        'point_data': 'list[OneOfSolidResultControlPointData]'
    }

    attribute_map = {
        'solution_fields': 'solutionFields',
        'edge_calculation': 'edgeCalculation',
        'area_calculation': 'areaCalculation',
        'volume_calculation': 'volumeCalculation',
        'point_data': 'pointData'
    }

    def __init__(self, solution_fields=None, edge_calculation=None, area_calculation=None, volume_calculation=None, point_data=None, local_vars_configuration=None):  # noqa: E501
        """SolidResultControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._solution_fields = None
        self._edge_calculation = None
        self._area_calculation = None
        self._volume_calculation = None
        self._point_data = None
        self.discriminator = None

        if solution_fields is not None:
            self.solution_fields = solution_fields
        if edge_calculation is not None:
            self.edge_calculation = edge_calculation
        if area_calculation is not None:
            self.area_calculation = area_calculation
        if volume_calculation is not None:
            self.volume_calculation = volume_calculation
        if point_data is not None:
            self.point_data = point_data

    @property
    def solution_fields(self):
        """Gets the solution_fields of this SolidResultControl.  # noqa: E501

        Each mode is normalized using its largest component of displacement.  # noqa: E501

        :return: The solution_fields of this SolidResultControl.  # noqa: E501
        :rtype: list[OneOfSolidResultControlSolutionFields]
        """
        return self._solution_fields

    @solution_fields.setter
    def solution_fields(self, solution_fields):
        """Sets the solution_fields of this SolidResultControl.

        Each mode is normalized using its largest component of displacement.  # noqa: E501

        :param solution_fields: The solution_fields of this SolidResultControl.  # noqa: E501
        :type: list[OneOfSolidResultControlSolutionFields]
        """

        self._solution_fields = solution_fields

    @property
    def edge_calculation(self):
        """Gets the edge_calculation of this SolidResultControl.  # noqa: E501


        :return: The edge_calculation of this SolidResultControl.  # noqa: E501
        :rtype: list[OneOfSolidResultControlEdgeCalculation]
        """
        return self._edge_calculation

    @edge_calculation.setter
    def edge_calculation(self, edge_calculation):
        """Sets the edge_calculation of this SolidResultControl.


        :param edge_calculation: The edge_calculation of this SolidResultControl.  # noqa: E501
        :type: list[OneOfSolidResultControlEdgeCalculation]
        """

        self._edge_calculation = edge_calculation

    @property
    def area_calculation(self):
        """Gets the area_calculation of this SolidResultControl.  # noqa: E501


        :return: The area_calculation of this SolidResultControl.  # noqa: E501
        :rtype: list[OneOfSolidResultControlAreaCalculation]
        """
        return self._area_calculation

    @area_calculation.setter
    def area_calculation(self, area_calculation):
        """Sets the area_calculation of this SolidResultControl.


        :param area_calculation: The area_calculation of this SolidResultControl.  # noqa: E501
        :type: list[OneOfSolidResultControlAreaCalculation]
        """

        self._area_calculation = area_calculation

    @property
    def volume_calculation(self):
        """Gets the volume_calculation of this SolidResultControl.  # noqa: E501


        :return: The volume_calculation of this SolidResultControl.  # noqa: E501
        :rtype: list[OneOfSolidResultControlVolumeCalculation]
        """
        return self._volume_calculation

    @volume_calculation.setter
    def volume_calculation(self, volume_calculation):
        """Sets the volume_calculation of this SolidResultControl.


        :param volume_calculation: The volume_calculation of this SolidResultControl.  # noqa: E501
        :type: list[OneOfSolidResultControlVolumeCalculation]
        """

        self._volume_calculation = volume_calculation

    @property
    def point_data(self):
        """Gets the point_data of this SolidResultControl.  # noqa: E501


        :return: The point_data of this SolidResultControl.  # noqa: E501
        :rtype: list[OneOfSolidResultControlPointData]
        """
        return self._point_data

    @point_data.setter
    def point_data(self, point_data):
        """Sets the point_data of this SolidResultControl.


        :param point_data: The point_data of this SolidResultControl.  # noqa: E501
        :type: list[OneOfSolidResultControlPointData]
        """

        self._point_data = point_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolidResultControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolidResultControl):
            return True

        return self.to_dict() != other.to_dict()
