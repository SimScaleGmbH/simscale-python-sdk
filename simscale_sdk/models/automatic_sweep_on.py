# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class AutomaticSweepOn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'maximum_number_of_layers': 'int',
        'minimum_number_of_layers': 'int',
        'surface_element_type': 'str'
    }

    attribute_map = {
        'type': 'type',
        'maximum_number_of_layers': 'maximumNumberOfLayers',
        'minimum_number_of_layers': 'minimumNumberOfLayers',
        'surface_element_type': 'surfaceElementType'
    }

    def __init__(self, type='AUTOMATIC_SWEEP_MESHING_ON', maximum_number_of_layers=None, minimum_number_of_layers=None, surface_element_type=None, local_vars_configuration=None):  # noqa: E501
        """AutomaticSweepOn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._maximum_number_of_layers = None
        self._minimum_number_of_layers = None
        self._surface_element_type = None
        self.discriminator = None

        self.type = type
        if maximum_number_of_layers is not None:
            self.maximum_number_of_layers = maximum_number_of_layers
        if minimum_number_of_layers is not None:
            self.minimum_number_of_layers = minimum_number_of_layers
        if surface_element_type is not None:
            self.surface_element_type = surface_element_type

    @property
    def type(self):
        """Gets the type of this AutomaticSweepOn.  # noqa: E501

        Schema name: AutomaticSweepOn  # noqa: E501

        :return: The type of this AutomaticSweepOn.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomaticSweepOn.

        Schema name: AutomaticSweepOn  # noqa: E501

        :param type: The type of this AutomaticSweepOn.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def maximum_number_of_layers(self):
        """Gets the maximum_number_of_layers of this AutomaticSweepOn.  # noqa: E501


        :return: The maximum_number_of_layers of this AutomaticSweepOn.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_layers

    @maximum_number_of_layers.setter
    def maximum_number_of_layers(self, maximum_number_of_layers):
        """Sets the maximum_number_of_layers of this AutomaticSweepOn.


        :param maximum_number_of_layers: The maximum_number_of_layers of this AutomaticSweepOn.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                maximum_number_of_layers is not None and maximum_number_of_layers < 1):  # noqa: E501
            raise ValueError("Invalid value for `maximum_number_of_layers`, must be a value greater than or equal to `1`")  # noqa: E501

        self._maximum_number_of_layers = maximum_number_of_layers

    @property
    def minimum_number_of_layers(self):
        """Gets the minimum_number_of_layers of this AutomaticSweepOn.  # noqa: E501


        :return: The minimum_number_of_layers of this AutomaticSweepOn.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_layers

    @minimum_number_of_layers.setter
    def minimum_number_of_layers(self, minimum_number_of_layers):
        """Sets the minimum_number_of_layers of this AutomaticSweepOn.


        :param minimum_number_of_layers: The minimum_number_of_layers of this AutomaticSweepOn.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                minimum_number_of_layers is not None and minimum_number_of_layers < 1):  # noqa: E501
            raise ValueError("Invalid value for `minimum_number_of_layers`, must be a value greater than or equal to `1`")  # noqa: E501

        self._minimum_number_of_layers = minimum_number_of_layers

    @property
    def surface_element_type(self):
        """Gets the surface_element_type of this AutomaticSweepOn.  # noqa: E501


        :return: The surface_element_type of this AutomaticSweepOn.  # noqa: E501
        :rtype: str
        """
        return self._surface_element_type

    @surface_element_type.setter
    def surface_element_type(self, surface_element_type):
        """Sets the surface_element_type of this AutomaticSweepOn.


        :param surface_element_type: The surface_element_type of this AutomaticSweepOn.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRIANGULAR", "QUADDOMINANT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and surface_element_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `surface_element_type` ({0}), must be one of {1}"  # noqa: E501
                .format(surface_element_type, allowed_values)
            )

        self._surface_element_type = surface_element_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomaticSweepOn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomaticSweepOn):
            return True

        return self.to_dict() != other.to_dict()
