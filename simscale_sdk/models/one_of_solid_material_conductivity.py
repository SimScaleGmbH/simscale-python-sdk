# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfSolidMaterialConductivity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'thermal_conductivity': 'DimensionalFunctionThermalConductivity',
        'thermal_conductivity_function': 'DimensionalFunctionThermalConductivity',
        'thermal_conductivity_x': 'DimensionalFunctionThermalConductivity',
        'thermal_conductivity_y': 'DimensionalFunctionThermalConductivity',
        'thermal_conductivity_z': 'DimensionalFunctionThermalConductivity'
    }

    attribute_map = {
        'type': 'type',
        'thermal_conductivity': 'thermalConductivity',
        'thermal_conductivity_function': 'thermalConductivityFunction',
        'thermal_conductivity_x': 'thermalConductivityX',
        'thermal_conductivity_y': 'thermalConductivityY',
        'thermal_conductivity_z': 'thermalConductivityZ'
    }

    discriminator_value_class_map = {
        'ISOTROPIC': 'IsotropicConductivity',
        'ORTHOTROPIC': 'OrthotropicConductivity'
    }

    def __init__(self, type='ORTHOTROPIC', thermal_conductivity=None, thermal_conductivity_function=None, thermal_conductivity_x=None, thermal_conductivity_y=None, thermal_conductivity_z=None, local_vars_configuration=None):  # noqa: E501
        """OneOfSolidMaterialConductivity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._thermal_conductivity = None
        self._thermal_conductivity_function = None
        self._thermal_conductivity_x = None
        self._thermal_conductivity_y = None
        self._thermal_conductivity_z = None
        self.discriminator = 'type'

        self.type = type
        if thermal_conductivity is not None:
            self.thermal_conductivity = thermal_conductivity
        if thermal_conductivity_function is not None:
            self.thermal_conductivity_function = thermal_conductivity_function
        if thermal_conductivity_x is not None:
            self.thermal_conductivity_x = thermal_conductivity_x
        if thermal_conductivity_y is not None:
            self.thermal_conductivity_y = thermal_conductivity_y
        if thermal_conductivity_z is not None:
            self.thermal_conductivity_z = thermal_conductivity_z

    @property
    def type(self):
        """Gets the type of this OneOfSolidMaterialConductivity.  # noqa: E501

        <p>Define the directional dependency of this property. Isotropic means directionally independent. Orthotropic means directionally dependent.</p>  Schema name: OrthotropicConductivity  # noqa: E501

        :return: The type of this OneOfSolidMaterialConductivity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfSolidMaterialConductivity.

        <p>Define the directional dependency of this property. Isotropic means directionally independent. Orthotropic means directionally dependent.</p>  Schema name: OrthotropicConductivity  # noqa: E501

        :param type: The type of this OneOfSolidMaterialConductivity.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def thermal_conductivity(self):
        """Gets the thermal_conductivity of this OneOfSolidMaterialConductivity.  # noqa: E501


        :return: The thermal_conductivity of this OneOfSolidMaterialConductivity.  # noqa: E501
        :rtype: DimensionalFunctionThermalConductivity
        """
        return self._thermal_conductivity

    @thermal_conductivity.setter
    def thermal_conductivity(self, thermal_conductivity):
        """Sets the thermal_conductivity of this OneOfSolidMaterialConductivity.


        :param thermal_conductivity: The thermal_conductivity of this OneOfSolidMaterialConductivity.  # noqa: E501
        :type: DimensionalFunctionThermalConductivity
        """

        self._thermal_conductivity = thermal_conductivity

    @property
    def thermal_conductivity_function(self):
        """Gets the thermal_conductivity_function of this OneOfSolidMaterialConductivity.  # noqa: E501


        :return: The thermal_conductivity_function of this OneOfSolidMaterialConductivity.  # noqa: E501
        :rtype: DimensionalFunctionThermalConductivity
        """
        return self._thermal_conductivity_function

    @thermal_conductivity_function.setter
    def thermal_conductivity_function(self, thermal_conductivity_function):
        """Sets the thermal_conductivity_function of this OneOfSolidMaterialConductivity.


        :param thermal_conductivity_function: The thermal_conductivity_function of this OneOfSolidMaterialConductivity.  # noqa: E501
        :type: DimensionalFunctionThermalConductivity
        """

        self._thermal_conductivity_function = thermal_conductivity_function

    @property
    def thermal_conductivity_x(self):
        """Gets the thermal_conductivity_x of this OneOfSolidMaterialConductivity.  # noqa: E501


        :return: The thermal_conductivity_x of this OneOfSolidMaterialConductivity.  # noqa: E501
        :rtype: DimensionalFunctionThermalConductivity
        """
        return self._thermal_conductivity_x

    @thermal_conductivity_x.setter
    def thermal_conductivity_x(self, thermal_conductivity_x):
        """Sets the thermal_conductivity_x of this OneOfSolidMaterialConductivity.


        :param thermal_conductivity_x: The thermal_conductivity_x of this OneOfSolidMaterialConductivity.  # noqa: E501
        :type: DimensionalFunctionThermalConductivity
        """

        self._thermal_conductivity_x = thermal_conductivity_x

    @property
    def thermal_conductivity_y(self):
        """Gets the thermal_conductivity_y of this OneOfSolidMaterialConductivity.  # noqa: E501


        :return: The thermal_conductivity_y of this OneOfSolidMaterialConductivity.  # noqa: E501
        :rtype: DimensionalFunctionThermalConductivity
        """
        return self._thermal_conductivity_y

    @thermal_conductivity_y.setter
    def thermal_conductivity_y(self, thermal_conductivity_y):
        """Sets the thermal_conductivity_y of this OneOfSolidMaterialConductivity.


        :param thermal_conductivity_y: The thermal_conductivity_y of this OneOfSolidMaterialConductivity.  # noqa: E501
        :type: DimensionalFunctionThermalConductivity
        """

        self._thermal_conductivity_y = thermal_conductivity_y

    @property
    def thermal_conductivity_z(self):
        """Gets the thermal_conductivity_z of this OneOfSolidMaterialConductivity.  # noqa: E501


        :return: The thermal_conductivity_z of this OneOfSolidMaterialConductivity.  # noqa: E501
        :rtype: DimensionalFunctionThermalConductivity
        """
        return self._thermal_conductivity_z

    @thermal_conductivity_z.setter
    def thermal_conductivity_z(self, thermal_conductivity_z):
        """Sets the thermal_conductivity_z of this OneOfSolidMaterialConductivity.


        :param thermal_conductivity_z: The thermal_conductivity_z of this OneOfSolidMaterialConductivity.  # noqa: E501
        :type: DimensionalFunctionThermalConductivity
        """

        self._thermal_conductivity_z = thermal_conductivity_z

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfSolidMaterialConductivity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfSolidMaterialConductivity):
            return True

        return self.to_dict() != other.to_dict()
