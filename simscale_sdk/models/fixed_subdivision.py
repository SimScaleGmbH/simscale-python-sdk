# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FixedSubdivision(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_subdivisions': 'int',
        'max_subdivision_depth': 'int'
    }

    attribute_map = {
        'num_subdivisions': 'numSubdivisions',
        'max_subdivision_depth': 'maxSubdivisionDepth'
    }

    def __init__(self, num_subdivisions=None, max_subdivision_depth=None, local_vars_configuration=None):  # noqa: E501
        """FixedSubdivision - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_subdivisions = None
        self._max_subdivision_depth = None
        self.discriminator = None

        if num_subdivisions is not None:
            self.num_subdivisions = num_subdivisions
        if max_subdivision_depth is not None:
            self.max_subdivision_depth = max_subdivision_depth

    @property
    def num_subdivisions(self):
        """Gets the num_subdivisions of this FixedSubdivision.  # noqa: E501

        <p>Define the number of equal subdivisions of a time step in case of an adaptation event.</p>  # noqa: E501

        :return: The num_subdivisions of this FixedSubdivision.  # noqa: E501
        :rtype: int
        """
        return self._num_subdivisions

    @num_subdivisions.setter
    def num_subdivisions(self, num_subdivisions):
        """Sets the num_subdivisions of this FixedSubdivision.

        <p>Define the number of equal subdivisions of a time step in case of an adaptation event.</p>  # noqa: E501

        :param num_subdivisions: The num_subdivisions of this FixedSubdivision.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_subdivisions is not None and num_subdivisions < 2):  # noqa: E501
            raise ValueError("Invalid value for `num_subdivisions`, must be a value greater than or equal to `2`")  # noqa: E501

        self._num_subdivisions = num_subdivisions

    @property
    def max_subdivision_depth(self):
        """Gets the max_subdivision_depth of this FixedSubdivision.  # noqa: E501

        <p>Define maximum depth of the timestep subdivisions. If this value is exceeded the computation will stop. Example: If this value is set to 3, the number of subdivisions to 2 and the initial time step length is set to 1 sec, than the maximum depth is reached after 3 consecutive subdivisions (e.g. a time step of 1/8 sec based on <i>1.(1/2)<sup>3</sup></i>).</p>  # noqa: E501

        :return: The max_subdivision_depth of this FixedSubdivision.  # noqa: E501
        :rtype: int
        """
        return self._max_subdivision_depth

    @max_subdivision_depth.setter
    def max_subdivision_depth(self, max_subdivision_depth):
        """Sets the max_subdivision_depth of this FixedSubdivision.

        <p>Define maximum depth of the timestep subdivisions. If this value is exceeded the computation will stop. Example: If this value is set to 3, the number of subdivisions to 2 and the initial time step length is set to 1 sec, than the maximum depth is reached after 3 consecutive subdivisions (e.g. a time step of 1/8 sec based on <i>1.(1/2)<sup>3</sup></i>).</p>  # noqa: E501

        :param max_subdivision_depth: The max_subdivision_depth of this FixedSubdivision.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_subdivision_depth is not None and max_subdivision_depth < 2):  # noqa: E501
            raise ValueError("Invalid value for `max_subdivision_depth`, must be a value greater than or equal to `2`")  # noqa: E501

        self._max_subdivision_depth = max_subdivision_depth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FixedSubdivision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FixedSubdivision):
            return True

        return self.to_dict() != other.to_dict()
