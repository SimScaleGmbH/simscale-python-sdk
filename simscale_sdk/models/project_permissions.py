# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ProjectPermissions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'can_preview_project': 'bool',
        'can_read_project': 'bool',
        'can_copy_project': 'bool',
        'can_write_project': 'bool',
        'can_execute_project_billable_action': 'bool',
        'can_manage_project': 'bool',
        'can_move_project_to_personal_space': 'bool',
        'can_list_project_permissions': 'bool',
        'can_edit_project_permissions': 'bool',
        'can_share_project_with_space_members': 'bool',
        'can_share_project_with_organization_members': 'bool',
        'can_share_project_with_anyone': 'bool',
        'can_make_project_public': 'bool',
        'can_delete_project': 'bool'
    }

    attribute_map = {
        'can_preview_project': 'canPreviewProject',
        'can_read_project': 'canReadProject',
        'can_copy_project': 'canCopyProject',
        'can_write_project': 'canWriteProject',
        'can_execute_project_billable_action': 'canExecuteProjectBillableAction',
        'can_manage_project': 'canManageProject',
        'can_move_project_to_personal_space': 'canMoveProjectToPersonalSpace',
        'can_list_project_permissions': 'canListProjectPermissions',
        'can_edit_project_permissions': 'canEditProjectPermissions',
        'can_share_project_with_space_members': 'canShareProjectWithSpaceMembers',
        'can_share_project_with_organization_members': 'canShareProjectWithOrganizationMembers',
        'can_share_project_with_anyone': 'canShareProjectWithAnyone',
        'can_make_project_public': 'canMakeProjectPublic',
        'can_delete_project': 'canDeleteProject'
    }

    def __init__(self, can_preview_project=None, can_read_project=None, can_copy_project=None, can_write_project=None, can_execute_project_billable_action=None, can_manage_project=None, can_move_project_to_personal_space=None, can_list_project_permissions=None, can_edit_project_permissions=None, can_share_project_with_space_members=None, can_share_project_with_organization_members=None, can_share_project_with_anyone=None, can_make_project_public=None, can_delete_project=None, local_vars_configuration=None):  # noqa: E501
        """ProjectPermissions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._can_preview_project = None
        self._can_read_project = None
        self._can_copy_project = None
        self._can_write_project = None
        self._can_execute_project_billable_action = None
        self._can_manage_project = None
        self._can_move_project_to_personal_space = None
        self._can_list_project_permissions = None
        self._can_edit_project_permissions = None
        self._can_share_project_with_space_members = None
        self._can_share_project_with_organization_members = None
        self._can_share_project_with_anyone = None
        self._can_make_project_public = None
        self._can_delete_project = None
        self.discriminator = None

        if can_preview_project is not None:
            self.can_preview_project = can_preview_project
        if can_read_project is not None:
            self.can_read_project = can_read_project
        if can_copy_project is not None:
            self.can_copy_project = can_copy_project
        if can_write_project is not None:
            self.can_write_project = can_write_project
        if can_execute_project_billable_action is not None:
            self.can_execute_project_billable_action = can_execute_project_billable_action
        if can_manage_project is not None:
            self.can_manage_project = can_manage_project
        if can_move_project_to_personal_space is not None:
            self.can_move_project_to_personal_space = can_move_project_to_personal_space
        if can_list_project_permissions is not None:
            self.can_list_project_permissions = can_list_project_permissions
        if can_edit_project_permissions is not None:
            self.can_edit_project_permissions = can_edit_project_permissions
        if can_share_project_with_space_members is not None:
            self.can_share_project_with_space_members = can_share_project_with_space_members
        if can_share_project_with_organization_members is not None:
            self.can_share_project_with_organization_members = can_share_project_with_organization_members
        if can_share_project_with_anyone is not None:
            self.can_share_project_with_anyone = can_share_project_with_anyone
        if can_make_project_public is not None:
            self.can_make_project_public = can_make_project_public
        if can_delete_project is not None:
            self.can_delete_project = can_delete_project

    @property
    def can_preview_project(self):
        """Gets the can_preview_project of this ProjectPermissions.  # noqa: E501

        Whether the current user can see basic details about this Project.  # noqa: E501

        :return: The can_preview_project of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_preview_project

    @can_preview_project.setter
    def can_preview_project(self, can_preview_project):
        """Sets the can_preview_project of this ProjectPermissions.

        Whether the current user can see basic details about this Project.  # noqa: E501

        :param can_preview_project: The can_preview_project of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_preview_project = can_preview_project

    @property
    def can_read_project(self):
        """Gets the can_read_project of this ProjectPermissions.  # noqa: E501

        Whether the current user can open this Project.  # noqa: E501

        :return: The can_read_project of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_read_project

    @can_read_project.setter
    def can_read_project(self, can_read_project):
        """Sets the can_read_project of this ProjectPermissions.

        Whether the current user can open this Project.  # noqa: E501

        :param can_read_project: The can_read_project of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_read_project = can_read_project

    @property
    def can_copy_project(self):
        """Gets the can_copy_project of this ProjectPermissions.  # noqa: E501

        Whether the current user can copy this Project.  # noqa: E501

        :return: The can_copy_project of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_copy_project

    @can_copy_project.setter
    def can_copy_project(self, can_copy_project):
        """Sets the can_copy_project of this ProjectPermissions.

        Whether the current user can copy this Project.  # noqa: E501

        :param can_copy_project: The can_copy_project of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_copy_project = can_copy_project

    @property
    def can_write_project(self):
        """Gets the can_write_project of this ProjectPermissions.  # noqa: E501

        Whether the current user can edit this Project.  # noqa: E501

        :return: The can_write_project of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_write_project

    @can_write_project.setter
    def can_write_project(self, can_write_project):
        """Sets the can_write_project of this ProjectPermissions.

        Whether the current user can edit this Project.  # noqa: E501

        :param can_write_project: The can_write_project of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_write_project = can_write_project

    @property
    def can_execute_project_billable_action(self):
        """Gets the can_execute_project_billable_action of this ProjectPermissions.  # noqa: E501

        Whether the current user can execute a billable action on this Project.  # noqa: E501

        :return: The can_execute_project_billable_action of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_execute_project_billable_action

    @can_execute_project_billable_action.setter
    def can_execute_project_billable_action(self, can_execute_project_billable_action):
        """Sets the can_execute_project_billable_action of this ProjectPermissions.

        Whether the current user can execute a billable action on this Project.  # noqa: E501

        :param can_execute_project_billable_action: The can_execute_project_billable_action of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_execute_project_billable_action = can_execute_project_billable_action

    @property
    def can_manage_project(self):
        """Gets the can_manage_project of this ProjectPermissions.  # noqa: E501

        Whether the current user can manage this Project.  # noqa: E501

        :return: The can_manage_project of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_project

    @can_manage_project.setter
    def can_manage_project(self, can_manage_project):
        """Sets the can_manage_project of this ProjectPermissions.

        Whether the current user can manage this Project.  # noqa: E501

        :param can_manage_project: The can_manage_project of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_manage_project = can_manage_project

    @property
    def can_move_project_to_personal_space(self):
        """Gets the can_move_project_to_personal_space of this ProjectPermissions.  # noqa: E501

        Whether the current user can move this Project to their Personal Space.  # noqa: E501

        :return: The can_move_project_to_personal_space of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_move_project_to_personal_space

    @can_move_project_to_personal_space.setter
    def can_move_project_to_personal_space(self, can_move_project_to_personal_space):
        """Sets the can_move_project_to_personal_space of this ProjectPermissions.

        Whether the current user can move this Project to their Personal Space.  # noqa: E501

        :param can_move_project_to_personal_space: The can_move_project_to_personal_space of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_move_project_to_personal_space = can_move_project_to_personal_space

    @property
    def can_list_project_permissions(self):
        """Gets the can_list_project_permissions of this ProjectPermissions.  # noqa: E501

        Whether the current user can see who has access to this Project.  # noqa: E501

        :return: The can_list_project_permissions of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_list_project_permissions

    @can_list_project_permissions.setter
    def can_list_project_permissions(self, can_list_project_permissions):
        """Sets the can_list_project_permissions of this ProjectPermissions.

        Whether the current user can see who has access to this Project.  # noqa: E501

        :param can_list_project_permissions: The can_list_project_permissions of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_list_project_permissions = can_list_project_permissions

    @property
    def can_edit_project_permissions(self):
        """Gets the can_edit_project_permissions of this ProjectPermissions.  # noqa: E501

        Whether the current user can change who has access to this Project.  # noqa: E501

        :return: The can_edit_project_permissions of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_project_permissions

    @can_edit_project_permissions.setter
    def can_edit_project_permissions(self, can_edit_project_permissions):
        """Sets the can_edit_project_permissions of this ProjectPermissions.

        Whether the current user can change who has access to this Project.  # noqa: E501

        :param can_edit_project_permissions: The can_edit_project_permissions of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_edit_project_permissions = can_edit_project_permissions

    @property
    def can_share_project_with_space_members(self):
        """Gets the can_share_project_with_space_members of this ProjectPermissions.  # noqa: E501

        Whether the current user can share this project with users that have access to the Space.  # noqa: E501

        :return: The can_share_project_with_space_members of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_share_project_with_space_members

    @can_share_project_with_space_members.setter
    def can_share_project_with_space_members(self, can_share_project_with_space_members):
        """Sets the can_share_project_with_space_members of this ProjectPermissions.

        Whether the current user can share this project with users that have access to the Space.  # noqa: E501

        :param can_share_project_with_space_members: The can_share_project_with_space_members of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_share_project_with_space_members = can_share_project_with_space_members

    @property
    def can_share_project_with_organization_members(self):
        """Gets the can_share_project_with_organization_members of this ProjectPermissions.  # noqa: E501

        Whether the current user can share this project with members of the Organization.  # noqa: E501

        :return: The can_share_project_with_organization_members of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_share_project_with_organization_members

    @can_share_project_with_organization_members.setter
    def can_share_project_with_organization_members(self, can_share_project_with_organization_members):
        """Sets the can_share_project_with_organization_members of this ProjectPermissions.

        Whether the current user can share this project with members of the Organization.  # noqa: E501

        :param can_share_project_with_organization_members: The can_share_project_with_organization_members of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_share_project_with_organization_members = can_share_project_with_organization_members

    @property
    def can_share_project_with_anyone(self):
        """Gets the can_share_project_with_anyone of this ProjectPermissions.  # noqa: E501

        Whether the current user can share this project with any user of the platform.  # noqa: E501

        :return: The can_share_project_with_anyone of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_share_project_with_anyone

    @can_share_project_with_anyone.setter
    def can_share_project_with_anyone(self, can_share_project_with_anyone):
        """Sets the can_share_project_with_anyone of this ProjectPermissions.

        Whether the current user can share this project with any user of the platform.  # noqa: E501

        :param can_share_project_with_anyone: The can_share_project_with_anyone of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_share_project_with_anyone = can_share_project_with_anyone

    @property
    def can_make_project_public(self):
        """Gets the can_make_project_public of this ProjectPermissions.  # noqa: E501

        Whether the current user can make this project public.  # noqa: E501

        :return: The can_make_project_public of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_make_project_public

    @can_make_project_public.setter
    def can_make_project_public(self, can_make_project_public):
        """Sets the can_make_project_public of this ProjectPermissions.

        Whether the current user can make this project public.  # noqa: E501

        :param can_make_project_public: The can_make_project_public of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_make_project_public = can_make_project_public

    @property
    def can_delete_project(self):
        """Gets the can_delete_project of this ProjectPermissions.  # noqa: E501

        Whether the current user can delete this Project.  # noqa: E501

        :return: The can_delete_project of this ProjectPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_project

    @can_delete_project.setter
    def can_delete_project(self, can_delete_project):
        """Sets the can_delete_project of this ProjectPermissions.

        Whether the current user can delete this Project.  # noqa: E501

        :param can_delete_project: The can_delete_project of this ProjectPermissions.  # noqa: E501
        :type: bool
        """

        self._can_delete_project = can_delete_project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectPermissions):
            return True

        return self.to_dict() != other.to_dict()
