# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class LocalHalfSpace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'orientation_reference': 'str',
        'reference_point': 'DimensionalVectorLength',
        'normal': 'DimensionalVectorLength'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'orientation_reference': 'orientationReference',
        'reference_point': 'referencePoint',
        'normal': 'normal'
    }

    def __init__(self, type='LOCAL_HALF_SPACE', id=None, name=None, orientation_reference=None, reference_point=None, normal=None, local_vars_configuration=None):  # noqa: E501
        """LocalHalfSpace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._id = None
        self._name = None
        self._orientation_reference = None
        self._reference_point = None
        self._normal = None
        self.discriminator = None

        self.type = type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if orientation_reference is not None:
            self.orientation_reference = orientation_reference
        if reference_point is not None:
            self.reference_point = reference_point
        if normal is not None:
            self.normal = normal

    @property
    def type(self):
        """Gets the type of this LocalHalfSpace.  # noqa: E501

        Schema name: LocalHalfSpace  # noqa: E501

        :return: The type of this LocalHalfSpace.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LocalHalfSpace.

        Schema name: LocalHalfSpace  # noqa: E501

        :param type: The type of this LocalHalfSpace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this LocalHalfSpace.  # noqa: E501


        :return: The id of this LocalHalfSpace.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocalHalfSpace.


        :param id: The id of this LocalHalfSpace.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LocalHalfSpace.  # noqa: E501


        :return: The name of this LocalHalfSpace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocalHalfSpace.


        :param name: The name of this LocalHalfSpace.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$/`")  # noqa: E501

        self._name = name

    @property
    def orientation_reference(self):
        """Gets the orientation_reference of this LocalHalfSpace.  # noqa: E501


        :return: The orientation_reference of this LocalHalfSpace.  # noqa: E501
        :rtype: str
        """
        return self._orientation_reference

    @orientation_reference.setter
    def orientation_reference(self, orientation_reference):
        """Sets the orientation_reference of this LocalHalfSpace.


        :param orientation_reference: The orientation_reference of this LocalHalfSpace.  # noqa: E501
        :type: str
        """
        allowed_values = ["GEOMETRY", "FLOW_DOMAIN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and orientation_reference not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `orientation_reference` ({0}), must be one of {1}"  # noqa: E501
                .format(orientation_reference, allowed_values)
            )

        self._orientation_reference = orientation_reference

    @property
    def reference_point(self):
        """Gets the reference_point of this LocalHalfSpace.  # noqa: E501


        :return: The reference_point of this LocalHalfSpace.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._reference_point

    @reference_point.setter
    def reference_point(self, reference_point):
        """Sets the reference_point of this LocalHalfSpace.


        :param reference_point: The reference_point of this LocalHalfSpace.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._reference_point = reference_point

    @property
    def normal(self):
        """Gets the normal of this LocalHalfSpace.  # noqa: E501


        :return: The normal of this LocalHalfSpace.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this LocalHalfSpace.


        :param normal: The normal of this LocalHalfSpace.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._normal = normal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalHalfSpace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalHalfSpace):
            return True

        return self.to_dict() != other.to_dict()
