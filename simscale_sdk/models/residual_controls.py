# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ResidualControls(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'velocity': 'Tolerance',
        'pressure': 'Tolerance',
        'pressure_rgh': 'Tolerance',
        'temperature': 'Tolerance',
        'turbulent_kinetic_energy': 'Tolerance',
        'omega_dissipation_rate': 'Tolerance',
        'epsilon_dissipation_rate': 'Tolerance'
    }

    attribute_map = {
        'velocity': 'velocity',
        'pressure': 'pressure',
        'pressure_rgh': 'pressureRgh',
        'temperature': 'temperature',
        'turbulent_kinetic_energy': 'turbulentKineticEnergy',
        'omega_dissipation_rate': 'omegaDissipationRate',
        'epsilon_dissipation_rate': 'epsilonDissipationRate'
    }

    def __init__(self, velocity=None, pressure=None, pressure_rgh=None, temperature=None, turbulent_kinetic_energy=None, omega_dissipation_rate=None, epsilon_dissipation_rate=None, local_vars_configuration=None):  # noqa: E501
        """ResidualControls - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._velocity = None
        self._pressure = None
        self._pressure_rgh = None
        self._temperature = None
        self._turbulent_kinetic_energy = None
        self._omega_dissipation_rate = None
        self._epsilon_dissipation_rate = None
        self.discriminator = None

        if velocity is not None:
            self.velocity = velocity
        if pressure is not None:
            self.pressure = pressure
        if pressure_rgh is not None:
            self.pressure_rgh = pressure_rgh
        if temperature is not None:
            self.temperature = temperature
        if turbulent_kinetic_energy is not None:
            self.turbulent_kinetic_energy = turbulent_kinetic_energy
        if omega_dissipation_rate is not None:
            self.omega_dissipation_rate = omega_dissipation_rate
        if epsilon_dissipation_rate is not None:
            self.epsilon_dissipation_rate = epsilon_dissipation_rate

    @property
    def velocity(self):
        """Gets the velocity of this ResidualControls.  # noqa: E501


        :return: The velocity of this ResidualControls.  # noqa: E501
        :rtype: Tolerance
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this ResidualControls.


        :param velocity: The velocity of this ResidualControls.  # noqa: E501
        :type: Tolerance
        """

        self._velocity = velocity

    @property
    def pressure(self):
        """Gets the pressure of this ResidualControls.  # noqa: E501


        :return: The pressure of this ResidualControls.  # noqa: E501
        :rtype: Tolerance
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this ResidualControls.


        :param pressure: The pressure of this ResidualControls.  # noqa: E501
        :type: Tolerance
        """

        self._pressure = pressure

    @property
    def pressure_rgh(self):
        """Gets the pressure_rgh of this ResidualControls.  # noqa: E501


        :return: The pressure_rgh of this ResidualControls.  # noqa: E501
        :rtype: Tolerance
        """
        return self._pressure_rgh

    @pressure_rgh.setter
    def pressure_rgh(self, pressure_rgh):
        """Sets the pressure_rgh of this ResidualControls.


        :param pressure_rgh: The pressure_rgh of this ResidualControls.  # noqa: E501
        :type: Tolerance
        """

        self._pressure_rgh = pressure_rgh

    @property
    def temperature(self):
        """Gets the temperature of this ResidualControls.  # noqa: E501


        :return: The temperature of this ResidualControls.  # noqa: E501
        :rtype: Tolerance
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this ResidualControls.


        :param temperature: The temperature of this ResidualControls.  # noqa: E501
        :type: Tolerance
        """

        self._temperature = temperature

    @property
    def turbulent_kinetic_energy(self):
        """Gets the turbulent_kinetic_energy of this ResidualControls.  # noqa: E501


        :return: The turbulent_kinetic_energy of this ResidualControls.  # noqa: E501
        :rtype: Tolerance
        """
        return self._turbulent_kinetic_energy

    @turbulent_kinetic_energy.setter
    def turbulent_kinetic_energy(self, turbulent_kinetic_energy):
        """Sets the turbulent_kinetic_energy of this ResidualControls.


        :param turbulent_kinetic_energy: The turbulent_kinetic_energy of this ResidualControls.  # noqa: E501
        :type: Tolerance
        """

        self._turbulent_kinetic_energy = turbulent_kinetic_energy

    @property
    def omega_dissipation_rate(self):
        """Gets the omega_dissipation_rate of this ResidualControls.  # noqa: E501


        :return: The omega_dissipation_rate of this ResidualControls.  # noqa: E501
        :rtype: Tolerance
        """
        return self._omega_dissipation_rate

    @omega_dissipation_rate.setter
    def omega_dissipation_rate(self, omega_dissipation_rate):
        """Sets the omega_dissipation_rate of this ResidualControls.


        :param omega_dissipation_rate: The omega_dissipation_rate of this ResidualControls.  # noqa: E501
        :type: Tolerance
        """

        self._omega_dissipation_rate = omega_dissipation_rate

    @property
    def epsilon_dissipation_rate(self):
        """Gets the epsilon_dissipation_rate of this ResidualControls.  # noqa: E501


        :return: The epsilon_dissipation_rate of this ResidualControls.  # noqa: E501
        :rtype: Tolerance
        """
        return self._epsilon_dissipation_rate

    @epsilon_dissipation_rate.setter
    def epsilon_dissipation_rate(self, epsilon_dissipation_rate):
        """Sets the epsilon_dissipation_rate of this ResidualControls.


        :param epsilon_dissipation_rate: The epsilon_dissipation_rate of this ResidualControls.  # noqa: E501
        :type: Tolerance
        """

        self._epsilon_dissipation_rate = epsilon_dissipation_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResidualControls):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResidualControls):
            return True

        return self.to_dict() != other.to_dict()
