# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class CustomTree(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'leaf_area_index': 'float',
        'average_tree_height': 'DimensionalLength',
        'drag_coefficient': 'float'
    }

    attribute_map = {
        'type': 'type',
        'leaf_area_index': 'leafAreaIndex',
        'average_tree_height': 'averageTreeHeight',
        'drag_coefficient': 'dragCoefficient'
    }

    def __init__(self, type='CUSTOM_TREE', leaf_area_index=None, average_tree_height=None, drag_coefficient=None, local_vars_configuration=None):  # noqa: E501
        """CustomTree - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._leaf_area_index = None
        self._average_tree_height = None
        self._drag_coefficient = None
        self.discriminator = None

        self.type = type
        if leaf_area_index is not None:
            self.leaf_area_index = leaf_area_index
        if average_tree_height is not None:
            self.average_tree_height = average_tree_height
        if drag_coefficient is not None:
            self.drag_coefficient = drag_coefficient

    @property
    def type(self):
        """Gets the type of this CustomTree.  # noqa: E501

        Schema name: CustomTree  # noqa: E501

        :return: The type of this CustomTree.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomTree.

        Schema name: CustomTree  # noqa: E501

        :param type: The type of this CustomTree.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def leaf_area_index(self):
        """Gets the leaf_area_index of this CustomTree.  # noqa: E501

        Leaf Area Index (LAI) is a dimensionless quantity that is defined as the leaf area per unit ground surface area in broadle af canopies  # noqa: E501

        :return: The leaf_area_index of this CustomTree.  # noqa: E501
        :rtype: float
        """
        return self._leaf_area_index

    @leaf_area_index.setter
    def leaf_area_index(self, leaf_area_index):
        """Sets the leaf_area_index of this CustomTree.

        Leaf Area Index (LAI) is a dimensionless quantity that is defined as the leaf area per unit ground surface area in broadle af canopies  # noqa: E501

        :param leaf_area_index: The leaf_area_index of this CustomTree.  # noqa: E501
        :type: float
        """

        self._leaf_area_index = leaf_area_index

    @property
    def average_tree_height(self):
        """Gets the average_tree_height of this CustomTree.  # noqa: E501


        :return: The average_tree_height of this CustomTree.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._average_tree_height

    @average_tree_height.setter
    def average_tree_height(self, average_tree_height):
        """Sets the average_tree_height of this CustomTree.


        :param average_tree_height: The average_tree_height of this CustomTree.  # noqa: E501
        :type: DimensionalLength
        """

        self._average_tree_height = average_tree_height

    @property
    def drag_coefficient(self):
        """Gets the drag_coefficient of this CustomTree.  # noqa: E501

        Drag coefficient of the tree canopy.  # noqa: E501

        :return: The drag_coefficient of this CustomTree.  # noqa: E501
        :rtype: float
        """
        return self._drag_coefficient

    @drag_coefficient.setter
    def drag_coefficient(self, drag_coefficient):
        """Sets the drag_coefficient of this CustomTree.

        Drag coefficient of the tree canopy.  # noqa: E501

        :param drag_coefficient: The drag_coefficient of this CustomTree.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                drag_coefficient is not None and drag_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `drag_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._drag_coefficient = drag_coefficient

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomTree):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomTree):
            return True

        return self.to_dict() != other.to_dict()
