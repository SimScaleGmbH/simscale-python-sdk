# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfAdvancedConceptsThermalResistanceNetworks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'resistance_top': 'DimensionalContactResistance',
        'resistance_bottom': 'DimensionalContactResistance',
        'resistance_sides': 'DimensionalContactResistance',
        'resistance_interface': 'DimensionalContactResistance',
        'network_power': 'DimensionalPower',
        'emissivity': 'float',
        'topological_reference': 'TopologicalReference'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'resistance_top': 'resistanceTop',
        'resistance_bottom': 'resistanceBottom',
        'resistance_sides': 'resistanceSides',
        'resistance_interface': 'resistanceInterface',
        'network_power': 'networkPower',
        'emissivity': 'emissivity',
        'topological_reference': 'topologicalReference'
    }

    discriminator_value_class_map = {
        'STAR_NETWORK': 'StarThermalResistanceNetwork',
        'TWO_RESISTOR_NETWORK': 'TwoResistorNetwork'
    }

    def __init__(self, type='TWO_RESISTOR_NETWORK', name=None, resistance_top=None, resistance_bottom=None, resistance_sides=None, resistance_interface=None, network_power=None, emissivity=None, topological_reference=None, local_vars_configuration=None):  # noqa: E501
        """OneOfAdvancedConceptsThermalResistanceNetworks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._resistance_top = None
        self._resistance_bottom = None
        self._resistance_sides = None
        self._resistance_interface = None
        self._network_power = None
        self._emissivity = None
        self._topological_reference = None
        self.discriminator = 'type'

        self.type = type
        if name is not None:
            self.name = name
        if resistance_top is not None:
            self.resistance_top = resistance_top
        if resistance_bottom is not None:
            self.resistance_bottom = resistance_bottom
        if resistance_sides is not None:
            self.resistance_sides = resistance_sides
        if resistance_interface is not None:
            self.resistance_interface = resistance_interface
        if network_power is not None:
            self.network_power = network_power
        if emissivity is not None:
            self.emissivity = emissivity
        if topological_reference is not None:
            self.topological_reference = topological_reference

    @property
    def type(self):
        """Gets the type of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501

        <br>A <i>Thermal Resistance Network</i> can be used to approximate the effect of heat sources and heat transfer from that source to the surrounding domain without resolving the source geometry.  Select the top face of the body you want to assign. <p>The models for <b>Thermal resistance network</b> are as follows:</p><ul><li><b>Star Network Resistance Model:</b> defines a thermal resistance network consisting out of a top, a board, a board to interface and four side resistances. A power source is assigned to the body.</li><li><b>Two resistor Model:</b> defines a thermal resistance network consisting out of a top, a board and a board to interface resistance. A power source is assigned to the body.</li></ul> <br> <a href='https://www.simscale.com/docs/simulation-setup/advanced-concepts/thermal-resistance-networks/' target='_blank'>Learn more</a>.  Schema name: TwoResistorNetwork  # noqa: E501

        :return: The type of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfAdvancedConceptsThermalResistanceNetworks.

        <br>A <i>Thermal Resistance Network</i> can be used to approximate the effect of heat sources and heat transfer from that source to the surrounding domain without resolving the source geometry.  Select the top face of the body you want to assign. <p>The models for <b>Thermal resistance network</b> are as follows:</p><ul><li><b>Star Network Resistance Model:</b> defines a thermal resistance network consisting out of a top, a board, a board to interface and four side resistances. A power source is assigned to the body.</li><li><b>Two resistor Model:</b> defines a thermal resistance network consisting out of a top, a board and a board to interface resistance. A power source is assigned to the body.</li></ul> <br> <a href='https://www.simscale.com/docs/simulation-setup/advanced-concepts/thermal-resistance-networks/' target='_blank'>Learn more</a>.  Schema name: TwoResistorNetwork  # noqa: E501

        :param type: The type of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The name of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param name: The name of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resistance_top(self):
        """Gets the resistance_top of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The resistance_top of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: DimensionalContactResistance
        """
        return self._resistance_top

    @resistance_top.setter
    def resistance_top(self, resistance_top):
        """Sets the resistance_top of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param resistance_top: The resistance_top of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: DimensionalContactResistance
        """

        self._resistance_top = resistance_top

    @property
    def resistance_bottom(self):
        """Gets the resistance_bottom of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The resistance_bottom of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: DimensionalContactResistance
        """
        return self._resistance_bottom

    @resistance_bottom.setter
    def resistance_bottom(self, resistance_bottom):
        """Sets the resistance_bottom of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param resistance_bottom: The resistance_bottom of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: DimensionalContactResistance
        """

        self._resistance_bottom = resistance_bottom

    @property
    def resistance_sides(self):
        """Gets the resistance_sides of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The resistance_sides of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: DimensionalContactResistance
        """
        return self._resistance_sides

    @resistance_sides.setter
    def resistance_sides(self, resistance_sides):
        """Sets the resistance_sides of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param resistance_sides: The resistance_sides of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: DimensionalContactResistance
        """

        self._resistance_sides = resistance_sides

    @property
    def resistance_interface(self):
        """Gets the resistance_interface of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The resistance_interface of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: DimensionalContactResistance
        """
        return self._resistance_interface

    @resistance_interface.setter
    def resistance_interface(self, resistance_interface):
        """Sets the resistance_interface of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param resistance_interface: The resistance_interface of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: DimensionalContactResistance
        """

        self._resistance_interface = resistance_interface

    @property
    def network_power(self):
        """Gets the network_power of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The network_power of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: DimensionalPower
        """
        return self._network_power

    @network_power.setter
    def network_power(self, network_power):
        """Sets the network_power of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param network_power: The network_power of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: DimensionalPower
        """

        self._network_power = network_power

    @property
    def emissivity(self):
        """Gets the emissivity of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The emissivity of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: float
        """
        return self._emissivity

    @emissivity.setter
    def emissivity(self, emissivity):
        """Sets the emissivity of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param emissivity: The emissivity of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                emissivity is not None and emissivity > 1):  # noqa: E501
            raise ValueError("Invalid value for `emissivity`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                emissivity is not None and emissivity < 0):  # noqa: E501
            raise ValueError("Invalid value for `emissivity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._emissivity = emissivity

    @property
    def topological_reference(self):
        """Gets the topological_reference of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501


        :return: The topological_reference of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this OneOfAdvancedConceptsThermalResistanceNetworks.


        :param topological_reference: The topological_reference of this OneOfAdvancedConceptsThermalResistanceNetworks.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfAdvancedConceptsThermalResistanceNetworks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfAdvancedConceptsThermalResistanceNetworks):
            return True

        return self.to_dict() != other.to_dict()
