# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class LayerAddingControls(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'relative_size': 'bool',
        'max_cancelled_layers_near_sharp_features': 'int',
        'feature_angle': 'DimensionalAngle',
        'slip_feature_angle': 'DimensionalAngle',
        'relax_iterations': 'int',
        'surface_normals_max_smoothing_iterations': 'int',
        'internal_mesh_max_smoothing_iterations': 'int',
        'layer_thickness_max_smoothing_iterations': 'int',
        'max_face_thickness_ratio': 'float',
        'max_thickness_to_medial_ratio': 'float',
        'min_median_axis_angle': 'DimensionalAngle',
        'buffer_cells_no_extrude': 'int',
        'layer_addition_max_iterations': 'int',
        'max_iterations_with_strict_quality_controls': 'int'
    }

    attribute_map = {
        'relative_size': 'relativeSize',
        'max_cancelled_layers_near_sharp_features': 'maxCancelledLayersNearSharpFeatures',
        'feature_angle': 'featureAngle',
        'slip_feature_angle': 'slipFeatureAngle',
        'relax_iterations': 'relaxIterations',
        'surface_normals_max_smoothing_iterations': 'surfaceNormalsMaxSmoothingIterations',
        'internal_mesh_max_smoothing_iterations': 'internalMeshMaxSmoothingIterations',
        'layer_thickness_max_smoothing_iterations': 'layerThicknessMaxSmoothingIterations',
        'max_face_thickness_ratio': 'maxFaceThicknessRatio',
        'max_thickness_to_medial_ratio': 'maxThicknessToMedialRatio',
        'min_median_axis_angle': 'minMedianAxisAngle',
        'buffer_cells_no_extrude': 'bufferCellsNoExtrude',
        'layer_addition_max_iterations': 'layerAdditionMaxIterations',
        'max_iterations_with_strict_quality_controls': 'maxIterationsWithStrictQualityControls'
    }

    def __init__(self, relative_size=None, max_cancelled_layers_near_sharp_features=None, feature_angle=None, slip_feature_angle=None, relax_iterations=None, surface_normals_max_smoothing_iterations=None, internal_mesh_max_smoothing_iterations=None, layer_thickness_max_smoothing_iterations=None, max_face_thickness_ratio=None, max_thickness_to_medial_ratio=None, min_median_axis_angle=None, buffer_cells_no_extrude=None, layer_addition_max_iterations=None, max_iterations_with_strict_quality_controls=None, local_vars_configuration=None):  # noqa: E501
        """LayerAddingControls - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._relative_size = None
        self._max_cancelled_layers_near_sharp_features = None
        self._feature_angle = None
        self._slip_feature_angle = None
        self._relax_iterations = None
        self._surface_normals_max_smoothing_iterations = None
        self._internal_mesh_max_smoothing_iterations = None
        self._layer_thickness_max_smoothing_iterations = None
        self._max_face_thickness_ratio = None
        self._max_thickness_to_medial_ratio = None
        self._min_median_axis_angle = None
        self._buffer_cells_no_extrude = None
        self._layer_addition_max_iterations = None
        self._max_iterations_with_strict_quality_controls = None
        self.discriminator = None

        if relative_size is not None:
            self.relative_size = relative_size
        if max_cancelled_layers_near_sharp_features is not None:
            self.max_cancelled_layers_near_sharp_features = max_cancelled_layers_near_sharp_features
        if feature_angle is not None:
            self.feature_angle = feature_angle
        if slip_feature_angle is not None:
            self.slip_feature_angle = slip_feature_angle
        if relax_iterations is not None:
            self.relax_iterations = relax_iterations
        if surface_normals_max_smoothing_iterations is not None:
            self.surface_normals_max_smoothing_iterations = surface_normals_max_smoothing_iterations
        if internal_mesh_max_smoothing_iterations is not None:
            self.internal_mesh_max_smoothing_iterations = internal_mesh_max_smoothing_iterations
        if layer_thickness_max_smoothing_iterations is not None:
            self.layer_thickness_max_smoothing_iterations = layer_thickness_max_smoothing_iterations
        if max_face_thickness_ratio is not None:
            self.max_face_thickness_ratio = max_face_thickness_ratio
        if max_thickness_to_medial_ratio is not None:
            self.max_thickness_to_medial_ratio = max_thickness_to_medial_ratio
        if min_median_axis_angle is not None:
            self.min_median_axis_angle = min_median_axis_angle
        if buffer_cells_no_extrude is not None:
            self.buffer_cells_no_extrude = buffer_cells_no_extrude
        if layer_addition_max_iterations is not None:
            self.layer_addition_max_iterations = layer_addition_max_iterations
        if max_iterations_with_strict_quality_controls is not None:
            self.max_iterations_with_strict_quality_controls = max_iterations_with_strict_quality_controls

    @property
    def relative_size(self):
        """Gets the relative_size of this LayerAddingControls.  # noqa: E501

        <p>If turned on, the length parameters for layer refinements (e.g. 'Thickness of the final layer', 'Minimum overall layer thickness') are multiplied by the local cell size outside that layer. Else, they are used as absolute lengths.</p>  # noqa: E501

        :return: The relative_size of this LayerAddingControls.  # noqa: E501
        :rtype: bool
        """
        return self._relative_size

    @relative_size.setter
    def relative_size(self, relative_size):
        """Sets the relative_size of this LayerAddingControls.

        <p>If turned on, the length parameters for layer refinements (e.g. 'Thickness of the final layer', 'Minimum overall layer thickness') are multiplied by the local cell size outside that layer. Else, they are used as absolute lengths.</p>  # noqa: E501

        :param relative_size: The relative_size of this LayerAddingControls.  # noqa: E501
        :type: bool
        """

        self._relative_size = relative_size

    @property
    def max_cancelled_layers_near_sharp_features(self):
        """Gets the max_cancelled_layers_near_sharp_features of this LayerAddingControls.  # noqa: E501

        <p>If the algorithm faces difficulty generating layers, this is the maximum number of layers that are NOT generated in that region. Such cases might occur near sharp features. Set to 0 to force layer generation for all cases.</p>  # noqa: E501

        :return: The max_cancelled_layers_near_sharp_features of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._max_cancelled_layers_near_sharp_features

    @max_cancelled_layers_near_sharp_features.setter
    def max_cancelled_layers_near_sharp_features(self, max_cancelled_layers_near_sharp_features):
        """Sets the max_cancelled_layers_near_sharp_features of this LayerAddingControls.

        <p>If the algorithm faces difficulty generating layers, this is the maximum number of layers that are NOT generated in that region. Such cases might occur near sharp features. Set to 0 to force layer generation for all cases.</p>  # noqa: E501

        :param max_cancelled_layers_near_sharp_features: The max_cancelled_layers_near_sharp_features of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_cancelled_layers_near_sharp_features is not None and max_cancelled_layers_near_sharp_features < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_cancelled_layers_near_sharp_features`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_cancelled_layers_near_sharp_features = max_cancelled_layers_near_sharp_features

    @property
    def feature_angle(self):
        """Gets the feature_angle of this LayerAddingControls.  # noqa: E501


        :return: The feature_angle of this LayerAddingControls.  # noqa: E501
        :rtype: DimensionalAngle
        """
        return self._feature_angle

    @feature_angle.setter
    def feature_angle(self, feature_angle):
        """Sets the feature_angle of this LayerAddingControls.


        :param feature_angle: The feature_angle of this LayerAddingControls.  # noqa: E501
        :type: DimensionalAngle
        """

        self._feature_angle = feature_angle

    @property
    def slip_feature_angle(self):
        """Gets the slip_feature_angle of this LayerAddingControls.  # noqa: E501


        :return: The slip_feature_angle of this LayerAddingControls.  # noqa: E501
        :rtype: DimensionalAngle
        """
        return self._slip_feature_angle

    @slip_feature_angle.setter
    def slip_feature_angle(self, slip_feature_angle):
        """Sets the slip_feature_angle of this LayerAddingControls.


        :param slip_feature_angle: The slip_feature_angle of this LayerAddingControls.  # noqa: E501
        :type: DimensionalAngle
        """

        self._slip_feature_angle = slip_feature_angle

    @property
    def relax_iterations(self):
        """Gets the relax_iterations of this LayerAddingControls.  # noqa: E501

        <p>Specify the maximum number of relaxation iterations for the snapping process for layers.</p>  # noqa: E501

        :return: The relax_iterations of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._relax_iterations

    @relax_iterations.setter
    def relax_iterations(self, relax_iterations):
        """Sets the relax_iterations of this LayerAddingControls.

        <p>Specify the maximum number of relaxation iterations for the snapping process for layers.</p>  # noqa: E501

        :param relax_iterations: The relax_iterations of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                relax_iterations is not None and relax_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `relax_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relax_iterations = relax_iterations

    @property
    def surface_normals_max_smoothing_iterations(self):
        """Gets the surface_normals_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501

        <p>Specify the maximum number of smoothing iterations for the surface normals.</p>  # noqa: E501

        :return: The surface_normals_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._surface_normals_max_smoothing_iterations

    @surface_normals_max_smoothing_iterations.setter
    def surface_normals_max_smoothing_iterations(self, surface_normals_max_smoothing_iterations):
        """Sets the surface_normals_max_smoothing_iterations of this LayerAddingControls.

        <p>Specify the maximum number of smoothing iterations for the surface normals.</p>  # noqa: E501

        :param surface_normals_max_smoothing_iterations: The surface_normals_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                surface_normals_max_smoothing_iterations is not None and surface_normals_max_smoothing_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `surface_normals_max_smoothing_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._surface_normals_max_smoothing_iterations = surface_normals_max_smoothing_iterations

    @property
    def internal_mesh_max_smoothing_iterations(self):
        """Gets the internal_mesh_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501

        <p>Specify the number of smoothing iterations for the interior mesh movement. This movement occurs in order to make space for layers.</p>  # noqa: E501

        :return: The internal_mesh_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._internal_mesh_max_smoothing_iterations

    @internal_mesh_max_smoothing_iterations.setter
    def internal_mesh_max_smoothing_iterations(self, internal_mesh_max_smoothing_iterations):
        """Sets the internal_mesh_max_smoothing_iterations of this LayerAddingControls.

        <p>Specify the number of smoothing iterations for the interior mesh movement. This movement occurs in order to make space for layers.</p>  # noqa: E501

        :param internal_mesh_max_smoothing_iterations: The internal_mesh_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                internal_mesh_max_smoothing_iterations is not None and internal_mesh_max_smoothing_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `internal_mesh_max_smoothing_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._internal_mesh_max_smoothing_iterations = internal_mesh_max_smoothing_iterations

    @property
    def layer_thickness_max_smoothing_iterations(self):
        """Gets the layer_thickness_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501

        <p>This specifies the number of iterations for smoothing of the overall layer thickness over different surface patches.</p>  # noqa: E501

        :return: The layer_thickness_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._layer_thickness_max_smoothing_iterations

    @layer_thickness_max_smoothing_iterations.setter
    def layer_thickness_max_smoothing_iterations(self, layer_thickness_max_smoothing_iterations):
        """Sets the layer_thickness_max_smoothing_iterations of this LayerAddingControls.

        <p>This specifies the number of iterations for smoothing of the overall layer thickness over different surface patches.</p>  # noqa: E501

        :param layer_thickness_max_smoothing_iterations: The layer_thickness_max_smoothing_iterations of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                layer_thickness_max_smoothing_iterations is not None and layer_thickness_max_smoothing_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `layer_thickness_max_smoothing_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._layer_thickness_max_smoothing_iterations = layer_thickness_max_smoothing_iterations

    @property
    def max_face_thickness_ratio(self):
        """Gets the max_face_thickness_ratio of this LayerAddingControls.  # noqa: E501

        <p>Specify the maximum allowable face aspect ratio beyond which layers will not be added.</p>  # noqa: E501

        :return: The max_face_thickness_ratio of this LayerAddingControls.  # noqa: E501
        :rtype: float
        """
        return self._max_face_thickness_ratio

    @max_face_thickness_ratio.setter
    def max_face_thickness_ratio(self, max_face_thickness_ratio):
        """Sets the max_face_thickness_ratio of this LayerAddingControls.

        <p>Specify the maximum allowable face aspect ratio beyond which layers will not be added.</p>  # noqa: E501

        :param max_face_thickness_ratio: The max_face_thickness_ratio of this LayerAddingControls.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                max_face_thickness_ratio is not None and max_face_thickness_ratio < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_face_thickness_ratio`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_face_thickness_ratio = max_face_thickness_ratio

    @property
    def max_thickness_to_medial_ratio(self):
        """Gets the max_thickness_to_medial_ratio of this LayerAddingControls.  # noqa: E501

        <p>The medial length is a measure of the aspect ratio for a non-quadrilateral face. This parameter prevents layer addition for non-quad faces that are highly anisotropic.</p>  # noqa: E501

        :return: The max_thickness_to_medial_ratio of this LayerAddingControls.  # noqa: E501
        :rtype: float
        """
        return self._max_thickness_to_medial_ratio

    @max_thickness_to_medial_ratio.setter
    def max_thickness_to_medial_ratio(self, max_thickness_to_medial_ratio):
        """Sets the max_thickness_to_medial_ratio of this LayerAddingControls.

        <p>The medial length is a measure of the aspect ratio for a non-quadrilateral face. This parameter prevents layer addition for non-quad faces that are highly anisotropic.</p>  # noqa: E501

        :param max_thickness_to_medial_ratio: The max_thickness_to_medial_ratio of this LayerAddingControls.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                max_thickness_to_medial_ratio is not None and max_thickness_to_medial_ratio < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_thickness_to_medial_ratio`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_thickness_to_medial_ratio = max_thickness_to_medial_ratio

    @property
    def min_median_axis_angle(self):
        """Gets the min_median_axis_angle of this LayerAddingControls.  # noqa: E501


        :return: The min_median_axis_angle of this LayerAddingControls.  # noqa: E501
        :rtype: DimensionalAngle
        """
        return self._min_median_axis_angle

    @min_median_axis_angle.setter
    def min_median_axis_angle(self, min_median_axis_angle):
        """Sets the min_median_axis_angle of this LayerAddingControls.


        :param min_median_axis_angle: The min_median_axis_angle of this LayerAddingControls.  # noqa: E501
        :type: DimensionalAngle
        """

        self._min_median_axis_angle = min_median_axis_angle

    @property
    def buffer_cells_no_extrude(self):
        """Gets the buffer_cells_no_extrude of this LayerAddingControls.  # noqa: E501

        <p>This parameter specifies the number of buffer cells to be extruded at cell-faces where layers terminate. Set to < 0 to disable.</p>  # noqa: E501

        :return: The buffer_cells_no_extrude of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._buffer_cells_no_extrude

    @buffer_cells_no_extrude.setter
    def buffer_cells_no_extrude(self, buffer_cells_no_extrude):
        """Sets the buffer_cells_no_extrude of this LayerAddingControls.

        <p>This parameter specifies the number of buffer cells to be extruded at cell-faces where layers terminate. Set to < 0 to disable.</p>  # noqa: E501

        :param buffer_cells_no_extrude: The buffer_cells_no_extrude of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                buffer_cells_no_extrude is not None and buffer_cells_no_extrude < 0):  # noqa: E501
            raise ValueError("Invalid value for `buffer_cells_no_extrude`, must be a value greater than or equal to `0`")  # noqa: E501

        self._buffer_cells_no_extrude = buffer_cells_no_extrude

    @property
    def layer_addition_max_iterations(self):
        """Gets the layer_addition_max_iterations of this LayerAddingControls.  # noqa: E501

        <p>Specify the overall layer addition iteration number. The algorithm will abort definitely as soon as this number is reached. In this case, the mesh might be illegal.</p>  # noqa: E501

        :return: The layer_addition_max_iterations of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._layer_addition_max_iterations

    @layer_addition_max_iterations.setter
    def layer_addition_max_iterations(self, layer_addition_max_iterations):
        """Sets the layer_addition_max_iterations of this LayerAddingControls.

        <p>Specify the overall layer addition iteration number. The algorithm will abort definitely as soon as this number is reached. In this case, the mesh might be illegal.</p>  # noqa: E501

        :param layer_addition_max_iterations: The layer_addition_max_iterations of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                layer_addition_max_iterations is not None and layer_addition_max_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `layer_addition_max_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._layer_addition_max_iterations = layer_addition_max_iterations

    @property
    def max_iterations_with_strict_quality_controls(self):
        """Gets the max_iterations_with_strict_quality_controls of this LayerAddingControls.  # noqa: E501

        <p>This parameter specifies the maximum number of layer iterations that are done with the mesh quality controls. On exceeding these, the algorithm switches to less strict controls specified in the 'relaxed' category.</p>  # noqa: E501

        :return: The max_iterations_with_strict_quality_controls of this LayerAddingControls.  # noqa: E501
        :rtype: int
        """
        return self._max_iterations_with_strict_quality_controls

    @max_iterations_with_strict_quality_controls.setter
    def max_iterations_with_strict_quality_controls(self, max_iterations_with_strict_quality_controls):
        """Sets the max_iterations_with_strict_quality_controls of this LayerAddingControls.

        <p>This parameter specifies the maximum number of layer iterations that are done with the mesh quality controls. On exceeding these, the algorithm switches to less strict controls specified in the 'relaxed' category.</p>  # noqa: E501

        :param max_iterations_with_strict_quality_controls: The max_iterations_with_strict_quality_controls of this LayerAddingControls.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_iterations_with_strict_quality_controls is not None and max_iterations_with_strict_quality_controls < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_iterations_with_strict_quality_controls`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_iterations_with_strict_quality_controls = max_iterations_with_strict_quality_controls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerAddingControls):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LayerAddingControls):
            return True

        return self.to_dict() != other.to_dict()
