# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class StandardHerschelBulkleyViscosityModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'consistency': 'DimensionalDynamicViscosity',
        'flow_index': 'DimensionalDimensionless',
        'fluid_yield_stress': 'DimensionalPressure',
        'critical_shear_rate': 'DimensionalStrainRate'
    }

    attribute_map = {
        'type': 'type',
        'consistency': 'consistency',
        'flow_index': 'flowIndex',
        'fluid_yield_stress': 'fluidYieldStress',
        'critical_shear_rate': 'criticalShearRate'
    }

    def __init__(self, type='STD_HERSCHEL_BULKLEY', consistency=None, flow_index=None, fluid_yield_stress=None, critical_shear_rate=None, local_vars_configuration=None):  # noqa: E501
        """StandardHerschelBulkleyViscosityModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._consistency = None
        self._flow_index = None
        self._fluid_yield_stress = None
        self._critical_shear_rate = None
        self.discriminator = None

        self.type = type
        if consistency is not None:
            self.consistency = consistency
        if flow_index is not None:
            self.flow_index = flow_index
        if fluid_yield_stress is not None:
            self.fluid_yield_stress = fluid_yield_stress
        if critical_shear_rate is not None:
            self.critical_shear_rate = critical_shear_rate

    @property
    def type(self):
        """Gets the type of this StandardHerschelBulkleyViscosityModel.  # noqa: E501

        Choose between <a href='https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model' target='_blank'>Newtonian</a> and <a href='https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/' target='_blank'>Non-Newtonian</a> viscosity models.  Schema name: StandardHerschelBulkleyViscosityModel  # noqa: E501

        :return: The type of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StandardHerschelBulkleyViscosityModel.

        Choose between <a href='https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model' target='_blank'>Newtonian</a> and <a href='https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/' target='_blank'>Non-Newtonian</a> viscosity models.  Schema name: StandardHerschelBulkleyViscosityModel  # noqa: E501

        :param type: The type of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def consistency(self):
        """Gets the consistency of this StandardHerschelBulkleyViscosityModel.  # noqa: E501


        :return: The consistency of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :rtype: DimensionalDynamicViscosity
        """
        return self._consistency

    @consistency.setter
    def consistency(self, consistency):
        """Sets the consistency of this StandardHerschelBulkleyViscosityModel.


        :param consistency: The consistency of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :type: DimensionalDynamicViscosity
        """

        self._consistency = consistency

    @property
    def flow_index(self):
        """Gets the flow_index of this StandardHerschelBulkleyViscosityModel.  # noqa: E501


        :return: The flow_index of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :rtype: DimensionalDimensionless
        """
        return self._flow_index

    @flow_index.setter
    def flow_index(self, flow_index):
        """Sets the flow_index of this StandardHerschelBulkleyViscosityModel.


        :param flow_index: The flow_index of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :type: DimensionalDimensionless
        """

        self._flow_index = flow_index

    @property
    def fluid_yield_stress(self):
        """Gets the fluid_yield_stress of this StandardHerschelBulkleyViscosityModel.  # noqa: E501


        :return: The fluid_yield_stress of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._fluid_yield_stress

    @fluid_yield_stress.setter
    def fluid_yield_stress(self, fluid_yield_stress):
        """Sets the fluid_yield_stress of this StandardHerschelBulkleyViscosityModel.


        :param fluid_yield_stress: The fluid_yield_stress of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :type: DimensionalPressure
        """

        self._fluid_yield_stress = fluid_yield_stress

    @property
    def critical_shear_rate(self):
        """Gets the critical_shear_rate of this StandardHerschelBulkleyViscosityModel.  # noqa: E501


        :return: The critical_shear_rate of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :rtype: DimensionalStrainRate
        """
        return self._critical_shear_rate

    @critical_shear_rate.setter
    def critical_shear_rate(self, critical_shear_rate):
        """Sets the critical_shear_rate of this StandardHerschelBulkleyViscosityModel.


        :param critical_shear_rate: The critical_shear_rate of this StandardHerschelBulkleyViscosityModel.  # noqa: E501
        :type: DimensionalStrainRate
        """

        self._critical_shear_rate = critical_shear_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardHerschelBulkleyViscosityModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandardHerschelBulkleyViscosityModel):
            return True

        return self.to_dict() != other.to_dict()
