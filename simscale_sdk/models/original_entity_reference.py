# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OriginalEntityReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'list[BodyPath]',
        'body': 'str',
        'entity': 'str',
        'attribute_list': 'list[EntityAttribute]'
    }

    attribute_map = {
        'path': 'path',
        'body': 'body',
        'entity': 'entity',
        'attribute_list': 'attributeList'
    }

    def __init__(self, path=None, body=None, entity=None, attribute_list=None, local_vars_configuration=None):  # noqa: E501
        """OriginalEntityReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._body = None
        self._entity = None
        self._attribute_list = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if body is not None:
            self.body = body
        if entity is not None:
            self.entity = entity
        if attribute_list is not None:
            self.attribute_list = attribute_list

    @property
    def path(self):
        """Gets the path of this OriginalEntityReference.  # noqa: E501

        The path from the root of the model.  # noqa: E501

        :return: The path of this OriginalEntityReference.  # noqa: E501
        :rtype: list[BodyPath]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this OriginalEntityReference.

        The path from the root of the model.  # noqa: E501

        :param path: The path of this OriginalEntityReference.  # noqa: E501
        :type: list[BodyPath]
        """

        self._path = path

    @property
    def body(self):
        """Gets the body of this OriginalEntityReference.  # noqa: E501

        The original body name.  # noqa: E501

        :return: The body of this OriginalEntityReference.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this OriginalEntityReference.

        The original body name.  # noqa: E501

        :param body: The body of this OriginalEntityReference.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def entity(self):
        """Gets the entity of this OriginalEntityReference.  # noqa: E501

        The original entity name.  # noqa: E501

        :return: The entity of this OriginalEntityReference.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this OriginalEntityReference.

        The original entity name.  # noqa: E501

        :param entity: The entity of this OriginalEntityReference.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def attribute_list(self):
        """Gets the attribute_list of this OriginalEntityReference.  # noqa: E501

        The attributes assigned to the entity.  # noqa: E501

        :return: The attribute_list of this OriginalEntityReference.  # noqa: E501
        :rtype: list[EntityAttribute]
        """
        return self._attribute_list

    @attribute_list.setter
    def attribute_list(self, attribute_list):
        """Sets the attribute_list of this OriginalEntityReference.

        The attributes assigned to the entity.  # noqa: E501

        :param attribute_list: The attribute_list of this OriginalEntityReference.  # noqa: E501
        :type: list[EntityAttribute]
        """

        self._attribute_list = attribute_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OriginalEntityReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OriginalEntityReference):
            return True

        return self.to_dict() != other.to_dict()
