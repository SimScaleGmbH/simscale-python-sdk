# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class CustomComfortCriterionResultControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'comfort_criterion_definition_v2': 'ComfortCriterionDefinitionV2',
        'out_of_bounds_name': 'str',
        'advanced_settings': 'AdvancedComfortCriterionSettings'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'comfort_criterion_definition_v2': 'comfortCriterionDefinitionV2',
        'out_of_bounds_name': 'outOfBoundsName',
        'advanced_settings': 'advancedSettings'
    }

    def __init__(self, type='CUSTOM_COMFORT_CRITERION', name=None, comfort_criterion_definition_v2=None, out_of_bounds_name=None, advanced_settings=None, local_vars_configuration=None):  # noqa: E501
        """CustomComfortCriterionResultControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._comfort_criterion_definition_v2 = None
        self._out_of_bounds_name = None
        self._advanced_settings = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if comfort_criterion_definition_v2 is not None:
            self.comfort_criterion_definition_v2 = comfort_criterion_definition_v2
        if out_of_bounds_name is not None:
            self.out_of_bounds_name = out_of_bounds_name
        if advanced_settings is not None:
            self.advanced_settings = advanced_settings

    @property
    def type(self):
        """Gets the type of this CustomComfortCriterionResultControl.  # noqa: E501

        Schema name: CustomComfortCriterionResultControl  # noqa: E501

        :return: The type of this CustomComfortCriterionResultControl.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomComfortCriterionResultControl.

        Schema name: CustomComfortCriterionResultControl  # noqa: E501

        :param type: The type of this CustomComfortCriterionResultControl.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this CustomComfortCriterionResultControl.  # noqa: E501


        :return: The name of this CustomComfortCriterionResultControl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomComfortCriterionResultControl.


        :param name: The name of this CustomComfortCriterionResultControl.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$/`")  # noqa: E501

        self._name = name

    @property
    def comfort_criterion_definition_v2(self):
        """Gets the comfort_criterion_definition_v2 of this CustomComfortCriterionResultControl.  # noqa: E501


        :return: The comfort_criterion_definition_v2 of this CustomComfortCriterionResultControl.  # noqa: E501
        :rtype: ComfortCriterionDefinitionV2
        """
        return self._comfort_criterion_definition_v2

    @comfort_criterion_definition_v2.setter
    def comfort_criterion_definition_v2(self, comfort_criterion_definition_v2):
        """Sets the comfort_criterion_definition_v2 of this CustomComfortCriterionResultControl.


        :param comfort_criterion_definition_v2: The comfort_criterion_definition_v2 of this CustomComfortCriterionResultControl.  # noqa: E501
        :type: ComfortCriterionDefinitionV2
        """

        self._comfort_criterion_definition_v2 = comfort_criterion_definition_v2

    @property
    def out_of_bounds_name(self):
        """Gets the out_of_bounds_name of this CustomComfortCriterionResultControl.  # noqa: E501

        It defines the name of the category that is reached if all defined criteria are exceeded.  # noqa: E501

        :return: The out_of_bounds_name of this CustomComfortCriterionResultControl.  # noqa: E501
        :rtype: str
        """
        return self._out_of_bounds_name

    @out_of_bounds_name.setter
    def out_of_bounds_name(self, out_of_bounds_name):
        """Sets the out_of_bounds_name of this CustomComfortCriterionResultControl.

        It defines the name of the category that is reached if all defined criteria are exceeded.  # noqa: E501

        :param out_of_bounds_name: The out_of_bounds_name of this CustomComfortCriterionResultControl.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                out_of_bounds_name is not None and not re.search(r'^[A-Za-z][-0-9a-zA-Z_\h]{0,31}$', out_of_bounds_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `out_of_bounds_name`, must be a follow pattern or equal to `/^[A-Za-z][-0-9a-zA-Z_\h]{0,31}$/`")  # noqa: E501

        self._out_of_bounds_name = out_of_bounds_name

    @property
    def advanced_settings(self):
        """Gets the advanced_settings of this CustomComfortCriterionResultControl.  # noqa: E501


        :return: The advanced_settings of this CustomComfortCriterionResultControl.  # noqa: E501
        :rtype: AdvancedComfortCriterionSettings
        """
        return self._advanced_settings

    @advanced_settings.setter
    def advanced_settings(self, advanced_settings):
        """Sets the advanced_settings of this CustomComfortCriterionResultControl.


        :param advanced_settings: The advanced_settings of this CustomComfortCriterionResultControl.  # noqa: E501
        :type: AdvancedComfortCriterionSettings
        """

        self._advanced_settings = advanced_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomComfortCriterionResultControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomComfortCriterionResultControl):
            return True

        return self.to_dict() != other.to_dict()
