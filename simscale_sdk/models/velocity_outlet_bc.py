# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class VelocityOutletBC(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'velocity': 'OneOfVelocityOutletBCVelocity',
        'phase_fraction': 'OneOfVelocityOutletBCPhaseFraction',
        'associated_phase_fractions': 'list[PhaseNameAndFixedValuePFBC]',
        'net_radiative_heat_flux': 'OneOfVelocityOutletBCNetRadiativeHeatFlux',
        'radiative_intensity_ray': 'OneOfVelocityOutletBCRadiativeIntensityRay',
        'topological_reference': 'TopologicalReference'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'velocity': 'velocity',
        'phase_fraction': 'phaseFraction',
        'associated_phase_fractions': 'associatedPhaseFractions',
        'net_radiative_heat_flux': 'netRadiativeHeatFlux',
        'radiative_intensity_ray': 'radiativeIntensityRay',
        'topological_reference': 'topologicalReference'
    }

    def __init__(self, type='VELOCITY_OUTLET_V7', name=None, velocity=None, phase_fraction=None, associated_phase_fractions=None, net_radiative_heat_flux=None, radiative_intensity_ray=None, topological_reference=None, local_vars_configuration=None):  # noqa: E501
        """VelocityOutletBC - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._velocity = None
        self._phase_fraction = None
        self._associated_phase_fractions = None
        self._net_radiative_heat_flux = None
        self._radiative_intensity_ray = None
        self._topological_reference = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if velocity is not None:
            self.velocity = velocity
        if phase_fraction is not None:
            self.phase_fraction = phase_fraction
        if associated_phase_fractions is not None:
            self.associated_phase_fractions = associated_phase_fractions
        if net_radiative_heat_flux is not None:
            self.net_radiative_heat_flux = net_radiative_heat_flux
        if radiative_intensity_ray is not None:
            self.radiative_intensity_ray = radiative_intensity_ray
        if topological_reference is not None:
            self.topological_reference = topological_reference

    @property
    def type(self):
        """Gets the type of this VelocityOutletBC.  # noqa: E501

        This boundary condition imposes a known <b>velocity</b>-based constraint at an outlet.  Schema name: VelocityOutletBC  # noqa: E501

        :return: The type of this VelocityOutletBC.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VelocityOutletBC.

        This boundary condition imposes a known <b>velocity</b>-based constraint at an outlet.  Schema name: VelocityOutletBC  # noqa: E501

        :param type: The type of this VelocityOutletBC.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this VelocityOutletBC.  # noqa: E501


        :return: The name of this VelocityOutletBC.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VelocityOutletBC.


        :param name: The name of this VelocityOutletBC.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def velocity(self):
        """Gets the velocity of this VelocityOutletBC.  # noqa: E501


        :return: The velocity of this VelocityOutletBC.  # noqa: E501
        :rtype: OneOfVelocityOutletBCVelocity
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this VelocityOutletBC.


        :param velocity: The velocity of this VelocityOutletBC.  # noqa: E501
        :type: OneOfVelocityOutletBCVelocity
        """

        self._velocity = velocity

    @property
    def phase_fraction(self):
        """Gets the phase_fraction of this VelocityOutletBC.  # noqa: E501


        :return: The phase_fraction of this VelocityOutletBC.  # noqa: E501
        :rtype: OneOfVelocityOutletBCPhaseFraction
        """
        return self._phase_fraction

    @phase_fraction.setter
    def phase_fraction(self, phase_fraction):
        """Sets the phase_fraction of this VelocityOutletBC.


        :param phase_fraction: The phase_fraction of this VelocityOutletBC.  # noqa: E501
        :type: OneOfVelocityOutletBCPhaseFraction
        """

        self._phase_fraction = phase_fraction

    @property
    def associated_phase_fractions(self):
        """Gets the associated_phase_fractions of this VelocityOutletBC.  # noqa: E501

        Please choose a boundary condition for phase fraction (alpha).  # noqa: E501

        :return: The associated_phase_fractions of this VelocityOutletBC.  # noqa: E501
        :rtype: list[PhaseNameAndFixedValuePFBC]
        """
        return self._associated_phase_fractions

    @associated_phase_fractions.setter
    def associated_phase_fractions(self, associated_phase_fractions):
        """Sets the associated_phase_fractions of this VelocityOutletBC.

        Please choose a boundary condition for phase fraction (alpha).  # noqa: E501

        :param associated_phase_fractions: The associated_phase_fractions of this VelocityOutletBC.  # noqa: E501
        :type: list[PhaseNameAndFixedValuePFBC]
        """

        self._associated_phase_fractions = associated_phase_fractions

    @property
    def net_radiative_heat_flux(self):
        """Gets the net_radiative_heat_flux of this VelocityOutletBC.  # noqa: E501


        :return: The net_radiative_heat_flux of this VelocityOutletBC.  # noqa: E501
        :rtype: OneOfVelocityOutletBCNetRadiativeHeatFlux
        """
        return self._net_radiative_heat_flux

    @net_radiative_heat_flux.setter
    def net_radiative_heat_flux(self, net_radiative_heat_flux):
        """Sets the net_radiative_heat_flux of this VelocityOutletBC.


        :param net_radiative_heat_flux: The net_radiative_heat_flux of this VelocityOutletBC.  # noqa: E501
        :type: OneOfVelocityOutletBCNetRadiativeHeatFlux
        """

        self._net_radiative_heat_flux = net_radiative_heat_flux

    @property
    def radiative_intensity_ray(self):
        """Gets the radiative_intensity_ray of this VelocityOutletBC.  # noqa: E501


        :return: The radiative_intensity_ray of this VelocityOutletBC.  # noqa: E501
        :rtype: OneOfVelocityOutletBCRadiativeIntensityRay
        """
        return self._radiative_intensity_ray

    @radiative_intensity_ray.setter
    def radiative_intensity_ray(self, radiative_intensity_ray):
        """Sets the radiative_intensity_ray of this VelocityOutletBC.


        :param radiative_intensity_ray: The radiative_intensity_ray of this VelocityOutletBC.  # noqa: E501
        :type: OneOfVelocityOutletBCRadiativeIntensityRay
        """

        self._radiative_intensity_ray = radiative_intensity_ray

    @property
    def topological_reference(self):
        """Gets the topological_reference of this VelocityOutletBC.  # noqa: E501


        :return: The topological_reference of this VelocityOutletBC.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this VelocityOutletBC.


        :param topological_reference: The topological_reference of this VelocityOutletBC.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VelocityOutletBC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VelocityOutletBC):
            return True

        return self.to_dict() != other.to_dict()
