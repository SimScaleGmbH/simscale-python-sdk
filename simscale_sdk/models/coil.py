# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class Coil(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'topology': 'OneOfCoilTopology',
        'coil_type': 'OneOfCoilCoilType',
        'excitation': 'OneOfCoilExcitation'
    }

    attribute_map = {
        'name': 'name',
        'topology': 'topology',
        'coil_type': 'coilType',
        'excitation': 'excitation'
    }

    def __init__(self, name=None, topology=None, coil_type=None, excitation=None, local_vars_configuration=None):  # noqa: E501
        """Coil - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._topology = None
        self._coil_type = None
        self._excitation = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if topology is not None:
            self.topology = topology
        if coil_type is not None:
            self.coil_type = coil_type
        if excitation is not None:
            self.excitation = excitation

    @property
    def name(self):
        """Gets the name of this Coil.  # noqa: E501


        :return: The name of this Coil.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Coil.


        :param name: The name of this Coil.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def topology(self):
        """Gets the topology of this Coil.  # noqa: E501


        :return: The topology of this Coil.  # noqa: E501
        :rtype: OneOfCoilTopology
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this Coil.


        :param topology: The topology of this Coil.  # noqa: E501
        :type: OneOfCoilTopology
        """

        self._topology = topology

    @property
    def coil_type(self):
        """Gets the coil_type of this Coil.  # noqa: E501


        :return: The coil_type of this Coil.  # noqa: E501
        :rtype: OneOfCoilCoilType
        """
        return self._coil_type

    @coil_type.setter
    def coil_type(self, coil_type):
        """Sets the coil_type of this Coil.


        :param coil_type: The coil_type of this Coil.  # noqa: E501
        :type: OneOfCoilCoilType
        """

        self._coil_type = coil_type

    @property
    def excitation(self):
        """Gets the excitation of this Coil.  # noqa: E501


        :return: The excitation of this Coil.  # noqa: E501
        :rtype: OneOfCoilExcitation
        """
        return self._excitation

    @excitation.setter
    def excitation(self, excitation):
        """Sets the excitation of this Coil.


        :param excitation: The excitation of this Coil.  # noqa: E501
        :type: OneOfCoilExcitation
        """

        self._excitation = excitation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Coil):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Coil):
            return True

        return self.to_dict() != other.to_dict()
