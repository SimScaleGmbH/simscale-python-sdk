# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class MarcNonlinearSolverSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'iterative_procedure': 'str',
        'initial_stress_stiffness_contribution': 'str',
        'max_number_of_recycles': 'int',
        'min_number_of_recycles': 'int',
        'convergence_method': 'OneOfMarcNonlinearSolverSettingsConvergenceMethod'
    }

    attribute_map = {
        'iterative_procedure': 'iterativeProcedure',
        'initial_stress_stiffness_contribution': 'initialStressStiffnessContribution',
        'max_number_of_recycles': 'maxNumberOfRecycles',
        'min_number_of_recycles': 'minNumberOfRecycles',
        'convergence_method': 'convergenceMethod'
    }

    def __init__(self, iterative_procedure=None, initial_stress_stiffness_contribution=None, max_number_of_recycles=None, min_number_of_recycles=None, convergence_method=None, local_vars_configuration=None):  # noqa: E501
        """MarcNonlinearSolverSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._iterative_procedure = None
        self._initial_stress_stiffness_contribution = None
        self._max_number_of_recycles = None
        self._min_number_of_recycles = None
        self._convergence_method = None
        self.discriminator = None

        if iterative_procedure is not None:
            self.iterative_procedure = iterative_procedure
        if initial_stress_stiffness_contribution is not None:
            self.initial_stress_stiffness_contribution = initial_stress_stiffness_contribution
        if max_number_of_recycles is not None:
            self.max_number_of_recycles = max_number_of_recycles
        if min_number_of_recycles is not None:
            self.min_number_of_recycles = min_number_of_recycles
        if convergence_method is not None:
            self.convergence_method = convergence_method

    @property
    def iterative_procedure(self):
        """Gets the iterative_procedure of this MarcNonlinearSolverSettings.  # noqa: E501


        :return: The iterative_procedure of this MarcNonlinearSolverSettings.  # noqa: E501
        :rtype: str
        """
        return self._iterative_procedure

    @iterative_procedure.setter
    def iterative_procedure(self, iterative_procedure):
        """Sets the iterative_procedure of this MarcNonlinearSolverSettings.


        :param iterative_procedure: The iterative_procedure of this MarcNonlinearSolverSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL_NEWTON_RAPHSON", "MODIFIED_NEWTON_RAPHSON", "NEWTON_RAPHSON_STRAIN_CORRECTION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and iterative_procedure not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `iterative_procedure` ({0}), must be one of {1}"  # noqa: E501
                .format(iterative_procedure, allowed_values)
            )

        self._iterative_procedure = iterative_procedure

    @property
    def initial_stress_stiffness_contribution(self):
        """Gets the initial_stress_stiffness_contribution of this MarcNonlinearSolverSettings.  # noqa: E501


        :return: The initial_stress_stiffness_contribution of this MarcNonlinearSolverSettings.  # noqa: E501
        :rtype: str
        """
        return self._initial_stress_stiffness_contribution

    @initial_stress_stiffness_contribution.setter
    def initial_stress_stiffness_contribution(self, initial_stress_stiffness_contribution):
        """Sets the initial_stress_stiffness_contribution of this MarcNonlinearSolverSettings.


        :param initial_stress_stiffness_contribution: The initial_stress_stiffness_contribution of this MarcNonlinearSolverSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL_CONTRIBUTION", "NO_CONTRIBUTION", "TENSILE_STRESS", "DEVIATORIC_STRESS", "BEGIN_INCREMENT_STRESS", "PRINCIPAL_TENSILE_STRESS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and initial_stress_stiffness_contribution not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `initial_stress_stiffness_contribution` ({0}), must be one of {1}"  # noqa: E501
                .format(initial_stress_stiffness_contribution, allowed_values)
            )

        self._initial_stress_stiffness_contribution = initial_stress_stiffness_contribution

    @property
    def max_number_of_recycles(self):
        """Gets the max_number_of_recycles of this MarcNonlinearSolverSettings.  # noqa: E501


        :return: The max_number_of_recycles of this MarcNonlinearSolverSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_recycles

    @max_number_of_recycles.setter
    def max_number_of_recycles(self, max_number_of_recycles):
        """Sets the max_number_of_recycles of this MarcNonlinearSolverSettings.


        :param max_number_of_recycles: The max_number_of_recycles of this MarcNonlinearSolverSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_number_of_recycles is not None and max_number_of_recycles < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_number_of_recycles`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_number_of_recycles = max_number_of_recycles

    @property
    def min_number_of_recycles(self):
        """Gets the min_number_of_recycles of this MarcNonlinearSolverSettings.  # noqa: E501


        :return: The min_number_of_recycles of this MarcNonlinearSolverSettings.  # noqa: E501
        :rtype: int
        """
        return self._min_number_of_recycles

    @min_number_of_recycles.setter
    def min_number_of_recycles(self, min_number_of_recycles):
        """Sets the min_number_of_recycles of this MarcNonlinearSolverSettings.


        :param min_number_of_recycles: The min_number_of_recycles of this MarcNonlinearSolverSettings.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                min_number_of_recycles is not None and min_number_of_recycles < 0):  # noqa: E501
            raise ValueError("Invalid value for `min_number_of_recycles`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_number_of_recycles = min_number_of_recycles

    @property
    def convergence_method(self):
        """Gets the convergence_method of this MarcNonlinearSolverSettings.  # noqa: E501


        :return: The convergence_method of this MarcNonlinearSolverSettings.  # noqa: E501
        :rtype: OneOfMarcNonlinearSolverSettingsConvergenceMethod
        """
        return self._convergence_method

    @convergence_method.setter
    def convergence_method(self, convergence_method):
        """Sets the convergence_method of this MarcNonlinearSolverSettings.


        :param convergence_method: The convergence_method of this MarcNonlinearSolverSettings.  # noqa: E501
        :type: OneOfMarcNonlinearSolverSettingsConvergenceMethod
        """

        self._convergence_method = convergence_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarcNonlinearSolverSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarcNonlinearSolverSettings):
            return True

        return self.to_dict() != other.to_dict()
