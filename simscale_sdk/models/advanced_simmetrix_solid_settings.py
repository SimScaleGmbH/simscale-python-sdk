# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class AdvancedSimmetrixSolidSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'small_feature_tolerance': 'DimensionalLength',
        'gap_elements': 'float',
        'global_gradation_rate': 'float'
    }

    attribute_map = {
        'small_feature_tolerance': 'smallFeatureTolerance',
        'gap_elements': 'gapElements',
        'global_gradation_rate': 'globalGradationRate'
    }

    def __init__(self, small_feature_tolerance=None, gap_elements=None, global_gradation_rate=None, local_vars_configuration=None):  # noqa: E501
        """AdvancedSimmetrixSolidSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._small_feature_tolerance = None
        self._gap_elements = None
        self._global_gradation_rate = None
        self.discriminator = None

        if small_feature_tolerance is not None:
            self.small_feature_tolerance = small_feature_tolerance
        if gap_elements is not None:
            self.gap_elements = gap_elements
        if global_gradation_rate is not None:
            self.global_gradation_rate = global_gradation_rate

    @property
    def small_feature_tolerance(self):
        """Gets the small_feature_tolerance of this AdvancedSimmetrixSolidSettings.  # noqa: E501


        :return: The small_feature_tolerance of this AdvancedSimmetrixSolidSettings.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._small_feature_tolerance

    @small_feature_tolerance.setter
    def small_feature_tolerance(self, small_feature_tolerance):
        """Sets the small_feature_tolerance of this AdvancedSimmetrixSolidSettings.


        :param small_feature_tolerance: The small_feature_tolerance of this AdvancedSimmetrixSolidSettings.  # noqa: E501
        :type: DimensionalLength
        """

        self._small_feature_tolerance = small_feature_tolerance

    @property
    def gap_elements(self):
        """Gets the gap_elements of this AdvancedSimmetrixSolidSettings.  # noqa: E501

        <p>Define a target number of elements across thin gaps. The <i>Gap refinement factor</i> is the ratio between gap thickness and the cell longest edge in that gap. <a href='https://www.simscale.com/docs/simulation-setup/meshing/standard/#gap-refinement-factor' target='_blank'>Learn more</a>.<img src=\"/spec/resources/help/imgs/simmetrix-gap-elements.png\" class=\"helpPopupImage\"/>Example of gap refinements applied with a target of 4 elements across the thickness</p>  # noqa: E501

        :return: The gap_elements of this AdvancedSimmetrixSolidSettings.  # noqa: E501
        :rtype: float
        """
        return self._gap_elements

    @gap_elements.setter
    def gap_elements(self, gap_elements):
        """Sets the gap_elements of this AdvancedSimmetrixSolidSettings.

        <p>Define a target number of elements across thin gaps. The <i>Gap refinement factor</i> is the ratio between gap thickness and the cell longest edge in that gap. <a href='https://www.simscale.com/docs/simulation-setup/meshing/standard/#gap-refinement-factor' target='_blank'>Learn more</a>.<img src=\"/spec/resources/help/imgs/simmetrix-gap-elements.png\" class=\"helpPopupImage\"/>Example of gap refinements applied with a target of 4 elements across the thickness</p>  # noqa: E501

        :param gap_elements: The gap_elements of this AdvancedSimmetrixSolidSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                gap_elements is not None and gap_elements > 4):  # noqa: E501
            raise ValueError("Invalid value for `gap_elements`, must be a value less than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                gap_elements is not None and gap_elements < 0):  # noqa: E501
            raise ValueError("Invalid value for `gap_elements`, must be a value greater than or equal to `0`")  # noqa: E501

        self._gap_elements = gap_elements

    @property
    def global_gradation_rate(self):
        """Gets the global_gradation_rate of this AdvancedSimmetrixSolidSettings.  # noqa: E501

        <p>Adjust the transition from small to large cells. This value is the ratio between the size of two adjacent cells. The allowed range is 1.0 - 3.0. 1.0 would produce a uniform mesh with the smallest size everywhere. This is generally not recommended, as it may produce very large meshes.</p>  # noqa: E501

        :return: The global_gradation_rate of this AdvancedSimmetrixSolidSettings.  # noqa: E501
        :rtype: float
        """
        return self._global_gradation_rate

    @global_gradation_rate.setter
    def global_gradation_rate(self, global_gradation_rate):
        """Sets the global_gradation_rate of this AdvancedSimmetrixSolidSettings.

        <p>Adjust the transition from small to large cells. This value is the ratio between the size of two adjacent cells. The allowed range is 1.0 - 3.0. 1.0 would produce a uniform mesh with the smallest size everywhere. This is generally not recommended, as it may produce very large meshes.</p>  # noqa: E501

        :param global_gradation_rate: The global_gradation_rate of this AdvancedSimmetrixSolidSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                global_gradation_rate is not None and global_gradation_rate > 3):  # noqa: E501
            raise ValueError("Invalid value for `global_gradation_rate`, must be a value less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                global_gradation_rate is not None and global_gradation_rate < 1):  # noqa: E501
            raise ValueError("Invalid value for `global_gradation_rate`, must be a value greater than or equal to `1`")  # noqa: E501

        self._global_gradation_rate = global_gradation_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedSimmetrixSolidSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedSimmetrixSolidSettings):
            return True

        return self.to_dict() != other.to_dict()
