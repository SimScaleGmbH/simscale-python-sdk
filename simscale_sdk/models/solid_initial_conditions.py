# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SolidInitialConditions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'displacement': 'DimensionalVectorFunctionInitialConditionWithDomainsLength',
        'velocity': 'DimensionalVectorFunctionInitialConditionWithDomainsSpeed',
        'acceleration': 'DimensionalVectorFunctionInitialConditionWithDomainsAcceleration',
        'stress': 'StressInitialConditionDomains',
        'temperature': 'DimensionalFunctionInitialConditionDomainsTemperature'
    }

    attribute_map = {
        'displacement': 'displacement',
        'velocity': 'velocity',
        'acceleration': 'acceleration',
        'stress': 'stress',
        'temperature': 'temperature'
    }

    def __init__(self, displacement=None, velocity=None, acceleration=None, stress=None, temperature=None, local_vars_configuration=None):  # noqa: E501
        """SolidInitialConditions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._displacement = None
        self._velocity = None
        self._acceleration = None
        self._stress = None
        self._temperature = None
        self.discriminator = None

        if displacement is not None:
            self.displacement = displacement
        if velocity is not None:
            self.velocity = velocity
        if acceleration is not None:
            self.acceleration = acceleration
        if stress is not None:
            self.stress = stress
        if temperature is not None:
            self.temperature = temperature

    @property
    def displacement(self):
        """Gets the displacement of this SolidInitialConditions.  # noqa: E501


        :return: The displacement of this SolidInitialConditions.  # noqa: E501
        :rtype: DimensionalVectorFunctionInitialConditionWithDomainsLength
        """
        return self._displacement

    @displacement.setter
    def displacement(self, displacement):
        """Sets the displacement of this SolidInitialConditions.


        :param displacement: The displacement of this SolidInitialConditions.  # noqa: E501
        :type: DimensionalVectorFunctionInitialConditionWithDomainsLength
        """

        self._displacement = displacement

    @property
    def velocity(self):
        """Gets the velocity of this SolidInitialConditions.  # noqa: E501


        :return: The velocity of this SolidInitialConditions.  # noqa: E501
        :rtype: DimensionalVectorFunctionInitialConditionWithDomainsSpeed
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this SolidInitialConditions.


        :param velocity: The velocity of this SolidInitialConditions.  # noqa: E501
        :type: DimensionalVectorFunctionInitialConditionWithDomainsSpeed
        """

        self._velocity = velocity

    @property
    def acceleration(self):
        """Gets the acceleration of this SolidInitialConditions.  # noqa: E501


        :return: The acceleration of this SolidInitialConditions.  # noqa: E501
        :rtype: DimensionalVectorFunctionInitialConditionWithDomainsAcceleration
        """
        return self._acceleration

    @acceleration.setter
    def acceleration(self, acceleration):
        """Sets the acceleration of this SolidInitialConditions.


        :param acceleration: The acceleration of this SolidInitialConditions.  # noqa: E501
        :type: DimensionalVectorFunctionInitialConditionWithDomainsAcceleration
        """

        self._acceleration = acceleration

    @property
    def stress(self):
        """Gets the stress of this SolidInitialConditions.  # noqa: E501


        :return: The stress of this SolidInitialConditions.  # noqa: E501
        :rtype: StressInitialConditionDomains
        """
        return self._stress

    @stress.setter
    def stress(self, stress):
        """Sets the stress of this SolidInitialConditions.


        :param stress: The stress of this SolidInitialConditions.  # noqa: E501
        :type: StressInitialConditionDomains
        """

        self._stress = stress

    @property
    def temperature(self):
        """Gets the temperature of this SolidInitialConditions.  # noqa: E501


        :return: The temperature of this SolidInitialConditions.  # noqa: E501
        :rtype: DimensionalFunctionInitialConditionDomainsTemperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this SolidInitialConditions.


        :param temperature: The temperature of this SolidInitialConditions.  # noqa: E501
        :type: DimensionalFunctionInitialConditionDomainsTemperature
        """

        self._temperature = temperature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolidInitialConditions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolidInitialConditions):
            return True

        return self.to_dict() != other.to_dict()
