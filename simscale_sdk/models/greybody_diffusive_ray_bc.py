# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class GreybodyDiffusiveRayBC(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'emissivity': 'float'
    }

    attribute_map = {
        'type': 'type',
        'emissivity': 'emissivity'
    }

    def __init__(self, type='GREYBODY_DIFFUSIVE_RAY', emissivity=None, local_vars_configuration=None):  # noqa: E501
        """GreybodyDiffusiveRayBC - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._emissivity = None
        self.discriminator = None

        self.type = type
        if emissivity is not None:
            self.emissivity = emissivity

    @property
    def type(self):
        """Gets the type of this GreybodyDiffusiveRayBC.  # noqa: E501

        <p><b>Radiative behaviour of the wall</b>. The Kirchhoff's law of thermal radiation is applied in all options. This means that the <b>absorptivity of the surface is equal to its emissivity</b>. <br> <ul><li><b>Opaque</b> is applied to surfaces with transmissivity equal to 0. The radiation that hits the surface will be absorbed and reflected, but not transmitted, e.g.: brick or concrete walls.</li><li><b>Transparent</b> is applied to surfaces with transmissivity equal to 1. The radiation that hits the surface will be fully transmitted to the other side, e.g.: inlets, outlets or regular windows.</li><li><b>Semi-transparent</b> is applied to non-fully transparent surfaces. The radiation that hits the surface will be absorbed, reflected and transmitted, e.g. some stained glass windows.</li></ul></p>  Schema name: GreybodyDiffusiveRayBC  # noqa: E501

        :return: The type of this GreybodyDiffusiveRayBC.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GreybodyDiffusiveRayBC.

        <p><b>Radiative behaviour of the wall</b>. The Kirchhoff's law of thermal radiation is applied in all options. This means that the <b>absorptivity of the surface is equal to its emissivity</b>. <br> <ul><li><b>Opaque</b> is applied to surfaces with transmissivity equal to 0. The radiation that hits the surface will be absorbed and reflected, but not transmitted, e.g.: brick or concrete walls.</li><li><b>Transparent</b> is applied to surfaces with transmissivity equal to 1. The radiation that hits the surface will be fully transmitted to the other side, e.g.: inlets, outlets or regular windows.</li><li><b>Semi-transparent</b> is applied to non-fully transparent surfaces. The radiation that hits the surface will be absorbed, reflected and transmitted, e.g. some stained glass windows.</li></ul></p>  Schema name: GreybodyDiffusiveRayBC  # noqa: E501

        :param type: The type of this GreybodyDiffusiveRayBC.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def emissivity(self):
        """Gets the emissivity of this GreybodyDiffusiveRayBC.  # noqa: E501


        :return: The emissivity of this GreybodyDiffusiveRayBC.  # noqa: E501
        :rtype: float
        """
        return self._emissivity

    @emissivity.setter
    def emissivity(self, emissivity):
        """Sets the emissivity of this GreybodyDiffusiveRayBC.


        :param emissivity: The emissivity of this GreybodyDiffusiveRayBC.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                emissivity is not None and emissivity > 1):  # noqa: E501
            raise ValueError("Invalid value for `emissivity`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                emissivity is not None and emissivity < 0):  # noqa: E501
            raise ValueError("Invalid value for `emissivity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._emissivity = emissivity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GreybodyDiffusiveRayBC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GreybodyDiffusiveRayBC):
            return True

        return self.to_dict() != other.to_dict()
