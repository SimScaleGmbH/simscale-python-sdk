# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SolidCompressibleMaterial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'specie': 'SpecieDefault',
        'transport': 'OneOfSolidCompressibleMaterialTransport',
        'emissivity': 'float',
        'electric_conductivity_type': 'OneOfSolidCompressibleMaterialElectricConductivityType',
        'topological_reference': 'TopologicalReference',
        'built_in_material': 'str',
        'material_library_reference': 'MaterialLibraryReference'
    }

    attribute_map = {
        'name': 'name',
        'specie': 'specie',
        'transport': 'transport',
        'emissivity': 'emissivity',
        'electric_conductivity_type': 'electricConductivityType',
        'topological_reference': 'topologicalReference',
        'built_in_material': 'builtInMaterial',
        'material_library_reference': 'materialLibraryReference'
    }

    def __init__(self, name=None, specie=None, transport=None, emissivity=None, electric_conductivity_type=None, topological_reference=None, built_in_material=None, material_library_reference=None, local_vars_configuration=None):  # noqa: E501
        """SolidCompressibleMaterial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._specie = None
        self._transport = None
        self._emissivity = None
        self._electric_conductivity_type = None
        self._topological_reference = None
        self._built_in_material = None
        self._material_library_reference = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if specie is not None:
            self.specie = specie
        if transport is not None:
            self.transport = transport
        if emissivity is not None:
            self.emissivity = emissivity
        if electric_conductivity_type is not None:
            self.electric_conductivity_type = electric_conductivity_type
        if topological_reference is not None:
            self.topological_reference = topological_reference
        if built_in_material is not None:
            self.built_in_material = built_in_material
        if material_library_reference is not None:
            self.material_library_reference = material_library_reference

    @property
    def name(self):
        """Gets the name of this SolidCompressibleMaterial.  # noqa: E501


        :return: The name of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SolidCompressibleMaterial.


        :param name: The name of this SolidCompressibleMaterial.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def specie(self):
        """Gets the specie of this SolidCompressibleMaterial.  # noqa: E501


        :return: The specie of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: SpecieDefault
        """
        return self._specie

    @specie.setter
    def specie(self, specie):
        """Sets the specie of this SolidCompressibleMaterial.


        :param specie: The specie of this SolidCompressibleMaterial.  # noqa: E501
        :type: SpecieDefault
        """

        self._specie = specie

    @property
    def transport(self):
        """Gets the transport of this SolidCompressibleMaterial.  # noqa: E501


        :return: The transport of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: OneOfSolidCompressibleMaterialTransport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this SolidCompressibleMaterial.


        :param transport: The transport of this SolidCompressibleMaterial.  # noqa: E501
        :type: OneOfSolidCompressibleMaterialTransport
        """

        self._transport = transport

    @property
    def emissivity(self):
        """Gets the emissivity of this SolidCompressibleMaterial.  # noqa: E501


        :return: The emissivity of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: float
        """
        return self._emissivity

    @emissivity.setter
    def emissivity(self, emissivity):
        """Sets the emissivity of this SolidCompressibleMaterial.


        :param emissivity: The emissivity of this SolidCompressibleMaterial.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                emissivity is not None and emissivity > 1):  # noqa: E501
            raise ValueError("Invalid value for `emissivity`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                emissivity is not None and emissivity < 0):  # noqa: E501
            raise ValueError("Invalid value for `emissivity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._emissivity = emissivity

    @property
    def electric_conductivity_type(self):
        """Gets the electric_conductivity_type of this SolidCompressibleMaterial.  # noqa: E501


        :return: The electric_conductivity_type of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: OneOfSolidCompressibleMaterialElectricConductivityType
        """
        return self._electric_conductivity_type

    @electric_conductivity_type.setter
    def electric_conductivity_type(self, electric_conductivity_type):
        """Sets the electric_conductivity_type of this SolidCompressibleMaterial.


        :param electric_conductivity_type: The electric_conductivity_type of this SolidCompressibleMaterial.  # noqa: E501
        :type: OneOfSolidCompressibleMaterialElectricConductivityType
        """

        self._electric_conductivity_type = electric_conductivity_type

    @property
    def topological_reference(self):
        """Gets the topological_reference of this SolidCompressibleMaterial.  # noqa: E501


        :return: The topological_reference of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this SolidCompressibleMaterial.


        :param topological_reference: The topological_reference of this SolidCompressibleMaterial.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    @property
    def built_in_material(self):
        """Gets the built_in_material of this SolidCompressibleMaterial.  # noqa: E501


        :return: The built_in_material of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: str
        """
        return self._built_in_material

    @built_in_material.setter
    def built_in_material(self, built_in_material):
        """Sets the built_in_material of this SolidCompressibleMaterial.


        :param built_in_material: The built_in_material of this SolidCompressibleMaterial.  # noqa: E501
        :type: str
        """

        self._built_in_material = built_in_material

    @property
    def material_library_reference(self):
        """Gets the material_library_reference of this SolidCompressibleMaterial.  # noqa: E501


        :return: The material_library_reference of this SolidCompressibleMaterial.  # noqa: E501
        :rtype: MaterialLibraryReference
        """
        return self._material_library_reference

    @material_library_reference.setter
    def material_library_reference(self, material_library_reference):
        """Sets the material_library_reference of this SolidCompressibleMaterial.


        :param material_library_reference: The material_library_reference of this SolidCompressibleMaterial.  # noqa: E501
        :type: MaterialLibraryReference
        """

        self._material_library_reference = material_library_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolidCompressibleMaterial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolidCompressibleMaterial):
            return True

        return self.to_dict() != other.to_dict()
