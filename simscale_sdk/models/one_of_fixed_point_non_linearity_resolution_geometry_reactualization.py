# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfFixedPointNonLinearityResolutionGeometryReactualization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'max_num_iterations': 'int',
        'iteration_criterion': 'float',
        'num_iterations': 'int'
    }

    attribute_map = {
        'type': 'type',
        'max_num_iterations': 'maxNumIterations',
        'iteration_criterion': 'iterationCriterion',
        'num_iterations': 'numIterations'
    }

    discriminator_value_class_map = {
        'AUTOMATIC': 'AutomaticReactualization',
        'MANUAL': 'ManualReactualization',
        'NONE': 'NoneReactualization'
    }

    def __init__(self, type='NONE', max_num_iterations=None, iteration_criterion=None, num_iterations=None, local_vars_configuration=None):  # noqa: E501
        """OneOfFixedPointNonLinearityResolutionGeometryReactualization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._max_num_iterations = None
        self._iteration_criterion = None
        self._num_iterations = None
        self.discriminator = 'type'

        self.type = type
        if max_num_iterations is not None:
            self.max_num_iterations = max_num_iterations
        if iteration_criterion is not None:
            self.iteration_criterion = iteration_criterion
        if num_iterations is not None:
            self.num_iterations = num_iterations

    @property
    def type(self):
        """Gets the type of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501

        Schema name: NoneReactualization  # noqa: E501

        :return: The type of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.

        Schema name: NoneReactualization  # noqa: E501

        :param type: The type of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def max_num_iterations(self):
        """Gets the max_num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501


        :return: The max_num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :rtype: int
        """
        return self._max_num_iterations

    @max_num_iterations.setter
    def max_num_iterations(self, max_num_iterations):
        """Sets the max_num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.


        :param max_num_iterations: The max_num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_num_iterations is not None and max_num_iterations < 1):  # noqa: E501
            raise ValueError("Invalid value for `max_num_iterations`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_num_iterations = max_num_iterations

    @property
    def iteration_criterion(self):
        """Gets the iteration_criterion of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501


        :return: The iteration_criterion of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :rtype: float
        """
        return self._iteration_criterion

    @iteration_criterion.setter
    def iteration_criterion(self, iteration_criterion):
        """Sets the iteration_criterion of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.


        :param iteration_criterion: The iteration_criterion of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                iteration_criterion is not None and iteration_criterion < 0):  # noqa: E501
            raise ValueError("Invalid value for `iteration_criterion`, must be a value greater than or equal to `0`")  # noqa: E501

        self._iteration_criterion = iteration_criterion

    @property
    def num_iterations(self):
        """Gets the num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501


        :return: The num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :rtype: int
        """
        return self._num_iterations

    @num_iterations.setter
    def num_iterations(self, num_iterations):
        """Sets the num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.


        :param num_iterations: The num_iterations of this OneOfFixedPointNonLinearityResolutionGeometryReactualization.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_iterations is not None and num_iterations < 1):  # noqa: E501
            raise ValueError("Invalid value for `num_iterations`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_iterations = num_iterations

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfFixedPointNonLinearityResolutionGeometryReactualization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfFixedPointNonLinearityResolutionGeometryReactualization):
            return True

        return self.to_dict() != other.to_dict()
