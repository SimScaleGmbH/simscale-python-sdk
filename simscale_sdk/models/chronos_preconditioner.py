# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ChronosPreconditioner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'iterations_srqcg': 'int',
        'smoother': 'str',
        'prolongation': 'str',
        'recycling': 'float',
        'improve_test_space': 'bool',
        'test_space_iterations': 'int'
    }

    attribute_map = {
        'type': 'type',
        'iterations_srqcg': 'iterationsSRQCG',
        'smoother': 'smoother',
        'prolongation': 'prolongation',
        'recycling': 'recycling',
        'improve_test_space': 'improveTestSpace',
        'test_space_iterations': 'testSpaceIterations'
    }

    def __init__(self, type='CHRONOS', iterations_srqcg=None, smoother=None, prolongation=None, recycling=None, improve_test_space=None, test_space_iterations=None, local_vars_configuration=None):  # noqa: E501
        """ChronosPreconditioner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._iterations_srqcg = None
        self._smoother = None
        self._prolongation = None
        self._recycling = None
        self._improve_test_space = None
        self._test_space_iterations = None
        self.discriminator = None

        self.type = type
        if iterations_srqcg is not None:
            self.iterations_srqcg = iterations_srqcg
        if smoother is not None:
            self.smoother = smoother
        if prolongation is not None:
            self.prolongation = prolongation
        if recycling is not None:
            self.recycling = recycling
        if improve_test_space is not None:
            self.improve_test_space = improve_test_space
        if test_space_iterations is not None:
            self.test_space_iterations = test_space_iterations

    @property
    def type(self):
        """Gets the type of this ChronosPreconditioner.  # noqa: E501

        Schema name: ChronosPreconditioner  # noqa: E501

        :return: The type of this ChronosPreconditioner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChronosPreconditioner.

        Schema name: ChronosPreconditioner  # noqa: E501

        :param type: The type of this ChronosPreconditioner.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def iterations_srqcg(self):
        """Gets the iterations_srqcg of this ChronosPreconditioner.  # noqa: E501


        :return: The iterations_srqcg of this ChronosPreconditioner.  # noqa: E501
        :rtype: int
        """
        return self._iterations_srqcg

    @iterations_srqcg.setter
    def iterations_srqcg(self, iterations_srqcg):
        """Sets the iterations_srqcg of this ChronosPreconditioner.


        :param iterations_srqcg: The iterations_srqcg of this ChronosPreconditioner.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                iterations_srqcg is not None and iterations_srqcg < 0):  # noqa: E501
            raise ValueError("Invalid value for `iterations_srqcg`, must be a value greater than or equal to `0`")  # noqa: E501

        self._iterations_srqcg = iterations_srqcg

    @property
    def smoother(self):
        """Gets the smoother of this ChronosPreconditioner.  # noqa: E501


        :return: The smoother of this ChronosPreconditioner.  # noqa: E501
        :rtype: str
        """
        return self._smoother

    @smoother.setter
    def smoother(self, smoother):
        """Sets the smoother of this ChronosPreconditioner.


        :param smoother: The smoother of this ChronosPreconditioner.  # noqa: E501
        :type: str
        """
        allowed_values = ["JACOBI", "FSAI_LIGHT", "FSAI_MEDIUM", "FSAI_HEAVY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and smoother not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `smoother` ({0}), must be one of {1}"  # noqa: E501
                .format(smoother, allowed_values)
            )

        self._smoother = smoother

    @property
    def prolongation(self):
        """Gets the prolongation of this ChronosPreconditioner.  # noqa: E501


        :return: The prolongation of this ChronosPreconditioner.  # noqa: E501
        :rtype: str
        """
        return self._prolongation

    @prolongation.setter
    def prolongation(self, prolongation):
        """Sets the prolongation of this ChronosPreconditioner.


        :param prolongation: The prolongation of this ChronosPreconditioner.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNSMOOTHED", "SMOOTHED", "ENERGY_MINIMIZATION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and prolongation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `prolongation` ({0}), must be one of {1}"  # noqa: E501
                .format(prolongation, allowed_values)
            )

        self._prolongation = prolongation

    @property
    def recycling(self):
        """Gets the recycling of this ChronosPreconditioner.  # noqa: E501


        :return: The recycling of this ChronosPreconditioner.  # noqa: E501
        :rtype: float
        """
        return self._recycling

    @recycling.setter
    def recycling(self, recycling):
        """Sets the recycling of this ChronosPreconditioner.


        :param recycling: The recycling of this ChronosPreconditioner.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                recycling is not None and recycling > 1):  # noqa: E501
            raise ValueError("Invalid value for `recycling`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                recycling is not None and recycling < 0):  # noqa: E501
            raise ValueError("Invalid value for `recycling`, must be a value greater than or equal to `0`")  # noqa: E501

        self._recycling = recycling

    @property
    def improve_test_space(self):
        """Gets the improve_test_space of this ChronosPreconditioner.  # noqa: E501


        :return: The improve_test_space of this ChronosPreconditioner.  # noqa: E501
        :rtype: bool
        """
        return self._improve_test_space

    @improve_test_space.setter
    def improve_test_space(self, improve_test_space):
        """Sets the improve_test_space of this ChronosPreconditioner.


        :param improve_test_space: The improve_test_space of this ChronosPreconditioner.  # noqa: E501
        :type: bool
        """

        self._improve_test_space = improve_test_space

    @property
    def test_space_iterations(self):
        """Gets the test_space_iterations of this ChronosPreconditioner.  # noqa: E501


        :return: The test_space_iterations of this ChronosPreconditioner.  # noqa: E501
        :rtype: int
        """
        return self._test_space_iterations

    @test_space_iterations.setter
    def test_space_iterations(self, test_space_iterations):
        """Sets the test_space_iterations of this ChronosPreconditioner.


        :param test_space_iterations: The test_space_iterations of this ChronosPreconditioner.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                test_space_iterations is not None and test_space_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `test_space_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._test_space_iterations = test_space_iterations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChronosPreconditioner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChronosPreconditioner):
            return True

        return self.to_dict() != other.to_dict()
