# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfMarcResultControlSolutionFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'displacement_type': 'GlobalDisplacement',
        'force_type': 'OneOfMarcForceResultControlItemForceType',
        'stress_type': 'OneOfMarcStressResultControlItemStressType',
        'strain_type': 'OneOfMarcStrainResultControlItemStrainType',
        'contact_type': 'OneOfMarcContactResultControlItemContactType'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'displacement_type': 'displacementType',
        'force_type': 'forceType',
        'stress_type': 'stressType',
        'strain_type': 'strainType',
        'contact_type': 'contactType'
    }

    discriminator_value_class_map = {
        'DISPLACEMENT': 'MarcDisplacementResultControlItem',
        'FORCE': 'MarcForceResultControlItem',
        'STRESS': 'MarcStressResultControlItem',
        'STRAIN': 'MarcStrainResultControlItem',
        'CONTACT': 'MarcContactResultControlItem'
    }

    def __init__(self, type='CONTACT', name=None, displacement_type=None, force_type=None, stress_type=None, strain_type=None, contact_type=None, local_vars_configuration=None):  # noqa: E501
        """OneOfMarcResultControlSolutionFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._displacement_type = None
        self._force_type = None
        self._stress_type = None
        self._strain_type = None
        self._contact_type = None
        self.discriminator = 'type'

        self.type = type
        if name is not None:
            self.name = name
        if displacement_type is not None:
            self.displacement_type = displacement_type
        if force_type is not None:
            self.force_type = force_type
        if stress_type is not None:
            self.stress_type = stress_type
        if strain_type is not None:
            self.strain_type = strain_type
        if contact_type is not None:
            self.contact_type = contact_type

    @property
    def type(self):
        """Gets the type of this OneOfMarcResultControlSolutionFields.  # noqa: E501

        Schema name: MarcContactResultControlItem  # noqa: E501

        :return: The type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfMarcResultControlSolutionFields.

        Schema name: MarcContactResultControlItem  # noqa: E501

        :param type: The type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this OneOfMarcResultControlSolutionFields.  # noqa: E501


        :return: The name of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OneOfMarcResultControlSolutionFields.


        :param name: The name of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def displacement_type(self):
        """Gets the displacement_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501


        :return: The displacement_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :rtype: GlobalDisplacement
        """
        return self._displacement_type

    @displacement_type.setter
    def displacement_type(self, displacement_type):
        """Sets the displacement_type of this OneOfMarcResultControlSolutionFields.


        :param displacement_type: The displacement_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :type: GlobalDisplacement
        """

        self._displacement_type = displacement_type

    @property
    def force_type(self):
        """Gets the force_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501


        :return: The force_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :rtype: OneOfMarcForceResultControlItemForceType
        """
        return self._force_type

    @force_type.setter
    def force_type(self, force_type):
        """Sets the force_type of this OneOfMarcResultControlSolutionFields.


        :param force_type: The force_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :type: OneOfMarcForceResultControlItemForceType
        """

        self._force_type = force_type

    @property
    def stress_type(self):
        """Gets the stress_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501


        :return: The stress_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :rtype: OneOfMarcStressResultControlItemStressType
        """
        return self._stress_type

    @stress_type.setter
    def stress_type(self, stress_type):
        """Sets the stress_type of this OneOfMarcResultControlSolutionFields.


        :param stress_type: The stress_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :type: OneOfMarcStressResultControlItemStressType
        """

        self._stress_type = stress_type

    @property
    def strain_type(self):
        """Gets the strain_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501


        :return: The strain_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :rtype: OneOfMarcStrainResultControlItemStrainType
        """
        return self._strain_type

    @strain_type.setter
    def strain_type(self, strain_type):
        """Sets the strain_type of this OneOfMarcResultControlSolutionFields.


        :param strain_type: The strain_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :type: OneOfMarcStrainResultControlItemStrainType
        """

        self._strain_type = strain_type

    @property
    def contact_type(self):
        """Gets the contact_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501


        :return: The contact_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :rtype: OneOfMarcContactResultControlItemContactType
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this OneOfMarcResultControlSolutionFields.


        :param contact_type: The contact_type of this OneOfMarcResultControlSolutionFields.  # noqa: E501
        :type: OneOfMarcContactResultControlItemContactType
        """

        self._contact_type = contact_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfMarcResultControlSolutionFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfMarcResultControlSolutionFields):
            return True

        return self.to_dict() != other.to_dict()
