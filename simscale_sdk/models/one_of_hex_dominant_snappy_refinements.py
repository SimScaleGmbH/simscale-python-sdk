# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfHexDominantSnappyRefinements(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'refinement': 'OneOfRegionRefinementWithLengthRefinement',
        'topological_reference': 'TopologicalReference',
        'geometry_primitive_uuids': 'list[str]',
        'min_length': 'DimensionalLength',
        'max_length': 'DimensionalLength',
        'cell_zone': 'OneOfSurfaceRefinementHexDominantSnappyCellZone',
        'distance_refinement_lengths': 'list[RefinementLength]',
        'layers': 'int',
        'expansion_ratio': 'float',
        'min_thickness': 'float',
        'first_layer_thickness': 'float'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'refinement': 'refinement',
        'topological_reference': 'topologicalReference',
        'geometry_primitive_uuids': 'geometryPrimitiveUuids',
        'min_length': 'minLength',
        'max_length': 'maxLength',
        'cell_zone': 'cellZone',
        'distance_refinement_lengths': 'distanceRefinementLengths',
        'layers': 'layers',
        'expansion_ratio': 'expansionRatio',
        'min_thickness': 'minThickness',
        'first_layer_thickness': 'firstLayerThickness'
    }

    discriminator_value_class_map = {
        'REGION_LENGTH': 'RegionRefinementWithLength',
        'SURFACE_HEX_DOMINANT_SNAPPY_V3': 'SurfaceRefinementHexDominantSnappy',
        'FEATURE_HEX_DOMINANT_SNAPPY': 'FeatureRefinementHexDominantSnappy',
        'LAYER_ADDITION_HEX_DOMINANT_SNAPPY': 'LayerAdditionHexDominantSnappy'
    }

    def __init__(self, type='LAYER_ADDITION_HEX_DOMINANT_SNAPPY', name=None, refinement=None, topological_reference=None, geometry_primitive_uuids=None, min_length=None, max_length=None, cell_zone=None, distance_refinement_lengths=None, layers=None, expansion_ratio=None, min_thickness=None, first_layer_thickness=None, local_vars_configuration=None):  # noqa: E501
        """OneOfHexDominantSnappyRefinements - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._refinement = None
        self._topological_reference = None
        self._geometry_primitive_uuids = None
        self._min_length = None
        self._max_length = None
        self._cell_zone = None
        self._distance_refinement_lengths = None
        self._layers = None
        self._expansion_ratio = None
        self._min_thickness = None
        self._first_layer_thickness = None
        self.discriminator = 'type'

        self.type = type
        if name is not None:
            self.name = name
        if refinement is not None:
            self.refinement = refinement
        if topological_reference is not None:
            self.topological_reference = topological_reference
        if geometry_primitive_uuids is not None:
            self.geometry_primitive_uuids = geometry_primitive_uuids
        if min_length is not None:
            self.min_length = min_length
        if max_length is not None:
            self.max_length = max_length
        if cell_zone is not None:
            self.cell_zone = cell_zone
        if distance_refinement_lengths is not None:
            self.distance_refinement_lengths = distance_refinement_lengths
        if layers is not None:
            self.layers = layers
        if expansion_ratio is not None:
            self.expansion_ratio = expansion_ratio
        if min_thickness is not None:
            self.min_thickness = min_thickness
        if first_layer_thickness is not None:
            self.first_layer_thickness = first_layer_thickness

    @property
    def type(self):
        """Gets the type of this OneOfHexDominantSnappyRefinements.  # noqa: E501

        <a href='https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#layers-refinement' target='_blank'><b>Inflated boundary layers</b></a> are used to resolve the boundary layer near walls (no-slip) which are in contact with the fluid. Using boundary layers is generally recommended for turbulent simulations.  Schema name: LayerAdditionHexDominantSnappy  # noqa: E501

        :return: The type of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfHexDominantSnappyRefinements.

        <a href='https://www.simscale.com/docs/simulation-setup/meshing/hex-dominant/#layers-refinement' target='_blank'><b>Inflated boundary layers</b></a> are used to resolve the boundary layer near walls (no-slip) which are in contact with the fluid. Using boundary layers is generally recommended for turbulent simulations.  Schema name: LayerAdditionHexDominantSnappy  # noqa: E501

        :param type: The type of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this OneOfHexDominantSnappyRefinements.  # noqa: E501


        :return: The name of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OneOfHexDominantSnappyRefinements.


        :param name: The name of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def refinement(self):
        """Gets the refinement of this OneOfHexDominantSnappyRefinements.  # noqa: E501


        :return: The refinement of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: OneOfRegionRefinementWithLengthRefinement
        """
        return self._refinement

    @refinement.setter
    def refinement(self, refinement):
        """Sets the refinement of this OneOfHexDominantSnappyRefinements.


        :param refinement: The refinement of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: OneOfRegionRefinementWithLengthRefinement
        """

        self._refinement = refinement

    @property
    def topological_reference(self):
        """Gets the topological_reference of this OneOfHexDominantSnappyRefinements.  # noqa: E501


        :return: The topological_reference of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this OneOfHexDominantSnappyRefinements.


        :param topological_reference: The topological_reference of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    @property
    def geometry_primitive_uuids(self):
        """Gets the geometry_primitive_uuids of this OneOfHexDominantSnappyRefinements.  # noqa: E501


        :return: The geometry_primitive_uuids of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: list[str]
        """
        return self._geometry_primitive_uuids

    @geometry_primitive_uuids.setter
    def geometry_primitive_uuids(self, geometry_primitive_uuids):
        """Sets the geometry_primitive_uuids of this OneOfHexDominantSnappyRefinements.


        :param geometry_primitive_uuids: The geometry_primitive_uuids of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: list[str]
        """

        self._geometry_primitive_uuids = geometry_primitive_uuids

    @property
    def min_length(self):
        """Gets the min_length of this OneOfHexDominantSnappyRefinements.  # noqa: E501


        :return: The min_length of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this OneOfHexDominantSnappyRefinements.


        :param min_length: The min_length of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: DimensionalLength
        """

        self._min_length = min_length

    @property
    def max_length(self):
        """Gets the max_length of this OneOfHexDominantSnappyRefinements.  # noqa: E501


        :return: The max_length of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this OneOfHexDominantSnappyRefinements.


        :param max_length: The max_length of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: DimensionalLength
        """

        self._max_length = max_length

    @property
    def cell_zone(self):
        """Gets the cell_zone of this OneOfHexDominantSnappyRefinements.  # noqa: E501


        :return: The cell_zone of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: OneOfSurfaceRefinementHexDominantSnappyCellZone
        """
        return self._cell_zone

    @cell_zone.setter
    def cell_zone(self, cell_zone):
        """Sets the cell_zone of this OneOfHexDominantSnappyRefinements.


        :param cell_zone: The cell_zone of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: OneOfSurfaceRefinementHexDominantSnappyCellZone
        """

        self._cell_zone = cell_zone

    @property
    def distance_refinement_lengths(self):
        """Gets the distance_refinement_lengths of this OneOfHexDominantSnappyRefinements.  # noqa: E501

        Specify the desired <b>target cell edge length</b> based on the <b>distance</b> to the feature edges. The edge and surface mesh will then be refined up until the specified distance in all directions from the edges.  # noqa: E501

        :return: The distance_refinement_lengths of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: list[RefinementLength]
        """
        return self._distance_refinement_lengths

    @distance_refinement_lengths.setter
    def distance_refinement_lengths(self, distance_refinement_lengths):
        """Sets the distance_refinement_lengths of this OneOfHexDominantSnappyRefinements.

        Specify the desired <b>target cell edge length</b> based on the <b>distance</b> to the feature edges. The edge and surface mesh will then be refined up until the specified distance in all directions from the edges.  # noqa: E501

        :param distance_refinement_lengths: The distance_refinement_lengths of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: list[RefinementLength]
        """

        self._distance_refinement_lengths = distance_refinement_lengths

    @property
    def layers(self):
        """Gets the layers of this OneOfHexDominantSnappyRefinements.  # noqa: E501

        The number of <b>layers</b> defines how many boundary layers should be created.  # noqa: E501

        :return: The layers of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: int
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this OneOfHexDominantSnappyRefinements.

        The number of <b>layers</b> defines how many boundary layers should be created.  # noqa: E501

        :param layers: The layers of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                layers is not None and layers < 0):  # noqa: E501
            raise ValueError("Invalid value for `layers`, must be a value greater than or equal to `0`")  # noqa: E501

        self._layers = layers

    @property
    def expansion_ratio(self):
        """Gets the expansion_ratio of this OneOfHexDominantSnappyRefinements.  # noqa: E501

        <p>The <b>Expansion ratio</b> determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each cell layer will be in comparison to the neighbouring layer closer to the wall.</p><p><img src=\"/spec/resources/help/imgs/shm_bl_expansion-ratio.png\" class=\"helpPopupImage\"/> The figure shows a ratio of 1.3.</p>  # noqa: E501

        :return: The expansion_ratio of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: float
        """
        return self._expansion_ratio

    @expansion_ratio.setter
    def expansion_ratio(self, expansion_ratio):
        """Sets the expansion_ratio of this OneOfHexDominantSnappyRefinements.

        <p>The <b>Expansion ratio</b> determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each cell layer will be in comparison to the neighbouring layer closer to the wall.</p><p><img src=\"/spec/resources/help/imgs/shm_bl_expansion-ratio.png\" class=\"helpPopupImage\"/> The figure shows a ratio of 1.3.</p>  # noqa: E501

        :param expansion_ratio: The expansion_ratio of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                expansion_ratio is not None and expansion_ratio < 0):  # noqa: E501
            raise ValueError("Invalid value for `expansion_ratio`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expansion_ratio = expansion_ratio

    @property
    def min_thickness(self):
        """Gets the min_thickness of this OneOfHexDominantSnappyRefinements.  # noqa: E501

        Specifies the <b>overall minimum thickness of all layers combined</b>. In case the overall thickness falls below this minimum thickness, no layers will be added for the affected areas.  # noqa: E501

        :return: The min_thickness of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: float
        """
        return self._min_thickness

    @min_thickness.setter
    def min_thickness(self, min_thickness):
        """Sets the min_thickness of this OneOfHexDominantSnappyRefinements.

        Specifies the <b>overall minimum thickness of all layers combined</b>. In case the overall thickness falls below this minimum thickness, no layers will be added for the affected areas.  # noqa: E501

        :param min_thickness: The min_thickness of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                min_thickness is not None and min_thickness > 2):  # noqa: E501
            raise ValueError("Invalid value for `min_thickness`, must be a value less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_thickness is not None and min_thickness < 0):  # noqa: E501
            raise ValueError("Invalid value for `min_thickness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_thickness = min_thickness

    @property
    def first_layer_thickness(self):
        """Gets the first_layer_thickness of this OneOfHexDominantSnappyRefinements.  # noqa: E501

        Specifies the height (thickness) of the <b>first layer</b> that is closest to the surface. The first layer thickness is specified <b>relative</b> to the neighboring volume cell size after refinements.  # noqa: E501

        :return: The first_layer_thickness of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :rtype: float
        """
        return self._first_layer_thickness

    @first_layer_thickness.setter
    def first_layer_thickness(self, first_layer_thickness):
        """Sets the first_layer_thickness of this OneOfHexDominantSnappyRefinements.

        Specifies the height (thickness) of the <b>first layer</b> that is closest to the surface. The first layer thickness is specified <b>relative</b> to the neighboring volume cell size after refinements.  # noqa: E501

        :param first_layer_thickness: The first_layer_thickness of this OneOfHexDominantSnappyRefinements.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                first_layer_thickness is not None and first_layer_thickness < 0):  # noqa: E501
            raise ValueError("Invalid value for `first_layer_thickness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._first_layer_thickness = first_layer_thickness

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfHexDominantSnappyRefinements):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfHexDominantSnappyRefinements):
            return True

        return self.to_dict() != other.to_dict()
