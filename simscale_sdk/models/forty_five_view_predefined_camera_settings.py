# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FortyFiveViewPredefinedCameraSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'setting_type': 'str',
        'projection_type': 'ProjectionType',
        'direction_specifier': 'str'
    }

    attribute_map = {
        'setting_type': 'settingType',
        'projection_type': 'projectionType',
        'direction_specifier': 'directionSpecifier'
    }

    def __init__(self, setting_type='FORTY_FIVE_FORTY_FIVE_VIEW', projection_type=None, direction_specifier=None, local_vars_configuration=None):  # noqa: E501
        """FortyFiveViewPredefinedCameraSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._setting_type = None
        self._projection_type = None
        self._direction_specifier = None
        self.discriminator = None

        self.setting_type = setting_type
        self.projection_type = projection_type
        self.direction_specifier = direction_specifier

    @property
    def setting_type(self):
        """Gets the setting_type of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501


        :return: The setting_type of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501
        :rtype: str
        """
        return self._setting_type

    @setting_type.setter
    def setting_type(self, setting_type):
        """Sets the setting_type of this FortyFiveViewPredefinedCameraSettings.


        :param setting_type: The setting_type of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and setting_type is None:  # noqa: E501
            raise ValueError("Invalid value for `setting_type`, must not be `None`")  # noqa: E501

        self._setting_type = setting_type

    @property
    def projection_type(self):
        """Gets the projection_type of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501


        :return: The projection_type of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501
        :rtype: ProjectionType
        """
        return self._projection_type

    @projection_type.setter
    def projection_type(self, projection_type):
        """Sets the projection_type of this FortyFiveViewPredefinedCameraSettings.


        :param projection_type: The projection_type of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501
        :type: ProjectionType
        """
        if self.local_vars_configuration.client_side_validation and projection_type is None:  # noqa: E501
            raise ValueError("Invalid value for `projection_type`, must not be `None`")  # noqa: E501

        self._projection_type = projection_type

    @property
    def direction_specifier(self):
        """Gets the direction_specifier of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501


        :return: The direction_specifier of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501
        :rtype: str
        """
        return self._direction_specifier

    @direction_specifier.setter
    def direction_specifier(self, direction_specifier):
        """Sets the direction_specifier of this FortyFiveViewPredefinedCameraSettings.


        :param direction_specifier: The direction_specifier of this FortyFiveViewPredefinedCameraSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and direction_specifier is None:  # noqa: E501
            raise ValueError("Invalid value for `direction_specifier`, must not be `None`")  # noqa: E501
        allowed_values = ["X_NEGATIVE_Y_NEGATIVE_Z_NEGATIVE", "X_NEGATIVE_Y_NEGATIVE_Z_POSITIVE", "X_NEGATIVE_Y_POSITIVE_Z_NEGATIVE", "X_NEGATIVE_Y_POSITIVE_Z_POSITIVE", "X_POSITIVE_Y_NEGATIVE_Z_NEGATIVE", "X_POSITIVE_Y_NEGATIVE_Z_POSITIVE", "X_POSITIVE_Y_POSITIVE_Z_NEGATIVE", "X_POSITIVE_Y_POSITIVE_Z_POSITIVE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and direction_specifier not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `direction_specifier` ({0}), must be one of {1}"  # noqa: E501
                .format(direction_specifier, allowed_values)
            )

        self._direction_specifier = direction_specifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FortyFiveViewPredefinedCameraSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FortyFiveViewPredefinedCameraSettings):
            return True

        return self.to_dict() != other.to_dict()
