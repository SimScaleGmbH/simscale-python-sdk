# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class CalculateFrequency(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prec_shift': 'float',
        'max_iter_shift': 'int',
        'threshold_frequency': 'float'
    }

    attribute_map = {
        'prec_shift': 'precShift',
        'max_iter_shift': 'maxIterShift',
        'threshold_frequency': 'thresholdFrequency'
    }

    def __init__(self, prec_shift=None, max_iter_shift=None, threshold_frequency=None, local_vars_configuration=None):  # noqa: E501
        """CalculateFrequency - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._prec_shift = None
        self._max_iter_shift = None
        self._threshold_frequency = None
        self.discriminator = None

        if prec_shift is not None:
            self.prec_shift = prec_shift
        if max_iter_shift is not None:
            self.max_iter_shift = max_iter_shift
        if threshold_frequency is not None:
            self.threshold_frequency = threshold_frequency

    @property
    def prec_shift(self):
        """Gets the prec_shift of this CalculateFrequency.  # noqa: E501


        :return: The prec_shift of this CalculateFrequency.  # noqa: E501
        :rtype: float
        """
        return self._prec_shift

    @prec_shift.setter
    def prec_shift(self, prec_shift):
        """Sets the prec_shift of this CalculateFrequency.


        :param prec_shift: The prec_shift of this CalculateFrequency.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                prec_shift is not None and prec_shift < 0):  # noqa: E501
            raise ValueError("Invalid value for `prec_shift`, must be a value greater than or equal to `0`")  # noqa: E501

        self._prec_shift = prec_shift

    @property
    def max_iter_shift(self):
        """Gets the max_iter_shift of this CalculateFrequency.  # noqa: E501


        :return: The max_iter_shift of this CalculateFrequency.  # noqa: E501
        :rtype: int
        """
        return self._max_iter_shift

    @max_iter_shift.setter
    def max_iter_shift(self, max_iter_shift):
        """Sets the max_iter_shift of this CalculateFrequency.


        :param max_iter_shift: The max_iter_shift of this CalculateFrequency.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_iter_shift is not None and max_iter_shift < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_iter_shift`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_iter_shift = max_iter_shift

    @property
    def threshold_frequency(self):
        """Gets the threshold_frequency of this CalculateFrequency.  # noqa: E501


        :return: The threshold_frequency of this CalculateFrequency.  # noqa: E501
        :rtype: float
        """
        return self._threshold_frequency

    @threshold_frequency.setter
    def threshold_frequency(self, threshold_frequency):
        """Sets the threshold_frequency of this CalculateFrequency.


        :param threshold_frequency: The threshold_frequency of this CalculateFrequency.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                threshold_frequency is not None and threshold_frequency < 0):  # noqa: E501
            raise ValueError("Invalid value for `threshold_frequency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._threshold_frequency = threshold_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculateFrequency):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CalculateFrequency):
            return True

        return self.to_dict() != other.to_dict()
