# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class AdvancedModelling(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'surface_roughness_models': 'list[SurfaceRoughnessModel]',
        'porous_objects': 'list[OneOfAdvancedModellingPorousObjects]',
        'rotating_walls': 'list[RotatingWall]'
    }

    attribute_map = {
        'surface_roughness_models': 'surfaceRoughnessModels',
        'porous_objects': 'porousObjects',
        'rotating_walls': 'rotatingWalls'
    }

    def __init__(self, surface_roughness_models=None, porous_objects=None, rotating_walls=None, local_vars_configuration=None):  # noqa: E501
        """AdvancedModelling - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._surface_roughness_models = None
        self._porous_objects = None
        self._rotating_walls = None
        self.discriminator = None

        if surface_roughness_models is not None:
            self.surface_roughness_models = surface_roughness_models
        if porous_objects is not None:
            self.porous_objects = porous_objects
        if rotating_walls is not None:
            self.rotating_walls = rotating_walls

    @property
    def surface_roughness_models(self):
        """Gets the surface_roughness_models of this AdvancedModelling.  # noqa: E501


        :return: The surface_roughness_models of this AdvancedModelling.  # noqa: E501
        :rtype: list[SurfaceRoughnessModel]
        """
        return self._surface_roughness_models

    @surface_roughness_models.setter
    def surface_roughness_models(self, surface_roughness_models):
        """Sets the surface_roughness_models of this AdvancedModelling.


        :param surface_roughness_models: The surface_roughness_models of this AdvancedModelling.  # noqa: E501
        :type: list[SurfaceRoughnessModel]
        """

        self._surface_roughness_models = surface_roughness_models

    @property
    def porous_objects(self):
        """Gets the porous_objects of this AdvancedModelling.  # noqa: E501


        :return: The porous_objects of this AdvancedModelling.  # noqa: E501
        :rtype: list[OneOfAdvancedModellingPorousObjects]
        """
        return self._porous_objects

    @porous_objects.setter
    def porous_objects(self, porous_objects):
        """Sets the porous_objects of this AdvancedModelling.


        :param porous_objects: The porous_objects of this AdvancedModelling.  # noqa: E501
        :type: list[OneOfAdvancedModellingPorousObjects]
        """

        self._porous_objects = porous_objects

    @property
    def rotating_walls(self):
        """Gets the rotating_walls of this AdvancedModelling.  # noqa: E501


        :return: The rotating_walls of this AdvancedModelling.  # noqa: E501
        :rtype: list[RotatingWall]
        """
        return self._rotating_walls

    @rotating_walls.setter
    def rotating_walls(self, rotating_walls):
        """Sets the rotating_walls of this AdvancedModelling.


        :param rotating_walls: The rotating_walls of this AdvancedModelling.  # noqa: E501
        :type: list[RotatingWall]
        """

        self._rotating_walls = rotating_walls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedModelling):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedModelling):
            return True

        return self.to_dict() != other.to_dict()
