# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SpatialDiscretizationSchemes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'velocity': 'OneOfSpatialDiscretizationSchemesVelocity',
        'density': 'OneOfSpatialDiscretizationSchemesDensity',
        'turbulent_kinetic_energy': 'OneOfSpatialDiscretizationSchemesTurbulentKineticEnergy',
        'turbulent_energy_dissipation_rate': 'OneOfSpatialDiscretizationSchemesTurbulentEnergyDissipationRate',
        'volume_of_fluid': 'OneOfSpatialDiscretizationSchemesVolumeOfFluid',
        'internal_energy': 'OneOfSpatialDiscretizationSchemesInternalEnergy',
        'gas_mixture_transport': 'OneOfSpatialDiscretizationSchemesGasMixtureTransport'
    }

    attribute_map = {
        'velocity': 'velocity',
        'density': 'density',
        'turbulent_kinetic_energy': 'turbulentKineticEnergy',
        'turbulent_energy_dissipation_rate': 'turbulentEnergyDissipationRate',
        'volume_of_fluid': 'volumeOfFluid',
        'internal_energy': 'internalEnergy',
        'gas_mixture_transport': 'gasMixtureTransport'
    }

    def __init__(self, velocity=None, density=None, turbulent_kinetic_energy=None, turbulent_energy_dissipation_rate=None, volume_of_fluid=None, internal_energy=None, gas_mixture_transport=None, local_vars_configuration=None):  # noqa: E501
        """SpatialDiscretizationSchemes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._velocity = None
        self._density = None
        self._turbulent_kinetic_energy = None
        self._turbulent_energy_dissipation_rate = None
        self._volume_of_fluid = None
        self._internal_energy = None
        self._gas_mixture_transport = None
        self.discriminator = None

        if velocity is not None:
            self.velocity = velocity
        if density is not None:
            self.density = density
        if turbulent_kinetic_energy is not None:
            self.turbulent_kinetic_energy = turbulent_kinetic_energy
        if turbulent_energy_dissipation_rate is not None:
            self.turbulent_energy_dissipation_rate = turbulent_energy_dissipation_rate
        if volume_of_fluid is not None:
            self.volume_of_fluid = volume_of_fluid
        if internal_energy is not None:
            self.internal_energy = internal_energy
        if gas_mixture_transport is not None:
            self.gas_mixture_transport = gas_mixture_transport

    @property
    def velocity(self):
        """Gets the velocity of this SpatialDiscretizationSchemes.  # noqa: E501


        :return: The velocity of this SpatialDiscretizationSchemes.  # noqa: E501
        :rtype: OneOfSpatialDiscretizationSchemesVelocity
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this SpatialDiscretizationSchemes.


        :param velocity: The velocity of this SpatialDiscretizationSchemes.  # noqa: E501
        :type: OneOfSpatialDiscretizationSchemesVelocity
        """

        self._velocity = velocity

    @property
    def density(self):
        """Gets the density of this SpatialDiscretizationSchemes.  # noqa: E501


        :return: The density of this SpatialDiscretizationSchemes.  # noqa: E501
        :rtype: OneOfSpatialDiscretizationSchemesDensity
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this SpatialDiscretizationSchemes.


        :param density: The density of this SpatialDiscretizationSchemes.  # noqa: E501
        :type: OneOfSpatialDiscretizationSchemesDensity
        """

        self._density = density

    @property
    def turbulent_kinetic_energy(self):
        """Gets the turbulent_kinetic_energy of this SpatialDiscretizationSchemes.  # noqa: E501


        :return: The turbulent_kinetic_energy of this SpatialDiscretizationSchemes.  # noqa: E501
        :rtype: OneOfSpatialDiscretizationSchemesTurbulentKineticEnergy
        """
        return self._turbulent_kinetic_energy

    @turbulent_kinetic_energy.setter
    def turbulent_kinetic_energy(self, turbulent_kinetic_energy):
        """Sets the turbulent_kinetic_energy of this SpatialDiscretizationSchemes.


        :param turbulent_kinetic_energy: The turbulent_kinetic_energy of this SpatialDiscretizationSchemes.  # noqa: E501
        :type: OneOfSpatialDiscretizationSchemesTurbulentKineticEnergy
        """

        self._turbulent_kinetic_energy = turbulent_kinetic_energy

    @property
    def turbulent_energy_dissipation_rate(self):
        """Gets the turbulent_energy_dissipation_rate of this SpatialDiscretizationSchemes.  # noqa: E501


        :return: The turbulent_energy_dissipation_rate of this SpatialDiscretizationSchemes.  # noqa: E501
        :rtype: OneOfSpatialDiscretizationSchemesTurbulentEnergyDissipationRate
        """
        return self._turbulent_energy_dissipation_rate

    @turbulent_energy_dissipation_rate.setter
    def turbulent_energy_dissipation_rate(self, turbulent_energy_dissipation_rate):
        """Sets the turbulent_energy_dissipation_rate of this SpatialDiscretizationSchemes.


        :param turbulent_energy_dissipation_rate: The turbulent_energy_dissipation_rate of this SpatialDiscretizationSchemes.  # noqa: E501
        :type: OneOfSpatialDiscretizationSchemesTurbulentEnergyDissipationRate
        """

        self._turbulent_energy_dissipation_rate = turbulent_energy_dissipation_rate

    @property
    def volume_of_fluid(self):
        """Gets the volume_of_fluid of this SpatialDiscretizationSchemes.  # noqa: E501


        :return: The volume_of_fluid of this SpatialDiscretizationSchemes.  # noqa: E501
        :rtype: OneOfSpatialDiscretizationSchemesVolumeOfFluid
        """
        return self._volume_of_fluid

    @volume_of_fluid.setter
    def volume_of_fluid(self, volume_of_fluid):
        """Sets the volume_of_fluid of this SpatialDiscretizationSchemes.


        :param volume_of_fluid: The volume_of_fluid of this SpatialDiscretizationSchemes.  # noqa: E501
        :type: OneOfSpatialDiscretizationSchemesVolumeOfFluid
        """

        self._volume_of_fluid = volume_of_fluid

    @property
    def internal_energy(self):
        """Gets the internal_energy of this SpatialDiscretizationSchemes.  # noqa: E501


        :return: The internal_energy of this SpatialDiscretizationSchemes.  # noqa: E501
        :rtype: OneOfSpatialDiscretizationSchemesInternalEnergy
        """
        return self._internal_energy

    @internal_energy.setter
    def internal_energy(self, internal_energy):
        """Sets the internal_energy of this SpatialDiscretizationSchemes.


        :param internal_energy: The internal_energy of this SpatialDiscretizationSchemes.  # noqa: E501
        :type: OneOfSpatialDiscretizationSchemesInternalEnergy
        """

        self._internal_energy = internal_energy

    @property
    def gas_mixture_transport(self):
        """Gets the gas_mixture_transport of this SpatialDiscretizationSchemes.  # noqa: E501


        :return: The gas_mixture_transport of this SpatialDiscretizationSchemes.  # noqa: E501
        :rtype: OneOfSpatialDiscretizationSchemesGasMixtureTransport
        """
        return self._gas_mixture_transport

    @gas_mixture_transport.setter
    def gas_mixture_transport(self, gas_mixture_transport):
        """Sets the gas_mixture_transport of this SpatialDiscretizationSchemes.


        :param gas_mixture_transport: The gas_mixture_transport of this SpatialDiscretizationSchemes.  # noqa: E501
        :type: OneOfSpatialDiscretizationSchemesGasMixtureTransport
        """

        self._gas_mixture_transport = gas_mixture_transport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpatialDiscretizationSchemes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpatialDiscretizationSchemes):
            return True

        return self.to_dict() != other.to_dict()
