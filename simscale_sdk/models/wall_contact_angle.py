# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class WallContactAngle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable_wall_contact_angle': 'bool',
        'associated_phase': 'str',
        'contact_angle': 'DimensionalAngle'
    }

    attribute_map = {
        'enable_wall_contact_angle': 'enableWallContactAngle',
        'associated_phase': 'associatedPhase',
        'contact_angle': 'contactAngle'
    }

    def __init__(self, enable_wall_contact_angle=None, associated_phase=None, contact_angle=None, local_vars_configuration=None):  # noqa: E501
        """WallContactAngle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enable_wall_contact_angle = None
        self._associated_phase = None
        self._contact_angle = None
        self.discriminator = None

        if enable_wall_contact_angle is not None:
            self.enable_wall_contact_angle = enable_wall_contact_angle
        if associated_phase is not None:
            self.associated_phase = associated_phase
        if contact_angle is not None:
            self.contact_angle = contact_angle

    @property
    def enable_wall_contact_angle(self):
        """Gets the enable_wall_contact_angle of this WallContactAngle.  # noqa: E501


        :return: The enable_wall_contact_angle of this WallContactAngle.  # noqa: E501
        :rtype: bool
        """
        return self._enable_wall_contact_angle

    @enable_wall_contact_angle.setter
    def enable_wall_contact_angle(self, enable_wall_contact_angle):
        """Sets the enable_wall_contact_angle of this WallContactAngle.


        :param enable_wall_contact_angle: The enable_wall_contact_angle of this WallContactAngle.  # noqa: E501
        :type: bool
        """

        self._enable_wall_contact_angle = enable_wall_contact_angle

    @property
    def associated_phase(self):
        """Gets the associated_phase of this WallContactAngle.  # noqa: E501


        :return: The associated_phase of this WallContactAngle.  # noqa: E501
        :rtype: str
        """
        return self._associated_phase

    @associated_phase.setter
    def associated_phase(self, associated_phase):
        """Sets the associated_phase of this WallContactAngle.


        :param associated_phase: The associated_phase of this WallContactAngle.  # noqa: E501
        :type: str
        """
        allowed_values = ["PHASE_0", "PHASE_1"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and associated_phase not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `associated_phase` ({0}), must be one of {1}"  # noqa: E501
                .format(associated_phase, allowed_values)
            )

        self._associated_phase = associated_phase

    @property
    def contact_angle(self):
        """Gets the contact_angle of this WallContactAngle.  # noqa: E501


        :return: The contact_angle of this WallContactAngle.  # noqa: E501
        :rtype: DimensionalAngle
        """
        return self._contact_angle

    @contact_angle.setter
    def contact_angle(self, contact_angle):
        """Sets the contact_angle of this WallContactAngle.


        :param contact_angle: The contact_angle of this WallContactAngle.  # noqa: E501
        :type: DimensionalAngle
        """

        self._contact_angle = contact_angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WallContactAngle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WallContactAngle):
            return True

        return self.to_dict() != other.to_dict()
