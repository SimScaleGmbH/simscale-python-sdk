# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FieldLimits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lower_density_bound': 'DimensionalDensity',
        'upper_density_bound': 'DimensionalDensity',
        'lower_pressure_bound': 'DimensionalPressure',
        'upper_pressure_bound': 'DimensionalPressure',
        'lower_temperature_bound': 'DimensionalTemperature',
        'upper_temperature_bound': 'DimensionalTemperature'
    }

    attribute_map = {
        'lower_density_bound': 'lowerDensityBound',
        'upper_density_bound': 'upperDensityBound',
        'lower_pressure_bound': 'lowerPressureBound',
        'upper_pressure_bound': 'upperPressureBound',
        'lower_temperature_bound': 'lowerTemperatureBound',
        'upper_temperature_bound': 'upperTemperatureBound'
    }

    def __init__(self, lower_density_bound=None, upper_density_bound=None, lower_pressure_bound=None, upper_pressure_bound=None, lower_temperature_bound=None, upper_temperature_bound=None, local_vars_configuration=None):  # noqa: E501
        """FieldLimits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lower_density_bound = None
        self._upper_density_bound = None
        self._lower_pressure_bound = None
        self._upper_pressure_bound = None
        self._lower_temperature_bound = None
        self._upper_temperature_bound = None
        self.discriminator = None

        if lower_density_bound is not None:
            self.lower_density_bound = lower_density_bound
        if upper_density_bound is not None:
            self.upper_density_bound = upper_density_bound
        if lower_pressure_bound is not None:
            self.lower_pressure_bound = lower_pressure_bound
        if upper_pressure_bound is not None:
            self.upper_pressure_bound = upper_pressure_bound
        if lower_temperature_bound is not None:
            self.lower_temperature_bound = lower_temperature_bound
        if upper_temperature_bound is not None:
            self.upper_temperature_bound = upper_temperature_bound

    @property
    def lower_density_bound(self):
        """Gets the lower_density_bound of this FieldLimits.  # noqa: E501


        :return: The lower_density_bound of this FieldLimits.  # noqa: E501
        :rtype: DimensionalDensity
        """
        return self._lower_density_bound

    @lower_density_bound.setter
    def lower_density_bound(self, lower_density_bound):
        """Sets the lower_density_bound of this FieldLimits.


        :param lower_density_bound: The lower_density_bound of this FieldLimits.  # noqa: E501
        :type: DimensionalDensity
        """

        self._lower_density_bound = lower_density_bound

    @property
    def upper_density_bound(self):
        """Gets the upper_density_bound of this FieldLimits.  # noqa: E501


        :return: The upper_density_bound of this FieldLimits.  # noqa: E501
        :rtype: DimensionalDensity
        """
        return self._upper_density_bound

    @upper_density_bound.setter
    def upper_density_bound(self, upper_density_bound):
        """Sets the upper_density_bound of this FieldLimits.


        :param upper_density_bound: The upper_density_bound of this FieldLimits.  # noqa: E501
        :type: DimensionalDensity
        """

        self._upper_density_bound = upper_density_bound

    @property
    def lower_pressure_bound(self):
        """Gets the lower_pressure_bound of this FieldLimits.  # noqa: E501


        :return: The lower_pressure_bound of this FieldLimits.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._lower_pressure_bound

    @lower_pressure_bound.setter
    def lower_pressure_bound(self, lower_pressure_bound):
        """Sets the lower_pressure_bound of this FieldLimits.


        :param lower_pressure_bound: The lower_pressure_bound of this FieldLimits.  # noqa: E501
        :type: DimensionalPressure
        """

        self._lower_pressure_bound = lower_pressure_bound

    @property
    def upper_pressure_bound(self):
        """Gets the upper_pressure_bound of this FieldLimits.  # noqa: E501


        :return: The upper_pressure_bound of this FieldLimits.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._upper_pressure_bound

    @upper_pressure_bound.setter
    def upper_pressure_bound(self, upper_pressure_bound):
        """Sets the upper_pressure_bound of this FieldLimits.


        :param upper_pressure_bound: The upper_pressure_bound of this FieldLimits.  # noqa: E501
        :type: DimensionalPressure
        """

        self._upper_pressure_bound = upper_pressure_bound

    @property
    def lower_temperature_bound(self):
        """Gets the lower_temperature_bound of this FieldLimits.  # noqa: E501


        :return: The lower_temperature_bound of this FieldLimits.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._lower_temperature_bound

    @lower_temperature_bound.setter
    def lower_temperature_bound(self, lower_temperature_bound):
        """Sets the lower_temperature_bound of this FieldLimits.


        :param lower_temperature_bound: The lower_temperature_bound of this FieldLimits.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._lower_temperature_bound = lower_temperature_bound

    @property
    def upper_temperature_bound(self):
        """Gets the upper_temperature_bound of this FieldLimits.  # noqa: E501


        :return: The upper_temperature_bound of this FieldLimits.  # noqa: E501
        :rtype: DimensionalTemperature
        """
        return self._upper_temperature_bound

    @upper_temperature_bound.setter
    def upper_temperature_bound(self, upper_temperature_bound):
        """Sets the upper_temperature_bound of this FieldLimits.


        :param upper_temperature_bound: The upper_temperature_bound of this FieldLimits.  # noqa: E501
        :type: DimensionalTemperature
        """

        self._upper_temperature_bound = upper_temperature_bound

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldLimits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldLimits):
            return True

        return self.to_dict() != other.to_dict()
