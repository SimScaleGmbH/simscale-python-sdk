# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ForceMomentCoefficientsResultControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'center_of_rotation': 'DimensionalVectorLength',
        'lift_direction': 'DimensionalVectorLength',
        'drag_direction': 'DimensionalVectorLength',
        'pitch_axis': 'DimensionalVectorLength',
        'freestream_velocity_magnitude': 'DimensionalSpeed',
        'reference_length': 'DimensionalLength',
        'reference_area_value': 'DimensionalArea',
        'write_control': 'OneOfForceMomentCoefficientsResultControlWriteControl',
        'topological_reference': 'TopologicalReference'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'center_of_rotation': 'centerOfRotation',
        'lift_direction': 'liftDirection',
        'drag_direction': 'dragDirection',
        'pitch_axis': 'pitchAxis',
        'freestream_velocity_magnitude': 'freestreamVelocityMagnitude',
        'reference_length': 'referenceLength',
        'reference_area_value': 'referenceAreaValue',
        'write_control': 'writeControl',
        'topological_reference': 'topologicalReference'
    }

    def __init__(self, type='FORCE_AND_MOMENT_COEFFICIENTS', name=None, center_of_rotation=None, lift_direction=None, drag_direction=None, pitch_axis=None, freestream_velocity_magnitude=None, reference_length=None, reference_area_value=None, write_control=None, topological_reference=None, local_vars_configuration=None):  # noqa: E501
        """ForceMomentCoefficientsResultControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._center_of_rotation = None
        self._lift_direction = None
        self._drag_direction = None
        self._pitch_axis = None
        self._freestream_velocity_magnitude = None
        self._reference_length = None
        self._reference_area_value = None
        self._write_control = None
        self._topological_reference = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if center_of_rotation is not None:
            self.center_of_rotation = center_of_rotation
        if lift_direction is not None:
            self.lift_direction = lift_direction
        if drag_direction is not None:
            self.drag_direction = drag_direction
        if pitch_axis is not None:
            self.pitch_axis = pitch_axis
        if freestream_velocity_magnitude is not None:
            self.freestream_velocity_magnitude = freestream_velocity_magnitude
        if reference_length is not None:
            self.reference_length = reference_length
        if reference_area_value is not None:
            self.reference_area_value = reference_area_value
        if write_control is not None:
            self.write_control = write_control
        if topological_reference is not None:
            self.topological_reference = topological_reference

    @property
    def type(self):
        """Gets the type of this ForceMomentCoefficientsResultControl.  # noqa: E501

        Schema name: ForceMomentCoefficientsResultControl  # noqa: E501

        :return: The type of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ForceMomentCoefficientsResultControl.

        Schema name: ForceMomentCoefficientsResultControl  # noqa: E501

        :param type: The type of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The name of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ForceMomentCoefficientsResultControl.


        :param name: The name of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$/`")  # noqa: E501

        self._name = name

    @property
    def center_of_rotation(self):
        """Gets the center_of_rotation of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The center_of_rotation of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._center_of_rotation

    @center_of_rotation.setter
    def center_of_rotation(self, center_of_rotation):
        """Sets the center_of_rotation of this ForceMomentCoefficientsResultControl.


        :param center_of_rotation: The center_of_rotation of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._center_of_rotation = center_of_rotation

    @property
    def lift_direction(self):
        """Gets the lift_direction of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The lift_direction of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._lift_direction

    @lift_direction.setter
    def lift_direction(self, lift_direction):
        """Sets the lift_direction of this ForceMomentCoefficientsResultControl.


        :param lift_direction: The lift_direction of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._lift_direction = lift_direction

    @property
    def drag_direction(self):
        """Gets the drag_direction of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The drag_direction of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._drag_direction

    @drag_direction.setter
    def drag_direction(self, drag_direction):
        """Sets the drag_direction of this ForceMomentCoefficientsResultControl.


        :param drag_direction: The drag_direction of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._drag_direction = drag_direction

    @property
    def pitch_axis(self):
        """Gets the pitch_axis of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The pitch_axis of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._pitch_axis

    @pitch_axis.setter
    def pitch_axis(self, pitch_axis):
        """Sets the pitch_axis of this ForceMomentCoefficientsResultControl.


        :param pitch_axis: The pitch_axis of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._pitch_axis = pitch_axis

    @property
    def freestream_velocity_magnitude(self):
        """Gets the freestream_velocity_magnitude of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The freestream_velocity_magnitude of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: DimensionalSpeed
        """
        return self._freestream_velocity_magnitude

    @freestream_velocity_magnitude.setter
    def freestream_velocity_magnitude(self, freestream_velocity_magnitude):
        """Sets the freestream_velocity_magnitude of this ForceMomentCoefficientsResultControl.


        :param freestream_velocity_magnitude: The freestream_velocity_magnitude of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: DimensionalSpeed
        """

        self._freestream_velocity_magnitude = freestream_velocity_magnitude

    @property
    def reference_length(self):
        """Gets the reference_length of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The reference_length of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._reference_length

    @reference_length.setter
    def reference_length(self, reference_length):
        """Sets the reference_length of this ForceMomentCoefficientsResultControl.


        :param reference_length: The reference_length of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: DimensionalLength
        """

        self._reference_length = reference_length

    @property
    def reference_area_value(self):
        """Gets the reference_area_value of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The reference_area_value of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: DimensionalArea
        """
        return self._reference_area_value

    @reference_area_value.setter
    def reference_area_value(self, reference_area_value):
        """Sets the reference_area_value of this ForceMomentCoefficientsResultControl.


        :param reference_area_value: The reference_area_value of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: DimensionalArea
        """

        self._reference_area_value = reference_area_value

    @property
    def write_control(self):
        """Gets the write_control of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The write_control of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: OneOfForceMomentCoefficientsResultControlWriteControl
        """
        return self._write_control

    @write_control.setter
    def write_control(self, write_control):
        """Sets the write_control of this ForceMomentCoefficientsResultControl.


        :param write_control: The write_control of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: OneOfForceMomentCoefficientsResultControlWriteControl
        """

        self._write_control = write_control

    @property
    def topological_reference(self):
        """Gets the topological_reference of this ForceMomentCoefficientsResultControl.  # noqa: E501


        :return: The topological_reference of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this ForceMomentCoefficientsResultControl.


        :param topological_reference: The topological_reference of this ForceMomentCoefficientsResultControl.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForceMomentCoefficientsResultControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForceMomentCoefficientsResultControl):
            return True

        return self.to_dict() != other.to_dict()
