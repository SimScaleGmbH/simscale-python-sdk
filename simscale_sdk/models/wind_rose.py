# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class WindRose(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_directions': 'int',
        'velocity_buckets': 'list[WindRoseVelocityBucket]',
        'velocity_unit': 'str',
        'exposure_categories': 'list[str]',
        'wind_engineering_standard': 'str',
        'wind_data_source': 'str',
        'add_surface_roughness': 'bool'
    }

    attribute_map = {
        'num_directions': 'numDirections',
        'velocity_buckets': 'velocityBuckets',
        'velocity_unit': 'velocityUnit',
        'exposure_categories': 'exposureCategories',
        'wind_engineering_standard': 'windEngineeringStandard',
        'wind_data_source': 'windDataSource',
        'add_surface_roughness': 'addSurfaceRoughness'
    }

    def __init__(self, num_directions=None, velocity_buckets=None, velocity_unit='m/s', exposure_categories=None, wind_engineering_standard=None, wind_data_source=None, add_surface_roughness=None, local_vars_configuration=None):  # noqa: E501
        """WindRose - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_directions = None
        self._velocity_buckets = None
        self._velocity_unit = None
        self._exposure_categories = None
        self._wind_engineering_standard = None
        self._wind_data_source = None
        self._add_surface_roughness = None
        self.discriminator = None

        if num_directions is not None:
            self.num_directions = num_directions
        if velocity_buckets is not None:
            self.velocity_buckets = velocity_buckets
        self.velocity_unit = velocity_unit
        if exposure_categories is not None:
            self.exposure_categories = exposure_categories
        if wind_engineering_standard is not None:
            self.wind_engineering_standard = wind_engineering_standard
        if wind_data_source is not None:
            self.wind_data_source = wind_data_source
        if add_surface_roughness is not None:
            self.add_surface_roughness = add_surface_roughness

    @property
    def num_directions(self):
        """Gets the num_directions of this WindRose.  # noqa: E501


        :return: The num_directions of this WindRose.  # noqa: E501
        :rtype: int
        """
        return self._num_directions

    @num_directions.setter
    def num_directions(self, num_directions):
        """Sets the num_directions of this WindRose.


        :param num_directions: The num_directions of this WindRose.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                num_directions is not None and num_directions < 1):  # noqa: E501
            raise ValueError("Invalid value for `num_directions`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_directions = num_directions

    @property
    def velocity_buckets(self):
        """Gets the velocity_buckets of this WindRose.  # noqa: E501


        :return: The velocity_buckets of this WindRose.  # noqa: E501
        :rtype: list[WindRoseVelocityBucket]
        """
        return self._velocity_buckets

    @velocity_buckets.setter
    def velocity_buckets(self, velocity_buckets):
        """Sets the velocity_buckets of this WindRose.


        :param velocity_buckets: The velocity_buckets of this WindRose.  # noqa: E501
        :type: list[WindRoseVelocityBucket]
        """

        self._velocity_buckets = velocity_buckets

    @property
    def velocity_unit(self):
        """Gets the velocity_unit of this WindRose.  # noqa: E501


        :return: The velocity_unit of this WindRose.  # noqa: E501
        :rtype: str
        """
        return self._velocity_unit

    @velocity_unit.setter
    def velocity_unit(self, velocity_unit):
        """Sets the velocity_unit of this WindRose.


        :param velocity_unit: The velocity_unit of this WindRose.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and velocity_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `velocity_unit`, must not be `None`")  # noqa: E501

        self._velocity_unit = velocity_unit

    @property
    def exposure_categories(self):
        """Gets the exposure_categories of this WindRose.  # noqa: E501


        :return: The exposure_categories of this WindRose.  # noqa: E501
        :rtype: list[str]
        """
        return self._exposure_categories

    @exposure_categories.setter
    def exposure_categories(self, exposure_categories):
        """Sets the exposure_categories of this WindRose.


        :param exposure_categories: The exposure_categories of this WindRose.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["EC1", "EC2", "EC3", "EC4", "EC5", "EC6"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(exposure_categories).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `exposure_categories` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(exposure_categories) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._exposure_categories = exposure_categories

    @property
    def wind_engineering_standard(self):
        """Gets the wind_engineering_standard of this WindRose.  # noqa: E501


        :return: The wind_engineering_standard of this WindRose.  # noqa: E501
        :rtype: str
        """
        return self._wind_engineering_standard

    @wind_engineering_standard.setter
    def wind_engineering_standard(self, wind_engineering_standard):
        """Sets the wind_engineering_standard of this WindRose.


        :param wind_engineering_standard: The wind_engineering_standard of this WindRose.  # noqa: E501
        :type: str
        """
        allowed_values = ["EU", "AS_NZS", "NEN8100", "LONDON"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and wind_engineering_standard not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `wind_engineering_standard` ({0}), must be one of {1}"  # noqa: E501
                .format(wind_engineering_standard, allowed_values)
            )

        self._wind_engineering_standard = wind_engineering_standard

    @property
    def wind_data_source(self):
        """Gets the wind_data_source of this WindRose.  # noqa: E501


        :return: The wind_data_source of this WindRose.  # noqa: E501
        :rtype: str
        """
        return self._wind_data_source

    @wind_data_source.setter
    def wind_data_source(self, wind_data_source):
        """Sets the wind_data_source of this WindRose.


        :param wind_data_source: The wind_data_source of this WindRose.  # noqa: E501
        :type: str
        """
        allowed_values = ["METEOBLUE", "USER_UPLOAD"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and wind_data_source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `wind_data_source` ({0}), must be one of {1}"  # noqa: E501
                .format(wind_data_source, allowed_values)
            )

        self._wind_data_source = wind_data_source

    @property
    def add_surface_roughness(self):
        """Gets the add_surface_roughness of this WindRose.  # noqa: E501


        :return: The add_surface_roughness of this WindRose.  # noqa: E501
        :rtype: bool
        """
        return self._add_surface_roughness

    @add_surface_roughness.setter
    def add_surface_roughness(self, add_surface_roughness):
        """Sets the add_surface_roughness of this WindRose.


        :param add_surface_roughness: The add_surface_roughness of this WindRose.  # noqa: E501
        :type: bool
        """

        self._add_surface_roughness = add_surface_roughness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WindRose):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WindRose):
            return True

        return self.to_dict() != other.to_dict()
