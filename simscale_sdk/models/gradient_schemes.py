# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class GradientSchemes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'for_default': 'OneOfGradientSchemesForDefault',
        'grad_pressure': 'OneOfGradientSchemesGradPressure',
        'grad_velocity': 'OneOfGradientSchemesGradVelocity',
        'grad_pressure_rgh': 'OneOfGradientSchemesGradPressureRgh',
        'grad_density': 'OneOfGradientSchemesGradDensity',
        'grad_enthalpy': 'OneOfGradientSchemesGradEnthalpy',
        'grad_internal_energy': 'OneOfGradientSchemesGradInternalEnergy',
        'grad_turbulent_kinetic_energy': 'OneOfGradientSchemesGradTurbulentKineticEnergy',
        'grad_epsilon_dissipation_rate': 'OneOfGradientSchemesGradEpsilonDissipationRate',
        'grad_omega_dissipation_rate': 'OneOfGradientSchemesGradOmegaDissipationRate',
        'grad_nu_tilda': 'OneOfGradientSchemesGradNuTilda',
        'grad_temperature': 'OneOfGradientSchemesGradTemperature',
        'grad_rhok': 'OneOfGradientSchemesGradRhok'
    }

    attribute_map = {
        'for_default': 'forDefault',
        'grad_pressure': 'grad_pressure',
        'grad_velocity': 'grad_velocity',
        'grad_pressure_rgh': 'grad_pressureRgh',
        'grad_density': 'grad_density',
        'grad_enthalpy': 'grad_enthalpy',
        'grad_internal_energy': 'grad_internalEnergy',
        'grad_turbulent_kinetic_energy': 'grad_turbulentKineticEnergy',
        'grad_epsilon_dissipation_rate': 'grad_epsilonDissipationRate',
        'grad_omega_dissipation_rate': 'grad_omegaDissipationRate',
        'grad_nu_tilda': 'grad_nuTilda',
        'grad_temperature': 'grad_temperature',
        'grad_rhok': 'grad_rhok'
    }

    def __init__(self, for_default=None, grad_pressure=None, grad_velocity=None, grad_pressure_rgh=None, grad_density=None, grad_enthalpy=None, grad_internal_energy=None, grad_turbulent_kinetic_energy=None, grad_epsilon_dissipation_rate=None, grad_omega_dissipation_rate=None, grad_nu_tilda=None, grad_temperature=None, grad_rhok=None, local_vars_configuration=None):  # noqa: E501
        """GradientSchemes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._for_default = None
        self._grad_pressure = None
        self._grad_velocity = None
        self._grad_pressure_rgh = None
        self._grad_density = None
        self._grad_enthalpy = None
        self._grad_internal_energy = None
        self._grad_turbulent_kinetic_energy = None
        self._grad_epsilon_dissipation_rate = None
        self._grad_omega_dissipation_rate = None
        self._grad_nu_tilda = None
        self._grad_temperature = None
        self._grad_rhok = None
        self.discriminator = None

        if for_default is not None:
            self.for_default = for_default
        if grad_pressure is not None:
            self.grad_pressure = grad_pressure
        if grad_velocity is not None:
            self.grad_velocity = grad_velocity
        if grad_pressure_rgh is not None:
            self.grad_pressure_rgh = grad_pressure_rgh
        if grad_density is not None:
            self.grad_density = grad_density
        if grad_enthalpy is not None:
            self.grad_enthalpy = grad_enthalpy
        if grad_internal_energy is not None:
            self.grad_internal_energy = grad_internal_energy
        if grad_turbulent_kinetic_energy is not None:
            self.grad_turbulent_kinetic_energy = grad_turbulent_kinetic_energy
        if grad_epsilon_dissipation_rate is not None:
            self.grad_epsilon_dissipation_rate = grad_epsilon_dissipation_rate
        if grad_omega_dissipation_rate is not None:
            self.grad_omega_dissipation_rate = grad_omega_dissipation_rate
        if grad_nu_tilda is not None:
            self.grad_nu_tilda = grad_nu_tilda
        if grad_temperature is not None:
            self.grad_temperature = grad_temperature
        if grad_rhok is not None:
            self.grad_rhok = grad_rhok

    @property
    def for_default(self):
        """Gets the for_default of this GradientSchemes.  # noqa: E501


        :return: The for_default of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesForDefault
        """
        return self._for_default

    @for_default.setter
    def for_default(self, for_default):
        """Sets the for_default of this GradientSchemes.


        :param for_default: The for_default of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesForDefault
        """

        self._for_default = for_default

    @property
    def grad_pressure(self):
        """Gets the grad_pressure of this GradientSchemes.  # noqa: E501


        :return: The grad_pressure of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradPressure
        """
        return self._grad_pressure

    @grad_pressure.setter
    def grad_pressure(self, grad_pressure):
        """Sets the grad_pressure of this GradientSchemes.


        :param grad_pressure: The grad_pressure of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradPressure
        """

        self._grad_pressure = grad_pressure

    @property
    def grad_velocity(self):
        """Gets the grad_velocity of this GradientSchemes.  # noqa: E501


        :return: The grad_velocity of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradVelocity
        """
        return self._grad_velocity

    @grad_velocity.setter
    def grad_velocity(self, grad_velocity):
        """Sets the grad_velocity of this GradientSchemes.


        :param grad_velocity: The grad_velocity of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradVelocity
        """

        self._grad_velocity = grad_velocity

    @property
    def grad_pressure_rgh(self):
        """Gets the grad_pressure_rgh of this GradientSchemes.  # noqa: E501


        :return: The grad_pressure_rgh of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradPressureRgh
        """
        return self._grad_pressure_rgh

    @grad_pressure_rgh.setter
    def grad_pressure_rgh(self, grad_pressure_rgh):
        """Sets the grad_pressure_rgh of this GradientSchemes.


        :param grad_pressure_rgh: The grad_pressure_rgh of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradPressureRgh
        """

        self._grad_pressure_rgh = grad_pressure_rgh

    @property
    def grad_density(self):
        """Gets the grad_density of this GradientSchemes.  # noqa: E501


        :return: The grad_density of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradDensity
        """
        return self._grad_density

    @grad_density.setter
    def grad_density(self, grad_density):
        """Sets the grad_density of this GradientSchemes.


        :param grad_density: The grad_density of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradDensity
        """

        self._grad_density = grad_density

    @property
    def grad_enthalpy(self):
        """Gets the grad_enthalpy of this GradientSchemes.  # noqa: E501


        :return: The grad_enthalpy of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradEnthalpy
        """
        return self._grad_enthalpy

    @grad_enthalpy.setter
    def grad_enthalpy(self, grad_enthalpy):
        """Sets the grad_enthalpy of this GradientSchemes.


        :param grad_enthalpy: The grad_enthalpy of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradEnthalpy
        """

        self._grad_enthalpy = grad_enthalpy

    @property
    def grad_internal_energy(self):
        """Gets the grad_internal_energy of this GradientSchemes.  # noqa: E501


        :return: The grad_internal_energy of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradInternalEnergy
        """
        return self._grad_internal_energy

    @grad_internal_energy.setter
    def grad_internal_energy(self, grad_internal_energy):
        """Sets the grad_internal_energy of this GradientSchemes.


        :param grad_internal_energy: The grad_internal_energy of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradInternalEnergy
        """

        self._grad_internal_energy = grad_internal_energy

    @property
    def grad_turbulent_kinetic_energy(self):
        """Gets the grad_turbulent_kinetic_energy of this GradientSchemes.  # noqa: E501


        :return: The grad_turbulent_kinetic_energy of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradTurbulentKineticEnergy
        """
        return self._grad_turbulent_kinetic_energy

    @grad_turbulent_kinetic_energy.setter
    def grad_turbulent_kinetic_energy(self, grad_turbulent_kinetic_energy):
        """Sets the grad_turbulent_kinetic_energy of this GradientSchemes.


        :param grad_turbulent_kinetic_energy: The grad_turbulent_kinetic_energy of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradTurbulentKineticEnergy
        """

        self._grad_turbulent_kinetic_energy = grad_turbulent_kinetic_energy

    @property
    def grad_epsilon_dissipation_rate(self):
        """Gets the grad_epsilon_dissipation_rate of this GradientSchemes.  # noqa: E501


        :return: The grad_epsilon_dissipation_rate of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradEpsilonDissipationRate
        """
        return self._grad_epsilon_dissipation_rate

    @grad_epsilon_dissipation_rate.setter
    def grad_epsilon_dissipation_rate(self, grad_epsilon_dissipation_rate):
        """Sets the grad_epsilon_dissipation_rate of this GradientSchemes.


        :param grad_epsilon_dissipation_rate: The grad_epsilon_dissipation_rate of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradEpsilonDissipationRate
        """

        self._grad_epsilon_dissipation_rate = grad_epsilon_dissipation_rate

    @property
    def grad_omega_dissipation_rate(self):
        """Gets the grad_omega_dissipation_rate of this GradientSchemes.  # noqa: E501


        :return: The grad_omega_dissipation_rate of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradOmegaDissipationRate
        """
        return self._grad_omega_dissipation_rate

    @grad_omega_dissipation_rate.setter
    def grad_omega_dissipation_rate(self, grad_omega_dissipation_rate):
        """Sets the grad_omega_dissipation_rate of this GradientSchemes.


        :param grad_omega_dissipation_rate: The grad_omega_dissipation_rate of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradOmegaDissipationRate
        """

        self._grad_omega_dissipation_rate = grad_omega_dissipation_rate

    @property
    def grad_nu_tilda(self):
        """Gets the grad_nu_tilda of this GradientSchemes.  # noqa: E501


        :return: The grad_nu_tilda of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradNuTilda
        """
        return self._grad_nu_tilda

    @grad_nu_tilda.setter
    def grad_nu_tilda(self, grad_nu_tilda):
        """Sets the grad_nu_tilda of this GradientSchemes.


        :param grad_nu_tilda: The grad_nu_tilda of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradNuTilda
        """

        self._grad_nu_tilda = grad_nu_tilda

    @property
    def grad_temperature(self):
        """Gets the grad_temperature of this GradientSchemes.  # noqa: E501


        :return: The grad_temperature of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradTemperature
        """
        return self._grad_temperature

    @grad_temperature.setter
    def grad_temperature(self, grad_temperature):
        """Sets the grad_temperature of this GradientSchemes.


        :param grad_temperature: The grad_temperature of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradTemperature
        """

        self._grad_temperature = grad_temperature

    @property
    def grad_rhok(self):
        """Gets the grad_rhok of this GradientSchemes.  # noqa: E501


        :return: The grad_rhok of this GradientSchemes.  # noqa: E501
        :rtype: OneOfGradientSchemesGradRhok
        """
        return self._grad_rhok

    @grad_rhok.setter
    def grad_rhok(self, grad_rhok):
        """Sets the grad_rhok of this GradientSchemes.


        :param grad_rhok: The grad_rhok of this GradientSchemes.  # noqa: E501
        :type: OneOfGradientSchemesGradRhok
        """

        self._grad_rhok = grad_rhok

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GradientSchemes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GradientSchemes):
            return True

        return self.to_dict() != other.to_dict()
