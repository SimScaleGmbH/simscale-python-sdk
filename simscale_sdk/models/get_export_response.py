# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class GetExportResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'export_id': 'str',
        'status': 'str',
        'url': 'str',
        'url_expires_at': 'str',
        'error_code': 'str'
    }

    attribute_map = {
        'export_id': 'exportId',
        'status': 'status',
        'url': 'url',
        'url_expires_at': 'urlExpiresAt',
        'error_code': 'errorCode'
    }

    def __init__(self, export_id=None, status=None, url=None, url_expires_at=None, error_code=None, local_vars_configuration=None):  # noqa: E501
        """GetExportResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._export_id = None
        self._status = None
        self._url = None
        self._url_expires_at = None
        self._error_code = None
        self.discriminator = None

        if export_id is not None:
            self.export_id = export_id
        if status is not None:
            self.status = status
        if url is not None:
            self.url = url
        if url_expires_at is not None:
            self.url_expires_at = url_expires_at
        if error_code is not None:
            self.error_code = error_code

    @property
    def export_id(self):
        """Gets the export_id of this GetExportResponse.  # noqa: E501


        :return: The export_id of this GetExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_id

    @export_id.setter
    def export_id(self, export_id):
        """Sets the export_id of this GetExportResponse.


        :param export_id: The export_id of this GetExportResponse.  # noqa: E501
        :type: str
        """

        self._export_id = export_id

    @property
    def status(self):
        """Gets the status of this GetExportResponse.  # noqa: E501

        RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result   # noqa: E501

        :return: The status of this GetExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetExportResponse.

        RUNNING - Export is still in progress DONE - Export is done and ready for download FAILED - Export failed, please retry or contact support EXPIRED - Export is expired, please trigger a new export for the result   # noqa: E501

        :param status: The status of this GetExportResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this GetExportResponse.  # noqa: E501

        The temporary url for downloading the exported result, only set when status is DONE.  # noqa: E501

        :return: The url of this GetExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetExportResponse.

        The temporary url for downloading the exported result, only set when status is DONE.  # noqa: E501

        :param url: The url of this GetExportResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_expires_at(self):
        """Gets the url_expires_at of this GetExportResponse.  # noqa: E501

        Timestamp that the url will be expired, only set when status is DONE. Note that this timestamp is not a guarantee, if the url expired prematurely, please retry this request to get a new one.   # noqa: E501

        :return: The url_expires_at of this GetExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._url_expires_at

    @url_expires_at.setter
    def url_expires_at(self, url_expires_at):
        """Sets the url_expires_at of this GetExportResponse.

        Timestamp that the url will be expired, only set when status is DONE. Note that this timestamp is not a guarantee, if the url expired prematurely, please retry this request to get a new one.   # noqa: E501

        :param url_expires_at: The url_expires_at of this GetExportResponse.  # noqa: E501
        :type: str
        """

        self._url_expires_at = url_expires_at

    @property
    def error_code(self):
        """Gets the error_code of this GetExportResponse.  # noqa: E501


        :return: The error_code of this GetExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this GetExportResponse.


        :param error_code: The error_code of this GetExportResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetExportResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetExportResponse):
            return True

        return self.to_dict() != other.to_dict()
