# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfIncompressibleMaterialViscosityModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'kinematic_viscosity': 'DimensionalKinematicViscosity',
        'kinematic_viscosity_function': 'DimensionalFunctionKinematicViscosity',
        'dynamic_viscosity_function': 'DimensionalFunctionDynamicViscosity',
        'k': 'DimensionalTime',
        'n': 'DimensionalDimensionless',
        'nu_min': 'DimensionalKinematicViscosity',
        'nu_max': 'DimensionalKinematicViscosity',
        'consistency': 'DimensionalDynamicViscosity',
        'flow_index': 'DimensionalDimensionless',
        'fluid_yield_stress': 'DimensionalPressure',
        'critical_shear_rate': 'DimensionalStrainRate',
        'tau0': 'DimensionalTurbulenceKineticEnergy',
        'nu0': 'DimensionalKinematicViscosity',
        'nu_inf': 'DimensionalKinematicViscosity',
        'm': 'DimensionalTime',
        'a': 'DimensionalDimensionless'
    }

    attribute_map = {
        'type': 'type',
        'kinematic_viscosity': 'kinematicViscosity',
        'kinematic_viscosity_function': 'kinematicViscosityFunction',
        'dynamic_viscosity_function': 'dynamicViscosityFunction',
        'k': 'k',
        'n': 'n',
        'nu_min': 'nuMin',
        'nu_max': 'nuMax',
        'consistency': 'consistency',
        'flow_index': 'flowIndex',
        'fluid_yield_stress': 'fluidYieldStress',
        'critical_shear_rate': 'criticalShearRate',
        'tau0': 'tau0',
        'nu0': 'nu0',
        'nu_inf': 'nuInf',
        'm': 'm',
        'a': 'a'
    }

    discriminator_value_class_map = {
        'NEWTONIAN': 'NewtonianViscosityModel',
        'POWER_LAW': 'PowerLawViscosityModel',
        'STD_HERSCHEL_BULKLEY': 'StandardHerschelBulkleyViscosityModel',
        'HERSCHEL_BULKLEY': 'HerschelBulkleyViscosityModel',
        'CROSS_POWER_LAW': 'CrossPowerLawViscosityModel',
        'BIRD_CARREAU': 'BirdCarreauViscosityModel'
    }

    def __init__(self, type='BIRD_CARREAU', kinematic_viscosity=None, kinematic_viscosity_function=None, dynamic_viscosity_function=None, k=None, n=None, nu_min=None, nu_max=None, consistency=None, flow_index=None, fluid_yield_stress=None, critical_shear_rate=None, tau0=None, nu0=None, nu_inf=None, m=None, a=None, local_vars_configuration=None):  # noqa: E501
        """OneOfIncompressibleMaterialViscosityModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._kinematic_viscosity = None
        self._kinematic_viscosity_function = None
        self._dynamic_viscosity_function = None
        self._k = None
        self._n = None
        self._nu_min = None
        self._nu_max = None
        self._consistency = None
        self._flow_index = None
        self._fluid_yield_stress = None
        self._critical_shear_rate = None
        self._tau0 = None
        self._nu0 = None
        self._nu_inf = None
        self._m = None
        self._a = None
        self.discriminator = 'type'

        self.type = type
        if kinematic_viscosity is not None:
            self.kinematic_viscosity = kinematic_viscosity
        if kinematic_viscosity_function is not None:
            self.kinematic_viscosity_function = kinematic_viscosity_function
        if dynamic_viscosity_function is not None:
            self.dynamic_viscosity_function = dynamic_viscosity_function
        if k is not None:
            self.k = k
        if n is not None:
            self.n = n
        if nu_min is not None:
            self.nu_min = nu_min
        if nu_max is not None:
            self.nu_max = nu_max
        if consistency is not None:
            self.consistency = consistency
        if flow_index is not None:
            self.flow_index = flow_index
        if fluid_yield_stress is not None:
            self.fluid_yield_stress = fluid_yield_stress
        if critical_shear_rate is not None:
            self.critical_shear_rate = critical_shear_rate
        if tau0 is not None:
            self.tau0 = tau0
        if nu0 is not None:
            self.nu0 = nu0
        if nu_inf is not None:
            self.nu_inf = nu_inf
        if m is not None:
            self.m = m
        if a is not None:
            self.a = a

    @property
    def type(self):
        """Gets the type of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501

        Choose between <a href='https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model' target='_blank'>Newtonian</a> and <a href='https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/' target='_blank'>Non-Newtonian</a> viscosity models.  Schema name: BirdCarreauViscosityModel  # noqa: E501

        :return: The type of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfIncompressibleMaterialViscosityModel.

        Choose between <a href='https://www.simscale.com/docs/simulation-setup/materials/#newtonian-model' target='_blank'>Newtonian</a> and <a href='https://www.simscale.com/docs/simulation-setup/materials/non-newtonian-models/' target='_blank'>Non-Newtonian</a> viscosity models.  Schema name: BirdCarreauViscosityModel  # noqa: E501

        :param type: The type of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def kinematic_viscosity(self):
        """Gets the kinematic_viscosity of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The kinematic_viscosity of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalKinematicViscosity
        """
        return self._kinematic_viscosity

    @kinematic_viscosity.setter
    def kinematic_viscosity(self, kinematic_viscosity):
        """Sets the kinematic_viscosity of this OneOfIncompressibleMaterialViscosityModel.


        :param kinematic_viscosity: The kinematic_viscosity of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalKinematicViscosity
        """

        self._kinematic_viscosity = kinematic_viscosity

    @property
    def kinematic_viscosity_function(self):
        """Gets the kinematic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The kinematic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalFunctionKinematicViscosity
        """
        return self._kinematic_viscosity_function

    @kinematic_viscosity_function.setter
    def kinematic_viscosity_function(self, kinematic_viscosity_function):
        """Sets the kinematic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.


        :param kinematic_viscosity_function: The kinematic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalFunctionKinematicViscosity
        """

        self._kinematic_viscosity_function = kinematic_viscosity_function

    @property
    def dynamic_viscosity_function(self):
        """Gets the dynamic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The dynamic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalFunctionDynamicViscosity
        """
        return self._dynamic_viscosity_function

    @dynamic_viscosity_function.setter
    def dynamic_viscosity_function(self, dynamic_viscosity_function):
        """Sets the dynamic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.


        :param dynamic_viscosity_function: The dynamic_viscosity_function of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalFunctionDynamicViscosity
        """

        self._dynamic_viscosity_function = dynamic_viscosity_function

    @property
    def k(self):
        """Gets the k of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The k of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalTime
        """
        return self._k

    @k.setter
    def k(self, k):
        """Sets the k of this OneOfIncompressibleMaterialViscosityModel.


        :param k: The k of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalTime
        """

        self._k = k

    @property
    def n(self):
        """Gets the n of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The n of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalDimensionless
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this OneOfIncompressibleMaterialViscosityModel.


        :param n: The n of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalDimensionless
        """

        self._n = n

    @property
    def nu_min(self):
        """Gets the nu_min of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The nu_min of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalKinematicViscosity
        """
        return self._nu_min

    @nu_min.setter
    def nu_min(self, nu_min):
        """Sets the nu_min of this OneOfIncompressibleMaterialViscosityModel.


        :param nu_min: The nu_min of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalKinematicViscosity
        """

        self._nu_min = nu_min

    @property
    def nu_max(self):
        """Gets the nu_max of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The nu_max of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalKinematicViscosity
        """
        return self._nu_max

    @nu_max.setter
    def nu_max(self, nu_max):
        """Sets the nu_max of this OneOfIncompressibleMaterialViscosityModel.


        :param nu_max: The nu_max of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalKinematicViscosity
        """

        self._nu_max = nu_max

    @property
    def consistency(self):
        """Gets the consistency of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The consistency of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalDynamicViscosity
        """
        return self._consistency

    @consistency.setter
    def consistency(self, consistency):
        """Sets the consistency of this OneOfIncompressibleMaterialViscosityModel.


        :param consistency: The consistency of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalDynamicViscosity
        """

        self._consistency = consistency

    @property
    def flow_index(self):
        """Gets the flow_index of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The flow_index of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalDimensionless
        """
        return self._flow_index

    @flow_index.setter
    def flow_index(self, flow_index):
        """Sets the flow_index of this OneOfIncompressibleMaterialViscosityModel.


        :param flow_index: The flow_index of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalDimensionless
        """

        self._flow_index = flow_index

    @property
    def fluid_yield_stress(self):
        """Gets the fluid_yield_stress of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The fluid_yield_stress of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalPressure
        """
        return self._fluid_yield_stress

    @fluid_yield_stress.setter
    def fluid_yield_stress(self, fluid_yield_stress):
        """Sets the fluid_yield_stress of this OneOfIncompressibleMaterialViscosityModel.


        :param fluid_yield_stress: The fluid_yield_stress of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalPressure
        """

        self._fluid_yield_stress = fluid_yield_stress

    @property
    def critical_shear_rate(self):
        """Gets the critical_shear_rate of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The critical_shear_rate of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalStrainRate
        """
        return self._critical_shear_rate

    @critical_shear_rate.setter
    def critical_shear_rate(self, critical_shear_rate):
        """Sets the critical_shear_rate of this OneOfIncompressibleMaterialViscosityModel.


        :param critical_shear_rate: The critical_shear_rate of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalStrainRate
        """

        self._critical_shear_rate = critical_shear_rate

    @property
    def tau0(self):
        """Gets the tau0 of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The tau0 of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalTurbulenceKineticEnergy
        """
        return self._tau0

    @tau0.setter
    def tau0(self, tau0):
        """Sets the tau0 of this OneOfIncompressibleMaterialViscosityModel.


        :param tau0: The tau0 of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalTurbulenceKineticEnergy
        """

        self._tau0 = tau0

    @property
    def nu0(self):
        """Gets the nu0 of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The nu0 of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalKinematicViscosity
        """
        return self._nu0

    @nu0.setter
    def nu0(self, nu0):
        """Sets the nu0 of this OneOfIncompressibleMaterialViscosityModel.


        :param nu0: The nu0 of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalKinematicViscosity
        """

        self._nu0 = nu0

    @property
    def nu_inf(self):
        """Gets the nu_inf of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The nu_inf of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalKinematicViscosity
        """
        return self._nu_inf

    @nu_inf.setter
    def nu_inf(self, nu_inf):
        """Sets the nu_inf of this OneOfIncompressibleMaterialViscosityModel.


        :param nu_inf: The nu_inf of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalKinematicViscosity
        """

        self._nu_inf = nu_inf

    @property
    def m(self):
        """Gets the m of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The m of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalTime
        """
        return self._m

    @m.setter
    def m(self, m):
        """Sets the m of this OneOfIncompressibleMaterialViscosityModel.


        :param m: The m of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalTime
        """

        self._m = m

    @property
    def a(self):
        """Gets the a of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501


        :return: The a of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :rtype: DimensionalDimensionless
        """
        return self._a

    @a.setter
    def a(self, a):
        """Sets the a of this OneOfIncompressibleMaterialViscosityModel.


        :param a: The a of this OneOfIncompressibleMaterialViscosityModel.  # noqa: E501
        :type: DimensionalDimensionless
        """

        self._a = a

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfIncompressibleMaterialViscosityModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfIncompressibleMaterialViscosityModel):
            return True

        return self.to_dict() != other.to_dict()
