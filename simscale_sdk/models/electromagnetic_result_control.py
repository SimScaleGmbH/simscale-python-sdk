# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ElectromagneticResultControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'calculate_inductances': 'bool',
        'calculate_capacitances': 'bool',
        'forces_and_torques': 'list[ForceAndTorque]',
        'probe_points': 'list[ElectromagneticResultControlProbePoint]'
    }

    attribute_map = {
        'calculate_inductances': 'calculateInductances',
        'calculate_capacitances': 'calculateCapacitances',
        'forces_and_torques': 'forcesAndTorques',
        'probe_points': 'probePoints'
    }

    def __init__(self, calculate_inductances=None, calculate_capacitances=None, forces_and_torques=None, probe_points=None, local_vars_configuration=None):  # noqa: E501
        """ElectromagneticResultControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._calculate_inductances = None
        self._calculate_capacitances = None
        self._forces_and_torques = None
        self._probe_points = None
        self.discriminator = None

        if calculate_inductances is not None:
            self.calculate_inductances = calculate_inductances
        if calculate_capacitances is not None:
            self.calculate_capacitances = calculate_capacitances
        if forces_and_torques is not None:
            self.forces_and_torques = forces_and_torques
        if probe_points is not None:
            self.probe_points = probe_points

    @property
    def calculate_inductances(self):
        """Gets the calculate_inductances of this ElectromagneticResultControl.  # noqa: E501

        Calculate the inductance matrix of the coils.  # noqa: E501

        :return: The calculate_inductances of this ElectromagneticResultControl.  # noqa: E501
        :rtype: bool
        """
        return self._calculate_inductances

    @calculate_inductances.setter
    def calculate_inductances(self, calculate_inductances):
        """Sets the calculate_inductances of this ElectromagneticResultControl.

        Calculate the inductance matrix of the coils.  # noqa: E501

        :param calculate_inductances: The calculate_inductances of this ElectromagneticResultControl.  # noqa: E501
        :type: bool
        """

        self._calculate_inductances = calculate_inductances

    @property
    def calculate_capacitances(self):
        """Gets the calculate_capacitances of this ElectromagneticResultControl.  # noqa: E501

        Calculate the capacitance matrix of the conductive bodies.<strong><span style='color: red;'>Note that the field solution will be modified.</span></strong>  # noqa: E501

        :return: The calculate_capacitances of this ElectromagneticResultControl.  # noqa: E501
        :rtype: bool
        """
        return self._calculate_capacitances

    @calculate_capacitances.setter
    def calculate_capacitances(self, calculate_capacitances):
        """Sets the calculate_capacitances of this ElectromagneticResultControl.

        Calculate the capacitance matrix of the conductive bodies.<strong><span style='color: red;'>Note that the field solution will be modified.</span></strong>  # noqa: E501

        :param calculate_capacitances: The calculate_capacitances of this ElectromagneticResultControl.  # noqa: E501
        :type: bool
        """

        self._calculate_capacitances = calculate_capacitances

    @property
    def forces_and_torques(self):
        """Gets the forces_and_torques of this ElectromagneticResultControl.  # noqa: E501


        :return: The forces_and_torques of this ElectromagneticResultControl.  # noqa: E501
        :rtype: list[ForceAndTorque]
        """
        return self._forces_and_torques

    @forces_and_torques.setter
    def forces_and_torques(self, forces_and_torques):
        """Sets the forces_and_torques of this ElectromagneticResultControl.


        :param forces_and_torques: The forces_and_torques of this ElectromagneticResultControl.  # noqa: E501
        :type: list[ForceAndTorque]
        """

        self._forces_and_torques = forces_and_torques

    @property
    def probe_points(self):
        """Gets the probe_points of this ElectromagneticResultControl.  # noqa: E501


        :return: The probe_points of this ElectromagneticResultControl.  # noqa: E501
        :rtype: list[ElectromagneticResultControlProbePoint]
        """
        return self._probe_points

    @probe_points.setter
    def probe_points(self, probe_points):
        """Sets the probe_points of this ElectromagneticResultControl.


        :param probe_points: The probe_points of this ElectromagneticResultControl.  # noqa: E501
        :type: list[ElectromagneticResultControlProbePoint]
        """

        self._probe_points = probe_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElectromagneticResultControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElectromagneticResultControl):
            return True

        return self.to_dict() != other.to_dict()
