# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class Tolerance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'absolute_tolerance': 'float',
        'relative_tolerance': 'float'
    }

    attribute_map = {
        'absolute_tolerance': 'absoluteTolerance',
        'relative_tolerance': 'relativeTolerance'
    }

    def __init__(self, absolute_tolerance=None, relative_tolerance=None, local_vars_configuration=None):  # noqa: E501
        """Tolerance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._absolute_tolerance = None
        self._relative_tolerance = None
        self.discriminator = None

        if absolute_tolerance is not None:
            self.absolute_tolerance = absolute_tolerance
        if relative_tolerance is not None:
            self.relative_tolerance = relative_tolerance

    @property
    def absolute_tolerance(self):
        """Gets the absolute_tolerance of this Tolerance.  # noqa: E501

        Absolute tolerance is the measure of residual in the solution after the current iteration is solved. The solution is stopped when the absolute residual falls below this value.  # noqa: E501

        :return: The absolute_tolerance of this Tolerance.  # noqa: E501
        :rtype: float
        """
        return self._absolute_tolerance

    @absolute_tolerance.setter
    def absolute_tolerance(self, absolute_tolerance):
        """Sets the absolute_tolerance of this Tolerance.

        Absolute tolerance is the measure of residual in the solution after the current iteration is solved. The solution is stopped when the absolute residual falls below this value.  # noqa: E501

        :param absolute_tolerance: The absolute_tolerance of this Tolerance.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                absolute_tolerance is not None and absolute_tolerance > 1):  # noqa: E501
            raise ValueError("Invalid value for `absolute_tolerance`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                absolute_tolerance is not None and absolute_tolerance < 0):  # noqa: E501
            raise ValueError("Invalid value for `absolute_tolerance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._absolute_tolerance = absolute_tolerance

    @property
    def relative_tolerance(self):
        """Gets the relative_tolerance of this Tolerance.  # noqa: E501

        Relative tolerance is the ratio of current residual to the initial residual. The solution is stopped when the relative residual falls below this value.  # noqa: E501

        :return: The relative_tolerance of this Tolerance.  # noqa: E501
        :rtype: float
        """
        return self._relative_tolerance

    @relative_tolerance.setter
    def relative_tolerance(self, relative_tolerance):
        """Sets the relative_tolerance of this Tolerance.

        Relative tolerance is the ratio of current residual to the initial residual. The solution is stopped when the relative residual falls below this value.  # noqa: E501

        :param relative_tolerance: The relative_tolerance of this Tolerance.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                relative_tolerance is not None and relative_tolerance > 1):  # noqa: E501
            raise ValueError("Invalid value for `relative_tolerance`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                relative_tolerance is not None and relative_tolerance < 0):  # noqa: E501
            raise ValueError("Invalid value for `relative_tolerance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relative_tolerance = relative_tolerance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tolerance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tolerance):
            return True

        return self.to_dict() != other.to_dict()
