# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfVisualizationStyle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'representation': 'str',
        'num_pulses': 'int',
        'relative_comet_length': 'float'
    }

    attribute_map = {
        'representation': 'representation',
        'num_pulses': 'numPulses',
        'relative_comet_length': 'relativeCometLength'
    }

    discriminator_value_class_map = {
        'CYLINDERS': 'CylindersVisualizationStyle',
        'SPHERES': 'SpheresVisualizationStyle',
        'COMETS': 'CometsVisualizationStyle'
    }

    def __init__(self, representation='COMETS', num_pulses=15, relative_comet_length=0.000010, local_vars_configuration=None):  # noqa: E501
        """OneOfVisualizationStyle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._representation = None
        self._num_pulses = None
        self._relative_comet_length = None
        self.discriminator = 'representation'

        self.representation = representation
        self.num_pulses = num_pulses
        self.relative_comet_length = relative_comet_length

    @property
    def representation(self):
        """Gets the representation of this OneOfVisualizationStyle.  # noqa: E501

        The representation to use for particle traces.  # noqa: E501

        :return: The representation of this OneOfVisualizationStyle.  # noqa: E501
        :rtype: str
        """
        return self._representation

    @representation.setter
    def representation(self, representation):
        """Sets the representation of this OneOfVisualizationStyle.

        The representation to use for particle traces.  # noqa: E501

        :param representation: The representation of this OneOfVisualizationStyle.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and representation is None:  # noqa: E501
            raise ValueError("Invalid value for `representation`, must not be `None`")  # noqa: E501

        self._representation = representation

    @property
    def num_pulses(self):
        """Gets the num_pulses of this OneOfVisualizationStyle.  # noqa: E501

        This value specifies how many pulses there should be in the model.  # noqa: E501

        :return: The num_pulses of this OneOfVisualizationStyle.  # noqa: E501
        :rtype: int
        """
        return self._num_pulses

    @num_pulses.setter
    def num_pulses(self, num_pulses):
        """Sets the num_pulses of this OneOfVisualizationStyle.

        This value specifies how many pulses there should be in the model.  # noqa: E501

        :param num_pulses: The num_pulses of this OneOfVisualizationStyle.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_pulses is None:  # noqa: E501
            raise ValueError("Invalid value for `num_pulses`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_pulses is not None and num_pulses > 200):  # noqa: E501
            raise ValueError("Invalid value for `num_pulses`, must be a value less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_pulses is not None and num_pulses < 5):  # noqa: E501
            raise ValueError("Invalid value for `num_pulses`, must be a value greater than or equal to `5`")  # noqa: E501

        self._num_pulses = num_pulses

    @property
    def relative_comet_length(self):
        """Gets the relative_comet_length of this OneOfVisualizationStyle.  # noqa: E501

        The length of the tail of the comets. It is specified in time and is a fraction of the global total time range for all particles in this particle trace. For example, if the total trace time is 2, and the relativeCometLength is 0.01, then the length of the tail will be 0.02.  # noqa: E501

        :return: The relative_comet_length of this OneOfVisualizationStyle.  # noqa: E501
        :rtype: float
        """
        return self._relative_comet_length

    @relative_comet_length.setter
    def relative_comet_length(self, relative_comet_length):
        """Sets the relative_comet_length of this OneOfVisualizationStyle.

        The length of the tail of the comets. It is specified in time and is a fraction of the global total time range for all particles in this particle trace. For example, if the total trace time is 2, and the relativeCometLength is 0.01, then the length of the tail will be 0.02.  # noqa: E501

        :param relative_comet_length: The relative_comet_length of this OneOfVisualizationStyle.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and relative_comet_length is None:  # noqa: E501
            raise ValueError("Invalid value for `relative_comet_length`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                relative_comet_length is not None and relative_comet_length > 0.1):  # noqa: E501
            raise ValueError("Invalid value for `relative_comet_length`, must be a value less than or equal to `0.1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                relative_comet_length is not None and relative_comet_length < 0.000010):  # noqa: E501
            raise ValueError("Invalid value for `relative_comet_length`, must be a value greater than or equal to `0.000010`")  # noqa: E501

        self._relative_comet_length = relative_comet_length

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfVisualizationStyle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfVisualizationStyle):
            return True

        return self.to_dict() != other.to_dict()
