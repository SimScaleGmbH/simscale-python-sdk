# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class StrandedCoil(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'number_of_turns': 'int',
        'wire_diameter': 'DimensionalLength'
    }

    attribute_map = {
        'type': 'type',
        'number_of_turns': 'numberOfTurns',
        'wire_diameter': 'wireDiameter'
    }

    def __init__(self, type='STRANDED_COIL', number_of_turns=None, wire_diameter=None, local_vars_configuration=None):  # noqa: E501
        """StrandedCoil - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._number_of_turns = None
        self._wire_diameter = None
        self.discriminator = None

        self.type = type
        if number_of_turns is not None:
            self.number_of_turns = number_of_turns
        if wire_diameter is not None:
            self.wire_diameter = wire_diameter

    @property
    def type(self):
        """Gets the type of this StrandedCoil.  # noqa: E501

        Schema name: StrandedCoil  # noqa: E501

        :return: The type of this StrandedCoil.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StrandedCoil.

        Schema name: StrandedCoil  # noqa: E501

        :param type: The type of this StrandedCoil.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def number_of_turns(self):
        """Gets the number_of_turns of this StrandedCoil.  # noqa: E501

        <p>The <strong>Number of Turns</strong> option indicates the number of times the wire is wound around the coil's core to form loops. Each loop is a complete 360-degree winding of the wire around the core.</p>  # noqa: E501

        :return: The number_of_turns of this StrandedCoil.  # noqa: E501
        :rtype: int
        """
        return self._number_of_turns

    @number_of_turns.setter
    def number_of_turns(self, number_of_turns):
        """Sets the number_of_turns of this StrandedCoil.

        <p>The <strong>Number of Turns</strong> option indicates the number of times the wire is wound around the coil's core to form loops. Each loop is a complete 360-degree winding of the wire around the core.</p>  # noqa: E501

        :param number_of_turns: The number_of_turns of this StrandedCoil.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                number_of_turns is not None and number_of_turns < 1):  # noqa: E501
            raise ValueError("Invalid value for `number_of_turns`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number_of_turns = number_of_turns

    @property
    def wire_diameter(self):
        """Gets the wire_diameter of this StrandedCoil.  # noqa: E501


        :return: The wire_diameter of this StrandedCoil.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._wire_diameter

    @wire_diameter.setter
    def wire_diameter(self, wire_diameter):
        """Sets the wire_diameter of this StrandedCoil.


        :param wire_diameter: The wire_diameter of this StrandedCoil.  # noqa: E501
        :type: DimensionalLength
        """

        self._wire_diameter = wire_diameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StrandedCoil):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StrandedCoil):
            return True

        return self.to_dict() != other.to_dict()
