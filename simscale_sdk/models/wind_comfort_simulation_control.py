# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class WindComfortSimulationControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_direction_run_time': 'DimensionalTime',
        'number_of_fluid_passes': 'float',
        'velocity_scaling': 'float'
    }

    attribute_map = {
        'max_direction_run_time': 'maxDirectionRunTime',
        'number_of_fluid_passes': 'numberOfFluidPasses',
        'velocity_scaling': 'velocityScaling'
    }

    def __init__(self, max_direction_run_time=None, number_of_fluid_passes=None, velocity_scaling=None, local_vars_configuration=None):  # noqa: E501
        """WindComfortSimulationControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max_direction_run_time = None
        self._number_of_fluid_passes = None
        self._velocity_scaling = None
        self.discriminator = None

        if max_direction_run_time is not None:
            self.max_direction_run_time = max_direction_run_time
        if number_of_fluid_passes is not None:
            self.number_of_fluid_passes = number_of_fluid_passes
        if velocity_scaling is not None:
            self.velocity_scaling = velocity_scaling

    @property
    def max_direction_run_time(self):
        """Gets the max_direction_run_time of this WindComfortSimulationControl.  # noqa: E501


        :return: The max_direction_run_time of this WindComfortSimulationControl.  # noqa: E501
        :rtype: DimensionalTime
        """
        return self._max_direction_run_time

    @max_direction_run_time.setter
    def max_direction_run_time(self, max_direction_run_time):
        """Sets the max_direction_run_time of this WindComfortSimulationControl.


        :param max_direction_run_time: The max_direction_run_time of this WindComfortSimulationControl.  # noqa: E501
        :type: DimensionalTime
        """

        self._max_direction_run_time = max_direction_run_time

    @property
    def number_of_fluid_passes(self):
        """Gets the number_of_fluid_passes of this WindComfortSimulationControl.  # noqa: E501

        <p>Set how many times the fluid (air) passes over the domain during the simulation.</p><p> <b>Warning</b>: Values below 2.0 might produce invalid results while higher numbers will require more simulation time and consequently more GPU hours. Recommended value is 3.0. <a href='https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/simulation-control/' target='_blank'>Learn more</a>.</p>  # noqa: E501

        :return: The number_of_fluid_passes of this WindComfortSimulationControl.  # noqa: E501
        :rtype: float
        """
        return self._number_of_fluid_passes

    @number_of_fluid_passes.setter
    def number_of_fluid_passes(self, number_of_fluid_passes):
        """Sets the number_of_fluid_passes of this WindComfortSimulationControl.

        <p>Set how many times the fluid (air) passes over the domain during the simulation.</p><p> <b>Warning</b>: Values below 2.0 might produce invalid results while higher numbers will require more simulation time and consequently more GPU hours. Recommended value is 3.0. <a href='https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/simulation-control/' target='_blank'>Learn more</a>.</p>  # noqa: E501

        :param number_of_fluid_passes: The number_of_fluid_passes of this WindComfortSimulationControl.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                number_of_fluid_passes is not None and number_of_fluid_passes > 10):  # noqa: E501
            raise ValueError("Invalid value for `number_of_fluid_passes`, must be a value less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                number_of_fluid_passes is not None and number_of_fluid_passes <= 0):  # noqa: E501
            raise ValueError("Invalid value for `number_of_fluid_passes`, must be a value greater than `0`")  # noqa: E501

        self._number_of_fluid_passes = number_of_fluid_passes

    @property
    def velocity_scaling(self):
        """Gets the velocity_scaling of this WindComfortSimulationControl.  # noqa: E501

        <p>It affects the stability of the simulation. The default value of 0.1 is a good compromise between accuracy and computational requirements. Lower values of this parameter might increase the stability of the simulation at the cost of higher computational time.</p>  # noqa: E501

        :return: The velocity_scaling of this WindComfortSimulationControl.  # noqa: E501
        :rtype: float
        """
        return self._velocity_scaling

    @velocity_scaling.setter
    def velocity_scaling(self, velocity_scaling):
        """Sets the velocity_scaling of this WindComfortSimulationControl.

        <p>It affects the stability of the simulation. The default value of 0.1 is a good compromise between accuracy and computational requirements. Lower values of this parameter might increase the stability of the simulation at the cost of higher computational time.</p>  # noqa: E501

        :param velocity_scaling: The velocity_scaling of this WindComfortSimulationControl.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                velocity_scaling is not None and velocity_scaling > 0.25):  # noqa: E501
            raise ValueError("Invalid value for `velocity_scaling`, must be a value less than or equal to `0.25`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                velocity_scaling is not None and velocity_scaling < 0.025):  # noqa: E501
            raise ValueError("Invalid value for `velocity_scaling`, must be a value greater than or equal to `0.025`")  # noqa: E501

        self._velocity_scaling = velocity_scaling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WindComfortSimulationControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WindComfortSimulationControl):
            return True

        return self.to_dict() != other.to_dict()
