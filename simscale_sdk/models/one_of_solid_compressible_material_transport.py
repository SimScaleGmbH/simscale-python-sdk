# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfSolidCompressibleMaterialTransport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'conductivity': 'CrossPlaneOrthotropicConductivity',
        'thermo': 'HConstThermo',
        'orientation': 'OneOfConstCrossPlaneOrthotropicTransportOrientation'
    }

    attribute_map = {
        'type': 'type',
        'conductivity': 'conductivity',
        'thermo': 'thermo',
        'orientation': 'orientation'
    }

    discriminator_value_class_map = {
        'CONST_ISO': 'ConstIsoTransport',
        'CONST_AN_ISO': 'ConstAnIsoTransport',
        'CONST_CROSS_PLANE_ORTHO': 'ConstCrossPlaneOrthotropicTransport'
    }

    def __init__(self, type='CONST_CROSS_PLANE_ORTHO', conductivity=None, thermo=None, orientation=None, local_vars_configuration=None):  # noqa: E501
        """OneOfSolidCompressibleMaterialTransport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._conductivity = None
        self._thermo = None
        self._orientation = None
        self.discriminator = 'type'

        self.type = type
        if conductivity is not None:
            self.conductivity = conductivity
        if thermo is not None:
            self.thermo = thermo
        if orientation is not None:
            self.orientation = orientation

    @property
    def type(self):
        """Gets the type of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501

        <p>The thermal conductivity of a material is a measure of its ability to conduct heat.<ul><li><strong>Isotropic</strong>: the thermal conductivity &kappa; is the same in all directions.</li><li><strong>Orthotropic</strong>: the thermal conductivity is unique and independent in three orthogonal directions. It is defined by &kappa;<sub>x</sub>, &kappa;<sub>y</sub>, and &kappa;<sub>z</sub>.</li><li><strong>Cross-plane orthotropic</strong>: it is defined by an <em>in-plane</em> conductivity, which is an isotropic conductivity on a given plane, and a <em>cross-plane<strong>&nbsp;</strong></em>conductivity, which acts in the direction normal to the aforementioned plane.</li></ul></p>  Schema name: ConstCrossPlaneOrthotropicTransport  # noqa: E501

        :return: The type of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfSolidCompressibleMaterialTransport.

        <p>The thermal conductivity of a material is a measure of its ability to conduct heat.<ul><li><strong>Isotropic</strong>: the thermal conductivity &kappa; is the same in all directions.</li><li><strong>Orthotropic</strong>: the thermal conductivity is unique and independent in three orthogonal directions. It is defined by &kappa;<sub>x</sub>, &kappa;<sub>y</sub>, and &kappa;<sub>z</sub>.</li><li><strong>Cross-plane orthotropic</strong>: it is defined by an <em>in-plane</em> conductivity, which is an isotropic conductivity on a given plane, and a <em>cross-plane<strong>&nbsp;</strong></em>conductivity, which acts in the direction normal to the aforementioned plane.</li></ul></p>  Schema name: ConstCrossPlaneOrthotropicTransport  # noqa: E501

        :param type: The type of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def conductivity(self):
        """Gets the conductivity of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501


        :return: The conductivity of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :rtype: CrossPlaneOrthotropicConductivity
        """
        return self._conductivity

    @conductivity.setter
    def conductivity(self, conductivity):
        """Sets the conductivity of this OneOfSolidCompressibleMaterialTransport.


        :param conductivity: The conductivity of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :type: CrossPlaneOrthotropicConductivity
        """

        self._conductivity = conductivity

    @property
    def thermo(self):
        """Gets the thermo of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501


        :return: The thermo of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :rtype: HConstThermo
        """
        return self._thermo

    @thermo.setter
    def thermo(self, thermo):
        """Sets the thermo of this OneOfSolidCompressibleMaterialTransport.


        :param thermo: The thermo of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :type: HConstThermo
        """

        self._thermo = thermo

    @property
    def orientation(self):
        """Gets the orientation of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501


        :return: The orientation of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :rtype: OneOfConstCrossPlaneOrthotropicTransportOrientation
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this OneOfSolidCompressibleMaterialTransport.


        :param orientation: The orientation of this OneOfSolidCompressibleMaterialTransport.  # noqa: E501
        :type: OneOfConstCrossPlaneOrthotropicTransportOrientation
        """

        self._orientation = orientation

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfSolidCompressibleMaterialTransport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfSolidCompressibleMaterialTransport):
            return True

        return self.to_dict() != other.to_dict()
