# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfNewSurfaceRefinementPacefishV38MeshSizing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'fineness': 'str',
        'target_resolution': 'DimensionalLength',
        'buffer_cells_no_extrude': 'int',
        'additional_directional_cells': 'AdditionalDirectionalCells'
    }

    attribute_map = {
        'type': 'type',
        'fineness': 'fineness',
        'target_resolution': 'targetResolution',
        'buffer_cells_no_extrude': 'bufferCellsNoExtrude',
        'additional_directional_cells': 'additionalDirectionalCells'
    }

    discriminator_value_class_map = {
        'AUTOMATIC': 'AutomaticMeshSizing',
        'MANUAL_SURFACE_PACEFISH': 'ManualSurfaceSizingPacefish'
    }

    def __init__(self, type='MANUAL_SURFACE_PACEFISH', fineness=None, target_resolution=None, buffer_cells_no_extrude=None, additional_directional_cells=None, local_vars_configuration=None):  # noqa: E501
        """OneOfNewSurfaceRefinementPacefishV38MeshSizing - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._fineness = None
        self._target_resolution = None
        self._buffer_cells_no_extrude = None
        self._additional_directional_cells = None
        self.discriminator = 'type'

        self.type = type
        if fineness is not None:
            self.fineness = fineness
        if target_resolution is not None:
            self.target_resolution = target_resolution
        if buffer_cells_no_extrude is not None:
            self.buffer_cells_no_extrude = buffer_cells_no_extrude
        if additional_directional_cells is not None:
            self.additional_directional_cells = additional_directional_cells

    @property
    def type(self):
        """Gets the type of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501

        Schema name: ManualSurfaceSizingPacefish  # noqa: E501

        :return: The type of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.

        Schema name: ManualSurfaceSizingPacefish  # noqa: E501

        :param type: The type of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fineness(self):
        """Gets the fineness of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501

        <p>Choose between <i>Automatic</i> and <i>Manual</i> mesh settings. <a href='https://www.simscale.com/docs/analysis-types/incompressible-lbm/#mesh' target='_blank'>Learn more.</a></p><p><b>Note:</b> Mesh fineness impacts the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results in most cases.</p>  # noqa: E501

        :return: The fineness of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :rtype: str
        """
        return self._fineness

    @fineness.setter
    def fineness(self, fineness):
        """Sets the fineness of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.

        <p>Choose between <i>Automatic</i> and <i>Manual</i> mesh settings. <a href='https://www.simscale.com/docs/analysis-types/incompressible-lbm/#mesh' target='_blank'>Learn more.</a></p><p><b>Note:</b> Mesh fineness impacts the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results in most cases.</p>  # noqa: E501

        :param fineness: The fineness of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :type: str
        """
        allowed_values = ["VERY_COARSE", "COARSE", "MODERATE", "FINE", "VERY_FINE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and fineness not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `fineness` ({0}), must be one of {1}"  # noqa: E501
                .format(fineness, allowed_values)
            )

        self._fineness = fineness

    @property
    def target_resolution(self):
        """Gets the target_resolution of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501


        :return: The target_resolution of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._target_resolution

    @target_resolution.setter
    def target_resolution(self, target_resolution):
        """Sets the target_resolution of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.


        :param target_resolution: The target_resolution of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :type: DimensionalLength
        """

        self._target_resolution = target_resolution

    @property
    def buffer_cells_no_extrude(self):
        """Gets the buffer_cells_no_extrude of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501

        Specify the minimum number of buffer cells between regions of different refinements.  # noqa: E501

        :return: The buffer_cells_no_extrude of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :rtype: int
        """
        return self._buffer_cells_no_extrude

    @buffer_cells_no_extrude.setter
    def buffer_cells_no_extrude(self, buffer_cells_no_extrude):
        """Sets the buffer_cells_no_extrude of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.

        Specify the minimum number of buffer cells between regions of different refinements.  # noqa: E501

        :param buffer_cells_no_extrude: The buffer_cells_no_extrude of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                buffer_cells_no_extrude is not None and buffer_cells_no_extrude < 3):  # noqa: E501
            raise ValueError("Invalid value for `buffer_cells_no_extrude`, must be a value greater than or equal to `3`")  # noqa: E501

        self._buffer_cells_no_extrude = buffer_cells_no_extrude

    @property
    def additional_directional_cells(self):
        """Gets the additional_directional_cells of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501


        :return: The additional_directional_cells of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :rtype: AdditionalDirectionalCells
        """
        return self._additional_directional_cells

    @additional_directional_cells.setter
    def additional_directional_cells(self, additional_directional_cells):
        """Sets the additional_directional_cells of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.


        :param additional_directional_cells: The additional_directional_cells of this OneOfNewSurfaceRefinementPacefishV38MeshSizing.  # noqa: E501
        :type: AdditionalDirectionalCells
        """

        self._additional_directional_cells = additional_directional_cells

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfNewSurfaceRefinementPacefishV38MeshSizing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfNewSurfaceRefinementPacefishV38MeshSizing):
            return True

        return self.to_dict() != other.to_dict()
