# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ExplicitTimeIntegrationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'scheme': 'OneOfExplicitTimeIntegrationTypeScheme',
        'scheme_formulation': 'str',
        'stop_on_cfl_criterion': 'bool',
        'mass_matrix_shift': 'float'
    }

    attribute_map = {
        'type': 'type',
        'scheme': 'scheme',
        'scheme_formulation': 'schemeFormulation',
        'stop_on_cfl_criterion': 'stopOnCFLCriterion',
        'mass_matrix_shift': 'massMatrixShift'
    }

    def __init__(self, type='EXPLICIT', scheme=None, scheme_formulation=None, stop_on_cfl_criterion=None, mass_matrix_shift=None, local_vars_configuration=None):  # noqa: E501
        """ExplicitTimeIntegrationType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._scheme = None
        self._scheme_formulation = None
        self._stop_on_cfl_criterion = None
        self._mass_matrix_shift = None
        self.discriminator = None

        self.type = type
        if scheme is not None:
            self.scheme = scheme
        if scheme_formulation is not None:
            self.scheme_formulation = scheme_formulation
        if stop_on_cfl_criterion is not None:
            self.stop_on_cfl_criterion = stop_on_cfl_criterion
        if mass_matrix_shift is not None:
            self.mass_matrix_shift = mass_matrix_shift

    @property
    def type(self):
        """Gets the type of this ExplicitTimeIntegrationType.  # noqa: E501

        <p>Choose the time integration scheme type</p><br /><br />Important remarks:<br /><ul><li>Choose <b>implicit</b> if the problem is static or dynamic but not so complex. Implicit analysis takes more solution time but can solve the problem easily with larger timesteps. Therefore, it is always recommended to use implicit time integration scheme. </li><i>Choose <b>explicit</b> if the problem is only dynamic and highly complex. Explicit analysis takes less solution time but also needs more refined (small) timesteps to solve the problem. Therefore, in most of the cases it's not recommended due to convergence problems. </i></ul>   Schema name: ExplicitTimeIntegrationType  # noqa: E501

        :return: The type of this ExplicitTimeIntegrationType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExplicitTimeIntegrationType.

        <p>Choose the time integration scheme type</p><br /><br />Important remarks:<br /><ul><li>Choose <b>implicit</b> if the problem is static or dynamic but not so complex. Implicit analysis takes more solution time but can solve the problem easily with larger timesteps. Therefore, it is always recommended to use implicit time integration scheme. </li><i>Choose <b>explicit</b> if the problem is only dynamic and highly complex. Explicit analysis takes less solution time but also needs more refined (small) timesteps to solve the problem. Therefore, in most of the cases it's not recommended due to convergence problems. </i></ul>   Schema name: ExplicitTimeIntegrationType  # noqa: E501

        :param type: The type of this ExplicitTimeIntegrationType.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def scheme(self):
        """Gets the scheme of this ExplicitTimeIntegrationType.  # noqa: E501


        :return: The scheme of this ExplicitTimeIntegrationType.  # noqa: E501
        :rtype: OneOfExplicitTimeIntegrationTypeScheme
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this ExplicitTimeIntegrationType.


        :param scheme: The scheme of this ExplicitTimeIntegrationType.  # noqa: E501
        :type: OneOfExplicitTimeIntegrationTypeScheme
        """

        self._scheme = scheme

    @property
    def scheme_formulation(self):
        """Gets the scheme_formulation of this ExplicitTimeIntegrationType.  # noqa: E501

        <p>Choose the primary variable for the time integration scheme.</p>  # noqa: E501

        :return: The scheme_formulation of this ExplicitTimeIntegrationType.  # noqa: E501
        :rtype: str
        """
        return self._scheme_formulation

    @scheme_formulation.setter
    def scheme_formulation(self, scheme_formulation):
        """Sets the scheme_formulation of this ExplicitTimeIntegrationType.

        <p>Choose the primary variable for the time integration scheme.</p>  # noqa: E501

        :param scheme_formulation: The scheme_formulation of this ExplicitTimeIntegrationType.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCELERATION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and scheme_formulation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `scheme_formulation` ({0}), must be one of {1}"  # noqa: E501
                .format(scheme_formulation, allowed_values)
            )

        self._scheme_formulation = scheme_formulation

    @property
    def stop_on_cfl_criterion(self):
        """Gets the stop_on_cfl_criterion of this ExplicitTimeIntegrationType.  # noqa: E501

        <p>If activated the simulation run is stopped when at some point the Courant-Friedrichs-Lewy (CFL) condition is violated.</p>  # noqa: E501

        :return: The stop_on_cfl_criterion of this ExplicitTimeIntegrationType.  # noqa: E501
        :rtype: bool
        """
        return self._stop_on_cfl_criterion

    @stop_on_cfl_criterion.setter
    def stop_on_cfl_criterion(self, stop_on_cfl_criterion):
        """Sets the stop_on_cfl_criterion of this ExplicitTimeIntegrationType.

        <p>If activated the simulation run is stopped when at some point the Courant-Friedrichs-Lewy (CFL) condition is violated.</p>  # noqa: E501

        :param stop_on_cfl_criterion: The stop_on_cfl_criterion of this ExplicitTimeIntegrationType.  # noqa: E501
        :type: bool
        """

        self._stop_on_cfl_criterion = stop_on_cfl_criterion

    @property
    def mass_matrix_shift(self):
        """Gets the mass_matrix_shift of this ExplicitTimeIntegrationType.  # noqa: E501

        <p>This parameter c<sub>K</sub> allows the shifting of the mass matrix with the stiffness matrix multiplied by c<sub>K</sub>: <b>M</b><sup>'</sup>=<b>M</b> + c<sub>K</sub>*<b>K</b>. This makes it possible to strongly improve convergence in dynamics with implicit time scheme by imposing a cut-off frequency inversely proportional to the value of c<sub>K</sub> (at the cost of a light distortion of all the eigen frequencies of the system).</p>  # noqa: E501

        :return: The mass_matrix_shift of this ExplicitTimeIntegrationType.  # noqa: E501
        :rtype: float
        """
        return self._mass_matrix_shift

    @mass_matrix_shift.setter
    def mass_matrix_shift(self, mass_matrix_shift):
        """Sets the mass_matrix_shift of this ExplicitTimeIntegrationType.

        <p>This parameter c<sub>K</sub> allows the shifting of the mass matrix with the stiffness matrix multiplied by c<sub>K</sub>: <b>M</b><sup>'</sup>=<b>M</b> + c<sub>K</sub>*<b>K</b>. This makes it possible to strongly improve convergence in dynamics with implicit time scheme by imposing a cut-off frequency inversely proportional to the value of c<sub>K</sub> (at the cost of a light distortion of all the eigen frequencies of the system).</p>  # noqa: E501

        :param mass_matrix_shift: The mass_matrix_shift of this ExplicitTimeIntegrationType.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                mass_matrix_shift is not None and mass_matrix_shift < 0):  # noqa: E501
            raise ValueError("Invalid value for `mass_matrix_shift`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mass_matrix_shift = mass_matrix_shift

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExplicitTimeIntegrationType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExplicitTimeIntegrationType):
            return True

        return self.to_dict() != other.to_dict()
