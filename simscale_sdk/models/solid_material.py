# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class SolidMaterial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'material_behavior': 'OneOfSolidMaterialMaterialBehavior',
        'density': 'DimensionalFunctionDensity',
        'expansion': 'IsotropicExpansion',
        'conductivity': 'OneOfSolidMaterialConductivity',
        'specific_heat': 'DimensionalFunctionSpecificHeat',
        'topological_reference': 'TopologicalReference',
        'built_in_material': 'str',
        'material_library_reference': 'MaterialLibraryReference'
    }

    attribute_map = {
        'name': 'name',
        'material_behavior': 'materialBehavior',
        'density': 'density',
        'expansion': 'expansion',
        'conductivity': 'conductivity',
        'specific_heat': 'specificHeat',
        'topological_reference': 'topologicalReference',
        'built_in_material': 'builtInMaterial',
        'material_library_reference': 'materialLibraryReference'
    }

    def __init__(self, name=None, material_behavior=None, density=None, expansion=None, conductivity=None, specific_heat=None, topological_reference=None, built_in_material=None, material_library_reference=None, local_vars_configuration=None):  # noqa: E501
        """SolidMaterial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._material_behavior = None
        self._density = None
        self._expansion = None
        self._conductivity = None
        self._specific_heat = None
        self._topological_reference = None
        self._built_in_material = None
        self._material_library_reference = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if material_behavior is not None:
            self.material_behavior = material_behavior
        if density is not None:
            self.density = density
        if expansion is not None:
            self.expansion = expansion
        if conductivity is not None:
            self.conductivity = conductivity
        if specific_heat is not None:
            self.specific_heat = specific_heat
        if topological_reference is not None:
            self.topological_reference = topological_reference
        if built_in_material is not None:
            self.built_in_material = built_in_material
        if material_library_reference is not None:
            self.material_library_reference = material_library_reference

    @property
    def name(self):
        """Gets the name of this SolidMaterial.  # noqa: E501


        :return: The name of this SolidMaterial.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SolidMaterial.


        :param name: The name of this SolidMaterial.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def material_behavior(self):
        """Gets the material_behavior of this SolidMaterial.  # noqa: E501


        :return: The material_behavior of this SolidMaterial.  # noqa: E501
        :rtype: OneOfSolidMaterialMaterialBehavior
        """
        return self._material_behavior

    @material_behavior.setter
    def material_behavior(self, material_behavior):
        """Sets the material_behavior of this SolidMaterial.


        :param material_behavior: The material_behavior of this SolidMaterial.  # noqa: E501
        :type: OneOfSolidMaterialMaterialBehavior
        """

        self._material_behavior = material_behavior

    @property
    def density(self):
        """Gets the density of this SolidMaterial.  # noqa: E501


        :return: The density of this SolidMaterial.  # noqa: E501
        :rtype: DimensionalFunctionDensity
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this SolidMaterial.


        :param density: The density of this SolidMaterial.  # noqa: E501
        :type: DimensionalFunctionDensity
        """

        self._density = density

    @property
    def expansion(self):
        """Gets the expansion of this SolidMaterial.  # noqa: E501


        :return: The expansion of this SolidMaterial.  # noqa: E501
        :rtype: IsotropicExpansion
        """
        return self._expansion

    @expansion.setter
    def expansion(self, expansion):
        """Sets the expansion of this SolidMaterial.


        :param expansion: The expansion of this SolidMaterial.  # noqa: E501
        :type: IsotropicExpansion
        """

        self._expansion = expansion

    @property
    def conductivity(self):
        """Gets the conductivity of this SolidMaterial.  # noqa: E501


        :return: The conductivity of this SolidMaterial.  # noqa: E501
        :rtype: OneOfSolidMaterialConductivity
        """
        return self._conductivity

    @conductivity.setter
    def conductivity(self, conductivity):
        """Sets the conductivity of this SolidMaterial.


        :param conductivity: The conductivity of this SolidMaterial.  # noqa: E501
        :type: OneOfSolidMaterialConductivity
        """

        self._conductivity = conductivity

    @property
    def specific_heat(self):
        """Gets the specific_heat of this SolidMaterial.  # noqa: E501


        :return: The specific_heat of this SolidMaterial.  # noqa: E501
        :rtype: DimensionalFunctionSpecificHeat
        """
        return self._specific_heat

    @specific_heat.setter
    def specific_heat(self, specific_heat):
        """Sets the specific_heat of this SolidMaterial.


        :param specific_heat: The specific_heat of this SolidMaterial.  # noqa: E501
        :type: DimensionalFunctionSpecificHeat
        """

        self._specific_heat = specific_heat

    @property
    def topological_reference(self):
        """Gets the topological_reference of this SolidMaterial.  # noqa: E501


        :return: The topological_reference of this SolidMaterial.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this SolidMaterial.


        :param topological_reference: The topological_reference of this SolidMaterial.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    @property
    def built_in_material(self):
        """Gets the built_in_material of this SolidMaterial.  # noqa: E501


        :return: The built_in_material of this SolidMaterial.  # noqa: E501
        :rtype: str
        """
        return self._built_in_material

    @built_in_material.setter
    def built_in_material(self, built_in_material):
        """Sets the built_in_material of this SolidMaterial.


        :param built_in_material: The built_in_material of this SolidMaterial.  # noqa: E501
        :type: str
        """

        self._built_in_material = built_in_material

    @property
    def material_library_reference(self):
        """Gets the material_library_reference of this SolidMaterial.  # noqa: E501


        :return: The material_library_reference of this SolidMaterial.  # noqa: E501
        :rtype: MaterialLibraryReference
        """
        return self._material_library_reference

    @material_library_reference.setter
    def material_library_reference(self, material_library_reference):
        """Sets the material_library_reference of this SolidMaterial.


        :param material_library_reference: The material_library_reference of this SolidMaterial.  # noqa: E501
        :type: MaterialLibraryReference
        """

        self._material_library_reference = material_library_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolidMaterial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SolidMaterial):
            return True

        return self.to_dict() != other.to_dict()
