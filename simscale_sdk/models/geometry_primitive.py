# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class GeometryPrimitive(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'min': 'DimensionalVectorLength',
        'max': 'DimensionalVectorLength',
        'rotation_point': 'DimensionalVectorLength',
        'rotation_angles': 'DimensionalVectorAngle',
        'orientation_reference': 'str',
        'center': 'DimensionalVectorLength',
        'radius': 'DimensionalLength',
        'reference': 'DimensionalVectorLength',
        'axis': 'DimensionalVectorLength',
        'scale': 'DecimalVector',
        'translation': 'DimensionalVectorLength',
        'rotation_axis': 'DimensionalVectorLength',
        'rotation_angle': 'DimensionalAngle',
        'reference_point': 'DimensionalVectorLength',
        'normal': 'DimensionalVectorLength'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'min': 'min',
        'max': 'max',
        'rotation_point': 'rotationPoint',
        'rotation_angles': 'rotationAngles',
        'orientation_reference': 'orientationReference',
        'center': 'center',
        'radius': 'radius',
        'reference': 'reference',
        'axis': 'axis',
        'scale': 'scale',
        'translation': 'translation',
        'rotation_axis': 'rotationAxis',
        'rotation_angle': 'rotationAngle',
        'reference_point': 'referencePoint',
        'normal': 'normal'
    }

    discriminator_value_class_map = {
        'CARTESIAN_BOX': 'CartesianBox',
        'ROTATABLE_CARTESIAN_BOX': 'RotatableCartesianBox',
        'LOCAL_CARTESIAN_BOX': 'LocalCartesianBox',
        'SPHERE': 'Sphere',
        'LOCAL_SPHERE': 'LocalSphere',
        'CYLINDER': 'Cylinder',
        'POINT': 'Point',
        'BOX': 'Box',
        'HALF_SPACE': 'HalfSpace',
        'LOCAL_HALF_SPACE': 'LocalHalfSpace'
    }

    def __init__(self, type='LOCAL_HALF_SPACE', id=None, name=None, min=None, max=None, rotation_point=None, rotation_angles=None, orientation_reference=None, center=None, radius=None, reference=None, axis=None, scale=None, translation=None, rotation_axis=None, rotation_angle=None, reference_point=None, normal=None, local_vars_configuration=None):  # noqa: E501
        """GeometryPrimitive - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._id = None
        self._name = None
        self._min = None
        self._max = None
        self._rotation_point = None
        self._rotation_angles = None
        self._orientation_reference = None
        self._center = None
        self._radius = None
        self._reference = None
        self._axis = None
        self._scale = None
        self._translation = None
        self._rotation_axis = None
        self._rotation_angle = None
        self._reference_point = None
        self._normal = None
        self.discriminator = 'type'

        self.type = type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if rotation_point is not None:
            self.rotation_point = rotation_point
        if rotation_angles is not None:
            self.rotation_angles = rotation_angles
        if orientation_reference is not None:
            self.orientation_reference = orientation_reference
        if center is not None:
            self.center = center
        if radius is not None:
            self.radius = radius
        if reference is not None:
            self.reference = reference
        if axis is not None:
            self.axis = axis
        if scale is not None:
            self.scale = scale
        if translation is not None:
            self.translation = translation
        if rotation_axis is not None:
            self.rotation_axis = rotation_axis
        if rotation_angle is not None:
            self.rotation_angle = rotation_angle
        if reference_point is not None:
            self.reference_point = reference_point
        if normal is not None:
            self.normal = normal

    @property
    def type(self):
        """Gets the type of this GeometryPrimitive.  # noqa: E501

        Schema name: LocalHalfSpace  # noqa: E501

        :return: The type of this GeometryPrimitive.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeometryPrimitive.

        Schema name: LocalHalfSpace  # noqa: E501

        :param type: The type of this GeometryPrimitive.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this GeometryPrimitive.  # noqa: E501


        :return: The id of this GeometryPrimitive.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeometryPrimitive.


        :param id: The id of this GeometryPrimitive.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GeometryPrimitive.  # noqa: E501


        :return: The name of this GeometryPrimitive.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeometryPrimitive.


        :param name: The name of this GeometryPrimitive.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$/`")  # noqa: E501

        self._name = name

    @property
    def min(self):
        """Gets the min of this GeometryPrimitive.  # noqa: E501


        :return: The min of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this GeometryPrimitive.


        :param min: The min of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this GeometryPrimitive.  # noqa: E501


        :return: The max of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this GeometryPrimitive.


        :param max: The max of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._max = max

    @property
    def rotation_point(self):
        """Gets the rotation_point of this GeometryPrimitive.  # noqa: E501


        :return: The rotation_point of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._rotation_point

    @rotation_point.setter
    def rotation_point(self, rotation_point):
        """Sets the rotation_point of this GeometryPrimitive.


        :param rotation_point: The rotation_point of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._rotation_point = rotation_point

    @property
    def rotation_angles(self):
        """Gets the rotation_angles of this GeometryPrimitive.  # noqa: E501


        :return: The rotation_angles of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorAngle
        """
        return self._rotation_angles

    @rotation_angles.setter
    def rotation_angles(self, rotation_angles):
        """Sets the rotation_angles of this GeometryPrimitive.


        :param rotation_angles: The rotation_angles of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorAngle
        """

        self._rotation_angles = rotation_angles

    @property
    def orientation_reference(self):
        """Gets the orientation_reference of this GeometryPrimitive.  # noqa: E501


        :return: The orientation_reference of this GeometryPrimitive.  # noqa: E501
        :rtype: str
        """
        return self._orientation_reference

    @orientation_reference.setter
    def orientation_reference(self, orientation_reference):
        """Sets the orientation_reference of this GeometryPrimitive.


        :param orientation_reference: The orientation_reference of this GeometryPrimitive.  # noqa: E501
        :type: str
        """
        allowed_values = ["GEOMETRY", "FLOW_DOMAIN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and orientation_reference not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `orientation_reference` ({0}), must be one of {1}"  # noqa: E501
                .format(orientation_reference, allowed_values)
            )

        self._orientation_reference = orientation_reference

    @property
    def center(self):
        """Gets the center of this GeometryPrimitive.  # noqa: E501


        :return: The center of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this GeometryPrimitive.


        :param center: The center of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._center = center

    @property
    def radius(self):
        """Gets the radius of this GeometryPrimitive.  # noqa: E501


        :return: The radius of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GeometryPrimitive.


        :param radius: The radius of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalLength
        """

        self._radius = radius

    @property
    def reference(self):
        """Gets the reference of this GeometryPrimitive.  # noqa: E501


        :return: The reference of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this GeometryPrimitive.


        :param reference: The reference of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._reference = reference

    @property
    def axis(self):
        """Gets the axis of this GeometryPrimitive.  # noqa: E501


        :return: The axis of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._axis

    @axis.setter
    def axis(self, axis):
        """Sets the axis of this GeometryPrimitive.


        :param axis: The axis of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._axis = axis

    @property
    def scale(self):
        """Gets the scale of this GeometryPrimitive.  # noqa: E501


        :return: The scale of this GeometryPrimitive.  # noqa: E501
        :rtype: DecimalVector
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this GeometryPrimitive.


        :param scale: The scale of this GeometryPrimitive.  # noqa: E501
        :type: DecimalVector
        """

        self._scale = scale

    @property
    def translation(self):
        """Gets the translation of this GeometryPrimitive.  # noqa: E501


        :return: The translation of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this GeometryPrimitive.


        :param translation: The translation of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._translation = translation

    @property
    def rotation_axis(self):
        """Gets the rotation_axis of this GeometryPrimitive.  # noqa: E501


        :return: The rotation_axis of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._rotation_axis

    @rotation_axis.setter
    def rotation_axis(self, rotation_axis):
        """Sets the rotation_axis of this GeometryPrimitive.


        :param rotation_axis: The rotation_axis of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._rotation_axis = rotation_axis

    @property
    def rotation_angle(self):
        """Gets the rotation_angle of this GeometryPrimitive.  # noqa: E501


        :return: The rotation_angle of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalAngle
        """
        return self._rotation_angle

    @rotation_angle.setter
    def rotation_angle(self, rotation_angle):
        """Sets the rotation_angle of this GeometryPrimitive.


        :param rotation_angle: The rotation_angle of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalAngle
        """

        self._rotation_angle = rotation_angle

    @property
    def reference_point(self):
        """Gets the reference_point of this GeometryPrimitive.  # noqa: E501


        :return: The reference_point of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._reference_point

    @reference_point.setter
    def reference_point(self, reference_point):
        """Sets the reference_point of this GeometryPrimitive.


        :param reference_point: The reference_point of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._reference_point = reference_point

    @property
    def normal(self):
        """Gets the normal of this GeometryPrimitive.  # noqa: E501


        :return: The normal of this GeometryPrimitive.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this GeometryPrimitive.


        :param normal: The normal of this GeometryPrimitive.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._normal = normal

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeometryPrimitive):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeometryPrimitive):
            return True

        return self.to_dict() != other.to_dict()
