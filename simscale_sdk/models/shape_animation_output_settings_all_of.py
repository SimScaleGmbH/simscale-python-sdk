# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ShapeAnimationOutputSettingsAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'frame_index': 'int',
        'steps': 'int',
        'range': 'str',
        'background_color': 'Color'
    }

    attribute_map = {
        'type': 'type',
        'frame_index': 'frameIndex',
        'steps': 'steps',
        'range': 'range',
        'background_color': 'backgroundColor'
    }

    def __init__(self, type=None, frame_index=None, steps=30, range='FULL', background_color=None, local_vars_configuration=None):  # noqa: E501
        """ShapeAnimationOutputSettingsAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._frame_index = None
        self._steps = None
        self._range = None
        self._background_color = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if frame_index is not None:
            self.frame_index = frame_index
        self.steps = steps
        self.range = range
        if background_color is not None:
            self.background_color = background_color

    @property
    def type(self):
        """Gets the type of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501


        :return: The type of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShapeAnimationOutputSettingsAllOf.


        :param type: The type of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def frame_index(self):
        """Gets the frame_index of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501

        Frame (or frequency) for which to create a mode shape animation.Default is the last frame in the result.  # noqa: E501

        :return: The frame_index of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._frame_index

    @frame_index.setter
    def frame_index(self, frame_index):
        """Sets the frame_index of this ShapeAnimationOutputSettingsAllOf.

        Frame (or frequency) for which to create a mode shape animation.Default is the last frame in the result.  # noqa: E501

        :param frame_index: The frame_index of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                frame_index is not None and frame_index < 0):  # noqa: E501
            raise ValueError("Invalid value for `frame_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._frame_index = frame_index

    @property
    def steps(self):
        """Gets the steps of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501

        The number of steps to generate for the shape animation  # noqa: E501

        :return: The steps of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: int
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ShapeAnimationOutputSettingsAllOf.

        The number of steps to generate for the shape animation  # noqa: E501

        :param steps: The steps of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and steps is None:  # noqa: E501
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                steps is not None and steps > 100):  # noqa: E501
            raise ValueError("Invalid value for `steps`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                steps is not None and steps < 1):  # noqa: E501
            raise ValueError("Invalid value for `steps`, must be a value greater than or equal to `1`")  # noqa: E501

        self._steps = steps

    @property
    def range(self):
        """Gets the range of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501

        How to deform the model for the animation. FULL implies animating from the original, undeformed shape to the maximum displaced position, then back to original shape; do the same for the negative maximum deformation, then back (x_0 -> +x_max -> x_0 -> -x_max -> x_0). HALF implies animating from the original, undeformed shape to the maximum displaced position, then back to original shape (x_0 -> +x_max -> x_0). QUARTER implies animating from the original, undeformed shape to the maxiumum displaced position (x_0 -> +x_max)  # noqa: E501

        :return: The range of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ShapeAnimationOutputSettingsAllOf.

        How to deform the model for the animation. FULL implies animating from the original, undeformed shape to the maximum displaced position, then back to original shape; do the same for the negative maximum deformation, then back (x_0 -> +x_max -> x_0 -> -x_max -> x_0). HALF implies animating from the original, undeformed shape to the maximum displaced position, then back to original shape (x_0 -> +x_max -> x_0). QUARTER implies animating from the original, undeformed shape to the maxiumum displaced position (x_0 -> +x_max)  # noqa: E501

        :param range: The range of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and range is None:  # noqa: E501
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501
        allowed_values = ["FULL", "HALF", "QUARTER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and range not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `range` ({0}), must be one of {1}"  # noqa: E501
                .format(range, allowed_values)
            )

        self._range = range

    @property
    def background_color(self):
        """Gets the background_color of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501


        :return: The background_color of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :rtype: Color
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this ShapeAnimationOutputSettingsAllOf.


        :param background_color: The background_color of this ShapeAnimationOutputSettingsAllOf.  # noqa: E501
        :type: Color
        """

        self._background_color = background_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShapeAnimationOutputSettingsAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShapeAnimationOutputSettingsAllOf):
            return True

        return self.to_dict() != other.to_dict()
