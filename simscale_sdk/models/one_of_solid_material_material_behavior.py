# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfSolidMaterialMaterialBehavior(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'directional_dependency': 'OneOfLinearElasticMaterialBehaviorDirectionalDependency',
        'damping': 'OneOfLinearElasticMaterialBehaviorDamping',
        'creep_formulation': 'OneOfPlasticMaterialBehaviorCreepFormulation',
        'hyper_elastic_model': 'OneOfHyperElasticMaterialBehaviorHyperElasticModel',
        'elasto_plastic_model': 'OneOfPlasticMaterialBehaviorElastoPlasticModel'
    }

    attribute_map = {
        'type': 'type',
        'directional_dependency': 'directionalDependency',
        'damping': 'damping',
        'creep_formulation': 'creepFormulation',
        'hyper_elastic_model': 'hyperElasticModel',
        'elasto_plastic_model': 'elastoPlasticModel'
    }

    discriminator_value_class_map = {
        'LINEAR_ELASTIC': 'LinearElasticMaterialBehavior',
        'HYPER_ELASTIC': 'HyperElasticMaterialBehavior',
        'PLASTIC': 'PlasticMaterialBehavior'
    }

    def __init__(self, type='PLASTIC', directional_dependency=None, damping=None, creep_formulation=None, hyper_elastic_model=None, elasto_plastic_model=None, local_vars_configuration=None):  # noqa: E501
        """OneOfSolidMaterialMaterialBehavior - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._directional_dependency = None
        self._damping = None
        self._creep_formulation = None
        self._hyper_elastic_model = None
        self._elasto_plastic_model = None
        self.discriminator = 'type'

        self.type = type
        if directional_dependency is not None:
            self.directional_dependency = directional_dependency
        if damping is not None:
            self.damping = damping
        if creep_formulation is not None:
            self.creep_formulation = creep_formulation
        if hyper_elastic_model is not None:
            self.hyper_elastic_model = hyper_elastic_model
        if elasto_plastic_model is not None:
            self.elasto_plastic_model = elasto_plastic_model

    @property
    def type(self):
        """Gets the type of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501

        <p>Choose the material behavior for your problem. </p> <br /><br />Important remarks:<br /> <ul><li>Choose <b>Linear elastic</b> if the stress-strain relationship of your material is linear.</li><li>Choose <b>Elasto-plastic</b> if the stress-strain relationship of your material is non-linear after some point e.g. yielding point.</li><li>Choose <b>Hyperelastic</b> if your material responds elastically even at higher deformations.</li></ul>   Schema name: PlasticMaterialBehavior  # noqa: E501

        :return: The type of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfSolidMaterialMaterialBehavior.

        <p>Choose the material behavior for your problem. </p> <br /><br />Important remarks:<br /> <ul><li>Choose <b>Linear elastic</b> if the stress-strain relationship of your material is linear.</li><li>Choose <b>Elasto-plastic</b> if the stress-strain relationship of your material is non-linear after some point e.g. yielding point.</li><li>Choose <b>Hyperelastic</b> if your material responds elastically even at higher deformations.</li></ul>   Schema name: PlasticMaterialBehavior  # noqa: E501

        :param type: The type of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def directional_dependency(self):
        """Gets the directional_dependency of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501


        :return: The directional_dependency of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :rtype: OneOfLinearElasticMaterialBehaviorDirectionalDependency
        """
        return self._directional_dependency

    @directional_dependency.setter
    def directional_dependency(self, directional_dependency):
        """Sets the directional_dependency of this OneOfSolidMaterialMaterialBehavior.


        :param directional_dependency: The directional_dependency of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :type: OneOfLinearElasticMaterialBehaviorDirectionalDependency
        """

        self._directional_dependency = directional_dependency

    @property
    def damping(self):
        """Gets the damping of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501


        :return: The damping of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :rtype: OneOfLinearElasticMaterialBehaviorDamping
        """
        return self._damping

    @damping.setter
    def damping(self, damping):
        """Sets the damping of this OneOfSolidMaterialMaterialBehavior.


        :param damping: The damping of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :type: OneOfLinearElasticMaterialBehaviorDamping
        """

        self._damping = damping

    @property
    def creep_formulation(self):
        """Gets the creep_formulation of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501


        :return: The creep_formulation of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :rtype: OneOfPlasticMaterialBehaviorCreepFormulation
        """
        return self._creep_formulation

    @creep_formulation.setter
    def creep_formulation(self, creep_formulation):
        """Sets the creep_formulation of this OneOfSolidMaterialMaterialBehavior.


        :param creep_formulation: The creep_formulation of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :type: OneOfPlasticMaterialBehaviorCreepFormulation
        """

        self._creep_formulation = creep_formulation

    @property
    def hyper_elastic_model(self):
        """Gets the hyper_elastic_model of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501


        :return: The hyper_elastic_model of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :rtype: OneOfHyperElasticMaterialBehaviorHyperElasticModel
        """
        return self._hyper_elastic_model

    @hyper_elastic_model.setter
    def hyper_elastic_model(self, hyper_elastic_model):
        """Sets the hyper_elastic_model of this OneOfSolidMaterialMaterialBehavior.


        :param hyper_elastic_model: The hyper_elastic_model of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :type: OneOfHyperElasticMaterialBehaviorHyperElasticModel
        """

        self._hyper_elastic_model = hyper_elastic_model

    @property
    def elasto_plastic_model(self):
        """Gets the elasto_plastic_model of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501


        :return: The elasto_plastic_model of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :rtype: OneOfPlasticMaterialBehaviorElastoPlasticModel
        """
        return self._elasto_plastic_model

    @elasto_plastic_model.setter
    def elasto_plastic_model(self, elasto_plastic_model):
        """Sets the elasto_plastic_model of this OneOfSolidMaterialMaterialBehavior.


        :param elasto_plastic_model: The elasto_plastic_model of this OneOfSolidMaterialMaterialBehavior.  # noqa: E501
        :type: OneOfPlasticMaterialBehaviorElastoPlasticModel
        """

        self._elasto_plastic_model = elasto_plastic_model

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfSolidMaterialMaterialBehavior):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfSolidMaterialMaterialBehavior):
            return True

        return self.to_dict() != other.to_dict()
