# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class Space(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'space_id': 'str',
        'organization_id': 'str',
        'owner_username': 'str',
        'space_type': 'str',
        'name': 'str',
        'created_at': 'datetime',
        'last_modified_at': 'datetime',
        'space_settings': 'SpaceSettings'
    }

    attribute_map = {
        'space_id': 'spaceId',
        'organization_id': 'organizationId',
        'owner_username': 'ownerUsername',
        'space_type': 'spaceType',
        'name': 'name',
        'created_at': 'createdAt',
        'last_modified_at': 'lastModifiedAt',
        'space_settings': 'spaceSettings'
    }

    def __init__(self, space_id=None, organization_id=None, owner_username=None, space_type=None, name=None, created_at=None, last_modified_at=None, space_settings=None, local_vars_configuration=None):  # noqa: E501
        """Space - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._space_id = None
        self._organization_id = None
        self._owner_username = None
        self._space_type = None
        self._name = None
        self._created_at = None
        self._last_modified_at = None
        self._space_settings = None
        self.discriminator = None

        if space_id is not None:
            self.space_id = space_id
        if organization_id is not None:
            self.organization_id = organization_id
        if owner_username is not None:
            self.owner_username = owner_username
        if space_type is not None:
            self.space_type = space_type
        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if last_modified_at is not None:
            self.last_modified_at = last_modified_at
        if space_settings is not None:
            self.space_settings = space_settings

    @property
    def space_id(self):
        """Gets the space_id of this Space.  # noqa: E501


        :return: The space_id of this Space.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this Space.


        :param space_id: The space_id of this Space.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Space.  # noqa: E501

        Only present for Team Spaces  # noqa: E501

        :return: The organization_id of this Space.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Space.

        Only present for Team Spaces  # noqa: E501

        :param organization_id: The organization_id of this Space.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def owner_username(self):
        """Gets the owner_username of this Space.  # noqa: E501

        Only present for Personal Spaces  # noqa: E501

        :return: The owner_username of this Space.  # noqa: E501
        :rtype: str
        """
        return self._owner_username

    @owner_username.setter
    def owner_username(self, owner_username):
        """Sets the owner_username of this Space.

        Only present for Personal Spaces  # noqa: E501

        :param owner_username: The owner_username of this Space.  # noqa: E501
        :type: str
        """

        self._owner_username = owner_username

    @property
    def space_type(self):
        """Gets the space_type of this Space.  # noqa: E501


        :return: The space_type of this Space.  # noqa: E501
        :rtype: str
        """
        return self._space_type

    @space_type.setter
    def space_type(self, space_type):
        """Sets the space_type of this Space.


        :param space_type: The space_type of this Space.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERSONAL", "TEAM"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and space_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `space_type` ({0}), must be one of {1}"  # noqa: E501
                .format(space_type, allowed_values)
            )

        self._space_type = space_type

    @property
    def name(self):
        """Gets the name of this Space.  # noqa: E501


        :return: The name of this Space.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Space.


        :param name: The name of this Space.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this Space.  # noqa: E501


        :return: The created_at of this Space.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Space.


        :param created_at: The created_at of this Space.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this Space.  # noqa: E501


        :return: The last_modified_at of this Space.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this Space.


        :param last_modified_at: The last_modified_at of this Space.  # noqa: E501
        :type: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def space_settings(self):
        """Gets the space_settings of this Space.  # noqa: E501


        :return: The space_settings of this Space.  # noqa: E501
        :rtype: SpaceSettings
        """
        return self._space_settings

    @space_settings.setter
    def space_settings(self, space_settings):
        """Sets the space_settings of this Space.


        :param space_settings: The space_settings of this Space.  # noqa: E501
        :type: SpaceSettings
        """

        self._space_settings = space_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Space):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Space):
            return True

        return self.to_dict() != other.to_dict()
