# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class CreateAiPredictionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prediction_id': 'str',
        'available_fields': 'CreateAiPredictionResponseAvailableFields',
        'confidence_score': 'float',
        'global_outputs': 'list[CreateAiPredictionResponseGlobalOutputs]'
    }

    attribute_map = {
        'prediction_id': 'predictionId',
        'available_fields': 'availableFields',
        'confidence_score': 'confidenceScore',
        'global_outputs': 'globalOutputs'
    }

    def __init__(self, prediction_id=None, available_fields=None, confidence_score=None, global_outputs=None, local_vars_configuration=None):  # noqa: E501
        """CreateAiPredictionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._prediction_id = None
        self._available_fields = None
        self._confidence_score = None
        self._global_outputs = None
        self.discriminator = None

        if prediction_id is not None:
            self.prediction_id = prediction_id
        if available_fields is not None:
            self.available_fields = available_fields
        if confidence_score is not None:
            self.confidence_score = confidence_score
        if global_outputs is not None:
            self.global_outputs = global_outputs

    @property
    def prediction_id(self):
        """Gets the prediction_id of this CreateAiPredictionResponse.  # noqa: E501


        :return: The prediction_id of this CreateAiPredictionResponse.  # noqa: E501
        :rtype: str
        """
        return self._prediction_id

    @prediction_id.setter
    def prediction_id(self, prediction_id):
        """Sets the prediction_id of this CreateAiPredictionResponse.


        :param prediction_id: The prediction_id of this CreateAiPredictionResponse.  # noqa: E501
        :type: str
        """

        self._prediction_id = prediction_id

    @property
    def available_fields(self):
        """Gets the available_fields of this CreateAiPredictionResponse.  # noqa: E501


        :return: The available_fields of this CreateAiPredictionResponse.  # noqa: E501
        :rtype: CreateAiPredictionResponseAvailableFields
        """
        return self._available_fields

    @available_fields.setter
    def available_fields(self, available_fields):
        """Sets the available_fields of this CreateAiPredictionResponse.


        :param available_fields: The available_fields of this CreateAiPredictionResponse.  # noqa: E501
        :type: CreateAiPredictionResponseAvailableFields
        """

        self._available_fields = available_fields

    @property
    def confidence_score(self):
        """Gets the confidence_score of this CreateAiPredictionResponse.  # noqa: E501


        :return: The confidence_score of this CreateAiPredictionResponse.  # noqa: E501
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """Sets the confidence_score of this CreateAiPredictionResponse.


        :param confidence_score: The confidence_score of this CreateAiPredictionResponse.  # noqa: E501
        :type: float
        """

        self._confidence_score = confidence_score

    @property
    def global_outputs(self):
        """Gets the global_outputs of this CreateAiPredictionResponse.  # noqa: E501


        :return: The global_outputs of this CreateAiPredictionResponse.  # noqa: E501
        :rtype: list[CreateAiPredictionResponseGlobalOutputs]
        """
        return self._global_outputs

    @global_outputs.setter
    def global_outputs(self, global_outputs):
        """Sets the global_outputs of this CreateAiPredictionResponse.


        :param global_outputs: The global_outputs of this CreateAiPredictionResponse.  # noqa: E501
        :type: list[CreateAiPredictionResponseGlobalOutputs]
        """

        self._global_outputs = global_outputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAiPredictionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAiPredictionResponse):
            return True

        return self.to_dict() != other.to_dict()
