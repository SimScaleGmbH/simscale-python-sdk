# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfFieldChangeRetimingEventTimestepCalculationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'fixed_subdivision': 'FixedSubdivision',
        'adaptive_augmentation': 'AdaptiveAugmentation',
        'value': 'float'
    }

    attribute_map = {
        'type': 'type',
        'fixed_subdivision': 'fixedSubdivision',
        'adaptive_augmentation': 'adaptiveAugmentation',
        'value': 'value'
    }

    discriminator_value_class_map = {
        'MIXED': 'MixedTimestepCalculationType',
        'FIELD_CHANGE_TARGET': 'FieldChangeTargetCalculationType'
    }

    def __init__(self, type='FIELD_CHANGE_TARGET', fixed_subdivision=None, adaptive_augmentation=None, value=None, local_vars_configuration=None):  # noqa: E501
        """OneOfFieldChangeRetimingEventTimestepCalculationType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._fixed_subdivision = None
        self._adaptive_augmentation = None
        self._value = None
        self.discriminator = 'type'

        self.type = type
        if fixed_subdivision is not None:
            self.fixed_subdivision = fixed_subdivision
        if adaptive_augmentation is not None:
            self.adaptive_augmentation = adaptive_augmentation
        if value is not None:
            self.value = value

    @property
    def type(self):
        """Gets the type of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501

        <p>Select how the time increments should be computed in case of an adaptation event. Currently four types are available (which may not all be available for every event):</p><ul><li><p><b>Manual</b>: Here the user defines fixed time step subdivision and augmentation settings.</p></ul><ul><li><p><b>Newton Iterations Target</b>: With this setting the user defines a target value for the Newton Iterations and the time increments are calculated automatically to having this value as objective.</p></ul><ul><li><p><b>Field Change Target</b>: With this setting the user defines a target value for change of a specific field component within a time increment and the time increments are calculated automatically to having this value as objective.</p></ul><ul><li><p><b>Mixed</b>: The mixed type uses a fixed subdivision and an automatic adaptation of the time step with a target value for the change of the selected field component.</p></ul>  Schema name: FieldChangeTargetCalculationType  # noqa: E501

        :return: The type of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfFieldChangeRetimingEventTimestepCalculationType.

        <p>Select how the time increments should be computed in case of an adaptation event. Currently four types are available (which may not all be available for every event):</p><ul><li><p><b>Manual</b>: Here the user defines fixed time step subdivision and augmentation settings.</p></ul><ul><li><p><b>Newton Iterations Target</b>: With this setting the user defines a target value for the Newton Iterations and the time increments are calculated automatically to having this value as objective.</p></ul><ul><li><p><b>Field Change Target</b>: With this setting the user defines a target value for change of a specific field component within a time increment and the time increments are calculated automatically to having this value as objective.</p></ul><ul><li><p><b>Mixed</b>: The mixed type uses a fixed subdivision and an automatic adaptation of the time step with a target value for the change of the selected field component.</p></ul>  Schema name: FieldChangeTargetCalculationType  # noqa: E501

        :param type: The type of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fixed_subdivision(self):
        """Gets the fixed_subdivision of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501


        :return: The fixed_subdivision of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :rtype: FixedSubdivision
        """
        return self._fixed_subdivision

    @fixed_subdivision.setter
    def fixed_subdivision(self, fixed_subdivision):
        """Sets the fixed_subdivision of this OneOfFieldChangeRetimingEventTimestepCalculationType.


        :param fixed_subdivision: The fixed_subdivision of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :type: FixedSubdivision
        """

        self._fixed_subdivision = fixed_subdivision

    @property
    def adaptive_augmentation(self):
        """Gets the adaptive_augmentation of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501


        :return: The adaptive_augmentation of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :rtype: AdaptiveAugmentation
        """
        return self._adaptive_augmentation

    @adaptive_augmentation.setter
    def adaptive_augmentation(self, adaptive_augmentation):
        """Sets the adaptive_augmentation of this OneOfFieldChangeRetimingEventTimestepCalculationType.


        :param adaptive_augmentation: The adaptive_augmentation of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :type: AdaptiveAugmentation
        """

        self._adaptive_augmentation = adaptive_augmentation

    @property
    def value(self):
        """Gets the value of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501


        :return: The value of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OneOfFieldChangeRetimingEventTimestepCalculationType.


        :param value: The value of this OneOfFieldChangeRetimingEventTimestepCalculationType.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                value is not None and value < 0):  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfFieldChangeRetimingEventTimestepCalculationType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfFieldChangeRetimingEventTimestepCalculationType):
            return True

        return self.to_dict() != other.to_dict()
