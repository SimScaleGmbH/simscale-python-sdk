# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class AutomaticMeshGrading(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'fineness': 'str'
    }

    attribute_map = {
        'type': 'type',
        'fineness': 'fineness'
    }

    def __init__(self, type='AUTOMATIC', fineness=None, local_vars_configuration=None):  # noqa: E501
        """AutomaticMeshGrading - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._fineness = None
        self.discriminator = None

        self.type = type
        if fineness is not None:
            self.fineness = fineness

    @property
    def type(self):
        """Gets the type of this AutomaticMeshGrading.  # noqa: E501

        Schema name: AutomaticMeshGrading  # noqa: E501

        :return: The type of this AutomaticMeshGrading.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomaticMeshGrading.

        Schema name: AutomaticMeshGrading  # noqa: E501

        :param type: The type of this AutomaticMeshGrading.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fineness(self):
        """Gets the fineness of this AutomaticMeshGrading.  # noqa: E501

        <p>The <b><a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#grading' target='_blank'>mesh grading</a></b> specifies how fine details of the geometry are resolved and also influences the quality of the resulting elements.</p><ul><li><p>If you select the <b>automatic</b> grading, you can specify how fine your mesh should be (ranging from <i>1 - very coarse</i> to <i>5 - very fine</i>) and all additional parameters will be set automatically.</li><li><p>For full control over the underlying parameters <i>number of segements per edge</i>, <i>number of segements per radius</i> and <i>growth rate</i> you can choose the <b>manual</b> mesh grading option.</p></li></ul><p><img src=\"/spec/resources/help/imgs/mesh_grading_comparison.png\" class=\"helpPopupImage\"/> The figure shows meshes for grading <i>1 - very coarse</i> (left) and <i>5 - very fine</i> (right).</p>  # noqa: E501

        :return: The fineness of this AutomaticMeshGrading.  # noqa: E501
        :rtype: str
        """
        return self._fineness

    @fineness.setter
    def fineness(self, fineness):
        """Sets the fineness of this AutomaticMeshGrading.

        <p>The <b><a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#grading' target='_blank'>mesh grading</a></b> specifies how fine details of the geometry are resolved and also influences the quality of the resulting elements.</p><ul><li><p>If you select the <b>automatic</b> grading, you can specify how fine your mesh should be (ranging from <i>1 - very coarse</i> to <i>5 - very fine</i>) and all additional parameters will be set automatically.</li><li><p>For full control over the underlying parameters <i>number of segements per edge</i>, <i>number of segements per radius</i> and <i>growth rate</i> you can choose the <b>manual</b> mesh grading option.</p></li></ul><p><img src=\"/spec/resources/help/imgs/mesh_grading_comparison.png\" class=\"helpPopupImage\"/> The figure shows meshes for grading <i>1 - very coarse</i> (left) and <i>5 - very fine</i> (right).</p>  # noqa: E501

        :param fineness: The fineness of this AutomaticMeshGrading.  # noqa: E501
        :type: str
        """
        allowed_values = ["VERY_COARSE", "COARSE", "MODERATE", "FINE", "VERY_FINE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and fineness not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `fineness` ({0}), must be one of {1}"  # noqa: E501
                .format(fineness, allowed_values)
            )

        self._fineness = fineness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomaticMeshGrading):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomaticMeshGrading):
            return True

        return self.to_dict() != other.to_dict()
