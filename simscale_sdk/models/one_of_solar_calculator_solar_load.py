# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfSolarCalculatorSolarLoad(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'direct_solar_load': 'DimensionalHeatFlux',
        'diffuse_solar_load': 'DimensionalHeatFlux',
        'sky_cloud_cover_fraction': 'float',
        'ground_reflectivity': 'float',
        'apparent_solar_irradiation': 'DimensionalHeatFlux',
        'atmospheric_extinction_coefficient': 'float',
        'diffuse_radiation_factor': 'float'
    }

    attribute_map = {
        'type': 'type',
        'direct_solar_load': 'directSolarLoad',
        'diffuse_solar_load': 'diffuseSolarLoad',
        'sky_cloud_cover_fraction': 'skyCloudCoverFraction',
        'ground_reflectivity': 'groundReflectivity',
        'apparent_solar_irradiation': 'apparentSolarIrradiation',
        'atmospheric_extinction_coefficient': 'atmosphericExtinctionCoefficient',
        'diffuse_radiation_factor': 'diffuseRadiationFactor'
    }

    discriminator_value_class_map = {
        'CUSTOM_SOLAR_LOAD': 'CustomSolarLoad',
        'FAIR_WEATHER_CONDITIONS': 'FairWeatherConditions'
    }

    def __init__(self, type='FAIR_WEATHER_CONDITIONS', direct_solar_load=None, diffuse_solar_load=None, sky_cloud_cover_fraction=None, ground_reflectivity=None, apparent_solar_irradiation=None, atmospheric_extinction_coefficient=None, diffuse_radiation_factor=None, local_vars_configuration=None):  # noqa: E501
        """OneOfSolarCalculatorSolarLoad - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._direct_solar_load = None
        self._diffuse_solar_load = None
        self._sky_cloud_cover_fraction = None
        self._ground_reflectivity = None
        self._apparent_solar_irradiation = None
        self._atmospheric_extinction_coefficient = None
        self._diffuse_radiation_factor = None
        self.discriminator = 'type'

        self.type = type
        if direct_solar_load is not None:
            self.direct_solar_load = direct_solar_load
        if diffuse_solar_load is not None:
            self.diffuse_solar_load = diffuse_solar_load
        if sky_cloud_cover_fraction is not None:
            self.sky_cloud_cover_fraction = sky_cloud_cover_fraction
        if ground_reflectivity is not None:
            self.ground_reflectivity = ground_reflectivity
        if apparent_solar_irradiation is not None:
            self.apparent_solar_irradiation = apparent_solar_irradiation
        if atmospheric_extinction_coefficient is not None:
            self.atmospheric_extinction_coefficient = atmospheric_extinction_coefficient
        if diffuse_radiation_factor is not None:
            self.diffuse_radiation_factor = diffuse_radiation_factor

    @property
    def type(self):
        """Gets the type of this OneOfSolarCalculatorSolarLoad.  # noqa: E501

        Schema name: FairWeatherConditions  # noqa: E501

        :return: The type of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfSolarCalculatorSolarLoad.

        Schema name: FairWeatherConditions  # noqa: E501

        :param type: The type of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def direct_solar_load(self):
        """Gets the direct_solar_load of this OneOfSolarCalculatorSolarLoad.  # noqa: E501


        :return: The direct_solar_load of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: DimensionalHeatFlux
        """
        return self._direct_solar_load

    @direct_solar_load.setter
    def direct_solar_load(self, direct_solar_load):
        """Sets the direct_solar_load of this OneOfSolarCalculatorSolarLoad.


        :param direct_solar_load: The direct_solar_load of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: DimensionalHeatFlux
        """

        self._direct_solar_load = direct_solar_load

    @property
    def diffuse_solar_load(self):
        """Gets the diffuse_solar_load of this OneOfSolarCalculatorSolarLoad.  # noqa: E501


        :return: The diffuse_solar_load of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: DimensionalHeatFlux
        """
        return self._diffuse_solar_load

    @diffuse_solar_load.setter
    def diffuse_solar_load(self, diffuse_solar_load):
        """Sets the diffuse_solar_load of this OneOfSolarCalculatorSolarLoad.


        :param diffuse_solar_load: The diffuse_solar_load of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: DimensionalHeatFlux
        """

        self._diffuse_solar_load = diffuse_solar_load

    @property
    def sky_cloud_cover_fraction(self):
        """Gets the sky_cloud_cover_fraction of this OneOfSolarCalculatorSolarLoad.  # noqa: E501


        :return: The sky_cloud_cover_fraction of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: float
        """
        return self._sky_cloud_cover_fraction

    @sky_cloud_cover_fraction.setter
    def sky_cloud_cover_fraction(self, sky_cloud_cover_fraction):
        """Sets the sky_cloud_cover_fraction of this OneOfSolarCalculatorSolarLoad.


        :param sky_cloud_cover_fraction: The sky_cloud_cover_fraction of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                sky_cloud_cover_fraction is not None and sky_cloud_cover_fraction > 1):  # noqa: E501
            raise ValueError("Invalid value for `sky_cloud_cover_fraction`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sky_cloud_cover_fraction is not None and sky_cloud_cover_fraction < 0):  # noqa: E501
            raise ValueError("Invalid value for `sky_cloud_cover_fraction`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sky_cloud_cover_fraction = sky_cloud_cover_fraction

    @property
    def ground_reflectivity(self):
        """Gets the ground_reflectivity of this OneOfSolarCalculatorSolarLoad.  # noqa: E501


        :return: The ground_reflectivity of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: float
        """
        return self._ground_reflectivity

    @ground_reflectivity.setter
    def ground_reflectivity(self, ground_reflectivity):
        """Sets the ground_reflectivity of this OneOfSolarCalculatorSolarLoad.


        :param ground_reflectivity: The ground_reflectivity of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                ground_reflectivity is not None and ground_reflectivity > 1):  # noqa: E501
            raise ValueError("Invalid value for `ground_reflectivity`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                ground_reflectivity is not None and ground_reflectivity < 0):  # noqa: E501
            raise ValueError("Invalid value for `ground_reflectivity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ground_reflectivity = ground_reflectivity

    @property
    def apparent_solar_irradiation(self):
        """Gets the apparent_solar_irradiation of this OneOfSolarCalculatorSolarLoad.  # noqa: E501


        :return: The apparent_solar_irradiation of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: DimensionalHeatFlux
        """
        return self._apparent_solar_irradiation

    @apparent_solar_irradiation.setter
    def apparent_solar_irradiation(self, apparent_solar_irradiation):
        """Sets the apparent_solar_irradiation of this OneOfSolarCalculatorSolarLoad.


        :param apparent_solar_irradiation: The apparent_solar_irradiation of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: DimensionalHeatFlux
        """

        self._apparent_solar_irradiation = apparent_solar_irradiation

    @property
    def atmospheric_extinction_coefficient(self):
        """Gets the atmospheric_extinction_coefficient of this OneOfSolarCalculatorSolarLoad.  # noqa: E501

        Atmospheric extinction coefficient (B)  # noqa: E501

        :return: The atmospheric_extinction_coefficient of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: float
        """
        return self._atmospheric_extinction_coefficient

    @atmospheric_extinction_coefficient.setter
    def atmospheric_extinction_coefficient(self, atmospheric_extinction_coefficient):
        """Sets the atmospheric_extinction_coefficient of this OneOfSolarCalculatorSolarLoad.

        Atmospheric extinction coefficient (B)  # noqa: E501

        :param atmospheric_extinction_coefficient: The atmospheric_extinction_coefficient of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                atmospheric_extinction_coefficient is not None and atmospheric_extinction_coefficient < 0):  # noqa: E501
            raise ValueError("Invalid value for `atmospheric_extinction_coefficient`, must be a value greater than or equal to `0`")  # noqa: E501

        self._atmospheric_extinction_coefficient = atmospheric_extinction_coefficient

    @property
    def diffuse_radiation_factor(self):
        """Gets the diffuse_radiation_factor of this OneOfSolarCalculatorSolarLoad.  # noqa: E501

        Diffuse radiation factor (C)  # noqa: E501

        :return: The diffuse_radiation_factor of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :rtype: float
        """
        return self._diffuse_radiation_factor

    @diffuse_radiation_factor.setter
    def diffuse_radiation_factor(self, diffuse_radiation_factor):
        """Sets the diffuse_radiation_factor of this OneOfSolarCalculatorSolarLoad.

        Diffuse radiation factor (C)  # noqa: E501

        :param diffuse_radiation_factor: The diffuse_radiation_factor of this OneOfSolarCalculatorSolarLoad.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                diffuse_radiation_factor is not None and diffuse_radiation_factor > 1):  # noqa: E501
            raise ValueError("Invalid value for `diffuse_radiation_factor`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                diffuse_radiation_factor is not None and diffuse_radiation_factor < 0):  # noqa: E501
            raise ValueError("Invalid value for `diffuse_radiation_factor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._diffuse_radiation_factor = diffuse_radiation_factor

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfSolarCalculatorSolarLoad):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfSolarCalculatorSolarLoad):
            return True

        return self.to_dict() != other.to_dict()
