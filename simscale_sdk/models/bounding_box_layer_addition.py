# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class BoundingBoxLayerAddition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'face': 'str',
        'layers': 'int',
        'expansion_ratio': 'float',
        'min_thickness': 'DimensionalLength',
        'final_thickness': 'DimensionalLength'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'face': 'face',
        'layers': 'layers',
        'expansion_ratio': 'expansionRatio',
        'min_thickness': 'minThickness',
        'final_thickness': 'finalThickness'
    }

    def __init__(self, type='BOUNDING_BOX_LAYER_ADDITION', name=None, face=None, layers=None, expansion_ratio=None, min_thickness=None, final_thickness=None, local_vars_configuration=None):  # noqa: E501
        """BoundingBoxLayerAddition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._face = None
        self._layers = None
        self._expansion_ratio = None
        self._min_thickness = None
        self._final_thickness = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if face is not None:
            self.face = face
        if layers is not None:
            self.layers = layers
        if expansion_ratio is not None:
            self.expansion_ratio = expansion_ratio
        if min_thickness is not None:
            self.min_thickness = min_thickness
        if final_thickness is not None:
            self.final_thickness = final_thickness

    @property
    def type(self):
        """Gets the type of this BoundingBoxLayerAddition.  # noqa: E501

        This option enables layer refinement on the faces of the bounding box. This refinement is useful if the bounding box itself provides walls of the flow domain. It is often used for external aerodynamic cases where the floor is considered as a wall and hence the mesh should be refined with layers in the vicinity.  Schema name: BoundingBoxLayerAddition  # noqa: E501

        :return: The type of this BoundingBoxLayerAddition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BoundingBoxLayerAddition.

        This option enables layer refinement on the faces of the bounding box. This refinement is useful if the bounding box itself provides walls of the flow domain. It is often used for external aerodynamic cases where the floor is considered as a wall and hence the mesh should be refined with layers in the vicinity.  Schema name: BoundingBoxLayerAddition  # noqa: E501

        :param type: The type of this BoundingBoxLayerAddition.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this BoundingBoxLayerAddition.  # noqa: E501


        :return: The name of this BoundingBoxLayerAddition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BoundingBoxLayerAddition.


        :param name: The name of this BoundingBoxLayerAddition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def face(self):
        """Gets the face of this BoundingBoxLayerAddition.  # noqa: E501

        This option selects the face of the bounding box on which layers will be added. A face is selected by its normal (denoted by the respective coordinate system axis) and its position (denoted by min or max).  # noqa: E501

        :return: The face of this BoundingBoxLayerAddition.  # noqa: E501
        :rtype: str
        """
        return self._face

    @face.setter
    def face(self, face):
        """Sets the face of this BoundingBoxLayerAddition.

        This option selects the face of the bounding box on which layers will be added. A face is selected by its normal (denoted by the respective coordinate system axis) and its position (denoted by min or max).  # noqa: E501

        :param face: The face of this BoundingBoxLayerAddition.  # noqa: E501
        :type: str
        """
        allowed_values = ["XMIN", "XMAX", "YMIN", "YMAX", "ZMIN", "ZMAX"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and face not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `face` ({0}), must be one of {1}"  # noqa: E501
                .format(face, allowed_values)
            )

        self._face = face

    @property
    def layers(self):
        """Gets the layers of this BoundingBoxLayerAddition.  # noqa: E501

        The number of <b>layers</b> defines how many boundary layers should be created.  # noqa: E501

        :return: The layers of this BoundingBoxLayerAddition.  # noqa: E501
        :rtype: int
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this BoundingBoxLayerAddition.

        The number of <b>layers</b> defines how many boundary layers should be created.  # noqa: E501

        :param layers: The layers of this BoundingBoxLayerAddition.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                layers is not None and layers < 0):  # noqa: E501
            raise ValueError("Invalid value for `layers`, must be a value greater than or equal to `0`")  # noqa: E501

        self._layers = layers

    @property
    def expansion_ratio(self):
        """Gets the expansion_ratio of this BoundingBoxLayerAddition.  # noqa: E501

        <p>The <b>Expansion ratio</b> determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each cell layer will be in comparison to the neighbouring layer closer to the wall.</p><p><img src=\"/spec/resources/help/imgs/shm_bl_expansion-ratio.png\" class=\"helpPopupImage\"/> The figure shows a ratio of 1.3.</p>  # noqa: E501

        :return: The expansion_ratio of this BoundingBoxLayerAddition.  # noqa: E501
        :rtype: float
        """
        return self._expansion_ratio

    @expansion_ratio.setter
    def expansion_ratio(self, expansion_ratio):
        """Sets the expansion_ratio of this BoundingBoxLayerAddition.

        <p>The <b>Expansion ratio</b> determines how the boundary layers grow in thickness from the wall to the internal mesh. The larger the ratio, the larger each cell layer will be in comparison to the neighbouring layer closer to the wall.</p><p><img src=\"/spec/resources/help/imgs/shm_bl_expansion-ratio.png\" class=\"helpPopupImage\"/> The figure shows a ratio of 1.3.</p>  # noqa: E501

        :param expansion_ratio: The expansion_ratio of this BoundingBoxLayerAddition.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                expansion_ratio is not None and expansion_ratio < 0):  # noqa: E501
            raise ValueError("Invalid value for `expansion_ratio`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expansion_ratio = expansion_ratio

    @property
    def min_thickness(self):
        """Gets the min_thickness of this BoundingBoxLayerAddition.  # noqa: E501


        :return: The min_thickness of this BoundingBoxLayerAddition.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._min_thickness

    @min_thickness.setter
    def min_thickness(self, min_thickness):
        """Sets the min_thickness of this BoundingBoxLayerAddition.


        :param min_thickness: The min_thickness of this BoundingBoxLayerAddition.  # noqa: E501
        :type: DimensionalLength
        """

        self._min_thickness = min_thickness

    @property
    def final_thickness(self):
        """Gets the final_thickness of this BoundingBoxLayerAddition.  # noqa: E501


        :return: The final_thickness of this BoundingBoxLayerAddition.  # noqa: E501
        :rtype: DimensionalLength
        """
        return self._final_thickness

    @final_thickness.setter
    def final_thickness(self, final_thickness):
        """Sets the final_thickness of this BoundingBoxLayerAddition.


        :param final_thickness: The final_thickness of this BoundingBoxLayerAddition.  # noqa: E501
        :type: DimensionalLength
        """

        self._final_thickness = final_thickness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundingBoxLayerAddition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoundingBoxLayerAddition):
            return True

        return self.to_dict() != other.to_dict()
