# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfMarcLinearSolverSettingsLinearSolver(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'auto_constrain': 'bool',
        'preconditioner': 'str',
        'non_convergence_action': 'str',
        'convergence_tolerance': 'float'
    }

    attribute_map = {
        'type': 'type',
        'auto_constrain': 'autoConstrain',
        'preconditioner': 'preconditioner',
        'non_convergence_action': 'nonConvergenceAction',
        'convergence_tolerance': 'convergenceTolerance'
    }

    discriminator_value_class_map = {
        'MUMPS_DIRECT': 'MumpsDirectSolver',
        'PARDISO_DIRECT': 'PardisoDirectSolver',
        'SPARSE_ITERATIVE': 'SparseIterative'
    }

    def __init__(self, type='SPARSE_ITERATIVE', auto_constrain=None, preconditioner=None, non_convergence_action=None, convergence_tolerance=None, local_vars_configuration=None):  # noqa: E501
        """OneOfMarcLinearSolverSettingsLinearSolver - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._auto_constrain = None
        self._preconditioner = None
        self._non_convergence_action = None
        self._convergence_tolerance = None
        self.discriminator = 'type'

        self.type = type
        if auto_constrain is not None:
            self.auto_constrain = auto_constrain
        if preconditioner is not None:
            self.preconditioner = preconditioner
        if non_convergence_action is not None:
            self.non_convergence_action = non_convergence_action
        if convergence_tolerance is not None:
            self.convergence_tolerance = convergence_tolerance

    @property
    def type(self):
        """Gets the type of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501

        Schema name: SparseIterative  # noqa: E501

        :return: The type of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfMarcLinearSolverSettingsLinearSolver.

        Schema name: SparseIterative  # noqa: E501

        :param type: The type of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def auto_constrain(self):
        """Gets the auto_constrain of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501


        :return: The auto_constrain of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :rtype: bool
        """
        return self._auto_constrain

    @auto_constrain.setter
    def auto_constrain(self, auto_constrain):
        """Sets the auto_constrain of this OneOfMarcLinearSolverSettingsLinearSolver.


        :param auto_constrain: The auto_constrain of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :type: bool
        """

        self._auto_constrain = auto_constrain

    @property
    def preconditioner(self):
        """Gets the preconditioner of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501


        :return: The preconditioner of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :rtype: str
        """
        return self._preconditioner

    @preconditioner.setter
    def preconditioner(self, preconditioner):
        """Sets the preconditioner of this OneOfMarcLinearSolverSettingsLinearSolver.


        :param preconditioner: The preconditioner of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIAGONAL", "SCALED_DIAGONAL", "INCOMPLETE_CHOLESKY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and preconditioner not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `preconditioner` ({0}), must be one of {1}"  # noqa: E501
                .format(preconditioner, allowed_values)
            )

        self._preconditioner = preconditioner

    @property
    def non_convergence_action(self):
        """Gets the non_convergence_action of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501


        :return: The non_convergence_action of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :rtype: str
        """
        return self._non_convergence_action

    @non_convergence_action.setter
    def non_convergence_action(self, non_convergence_action):
        """Sets the non_convergence_action of this OneOfMarcLinearSolverSettingsLinearSolver.


        :param non_convergence_action: The non_convergence_action of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :type: str
        """
        allowed_values = ["STOP", "SWITCH_TO_DIRECT_SOLVER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and non_convergence_action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `non_convergence_action` ({0}), must be one of {1}"  # noqa: E501
                .format(non_convergence_action, allowed_values)
            )

        self._non_convergence_action = non_convergence_action

    @property
    def convergence_tolerance(self):
        """Gets the convergence_tolerance of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501


        :return: The convergence_tolerance of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :rtype: float
        """
        return self._convergence_tolerance

    @convergence_tolerance.setter
    def convergence_tolerance(self, convergence_tolerance):
        """Sets the convergence_tolerance of this OneOfMarcLinearSolverSettingsLinearSolver.


        :param convergence_tolerance: The convergence_tolerance of this OneOfMarcLinearSolverSettingsLinearSolver.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                convergence_tolerance is not None and convergence_tolerance <= 0):  # noqa: E501
            raise ValueError("Invalid value for `convergence_tolerance`, must be a value greater than `0`")  # noqa: E501

        self._convergence_tolerance = convergence_tolerance

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfMarcLinearSolverSettingsLinearSolver):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfMarcLinearSolverSettingsLinearSolver):
            return True

        return self.to_dict() != other.to_dict()
