# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfHeatTransferBoundaryConditions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'temperature_value': 'DimensionalFunctionTemperature',
        'topological_reference': 'TopologicalReference',
        'enable_heat_transfer': 'str',
        'axis_origin': 'DimensionalVectorLength',
        'axis_direction': 'DimensionalVectorLength',
        'sector_angle': 'DimensionalAngle',
        'master_topological_reference': 'TopologicalReference',
        'slave_topological_reference': 'TopologicalReference',
        'heatflux_value': 'DimensionalFunctionVolumetricPower',
        'reference_temperature': 'DimensionalFunctionTemperature',
        'heat_transfer_coefficient': 'DimensionalFunctionThermalTransmittance'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'temperature_value': 'temperatureValue',
        'topological_reference': 'topologicalReference',
        'enable_heat_transfer': 'enableHeatTransfer',
        'axis_origin': 'axisOrigin',
        'axis_direction': 'axisDirection',
        'sector_angle': 'sectorAngle',
        'master_topological_reference': 'masterTopologicalReference',
        'slave_topological_reference': 'slaveTopologicalReference',
        'heatflux_value': 'heatfluxValue',
        'reference_temperature': 'referenceTemperature',
        'heat_transfer_coefficient': 'heatTransferCoefficient'
    }

    discriminator_value_class_map = {
        'FIXED_TEMPERATURE_VALUE': 'FixedTemperatureValueBC',
        'CYCLIC_SYMMETRY': 'CyclicSymmetryBC',
        'SURFACE_HEAT_FLUX': 'SurfaceHeatFluxBC',
        'CONVECTIVE_HEAT_FLUX': 'ConvectiveHeatFluxBC',
        'VOLUME_HEAT_FLUX': 'VolumeHeatFluxBC'
    }

    def __init__(self, type='VOLUME_HEAT_FLUX', name=None, temperature_value=None, topological_reference=None, enable_heat_transfer=None, axis_origin=None, axis_direction=None, sector_angle=None, master_topological_reference=None, slave_topological_reference=None, heatflux_value=None, reference_temperature=None, heat_transfer_coefficient=None, local_vars_configuration=None):  # noqa: E501
        """OneOfHeatTransferBoundaryConditions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._temperature_value = None
        self._topological_reference = None
        self._enable_heat_transfer = None
        self._axis_origin = None
        self._axis_direction = None
        self._sector_angle = None
        self._master_topological_reference = None
        self._slave_topological_reference = None
        self._heatflux_value = None
        self._reference_temperature = None
        self._heat_transfer_coefficient = None
        self.discriminator = 'type'

        self.type = type
        if name is not None:
            self.name = name
        if temperature_value is not None:
            self.temperature_value = temperature_value
        if topological_reference is not None:
            self.topological_reference = topological_reference
        if enable_heat_transfer is not None:
            self.enable_heat_transfer = enable_heat_transfer
        if axis_origin is not None:
            self.axis_origin = axis_origin
        if axis_direction is not None:
            self.axis_direction = axis_direction
        if sector_angle is not None:
            self.sector_angle = sector_angle
        if master_topological_reference is not None:
            self.master_topological_reference = master_topological_reference
        if slave_topological_reference is not None:
            self.slave_topological_reference = slave_topological_reference
        if heatflux_value is not None:
            self.heatflux_value = heatflux_value
        if reference_temperature is not None:
            self.reference_temperature = reference_temperature
        if heat_transfer_coefficient is not None:
            self.heat_transfer_coefficient = heat_transfer_coefficient

    @property
    def type(self):
        """Gets the type of this OneOfHeatTransferBoundaryConditions.  # noqa: E501

        This is a <b>volume heat source</b> boundary condition. It is applied to the <b>volume elements</b> in the selected volumes or volume groups.<br /><br />Important remarks: <br /><ul><li>The total heat generated depends on the volume of the selection as the value is given as Watt per cubic meter.</li><li>For positive values heat is generated, for negative values the bc represents a heat sink.</li><li>You may define a <b>parameter dependent (x,y,z,t)</b> value by defining a formula or uploading a table (csv-file)</li></ul>  Schema name: VolumeHeatFluxBC  # noqa: E501

        :return: The type of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfHeatTransferBoundaryConditions.

        This is a <b>volume heat source</b> boundary condition. It is applied to the <b>volume elements</b> in the selected volumes or volume groups.<br /><br />Important remarks: <br /><ul><li>The total heat generated depends on the volume of the selection as the value is given as Watt per cubic meter.</li><li>For positive values heat is generated, for negative values the bc represents a heat sink.</li><li>You may define a <b>parameter dependent (x,y,z,t)</b> value by defining a formula or uploading a table (csv-file)</li></ul>  Schema name: VolumeHeatFluxBC  # noqa: E501

        :param type: The type of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The name of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OneOfHeatTransferBoundaryConditions.


        :param name: The name of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def temperature_value(self):
        """Gets the temperature_value of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The temperature_value of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: DimensionalFunctionTemperature
        """
        return self._temperature_value

    @temperature_value.setter
    def temperature_value(self, temperature_value):
        """Sets the temperature_value of this OneOfHeatTransferBoundaryConditions.


        :param temperature_value: The temperature_value of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: DimensionalFunctionTemperature
        """

        self._temperature_value = temperature_value

    @property
    def topological_reference(self):
        """Gets the topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this OneOfHeatTransferBoundaryConditions.


        :param topological_reference: The topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    @property
    def enable_heat_transfer(self):
        """Gets the enable_heat_transfer of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The enable_heat_transfer of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: str
        """
        return self._enable_heat_transfer

    @enable_heat_transfer.setter
    def enable_heat_transfer(self, enable_heat_transfer):
        """Sets the enable_heat_transfer of this OneOfHeatTransferBoundaryConditions.


        :param enable_heat_transfer: The enable_heat_transfer of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO", "HEAT_TRANSFER_ONLY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and enable_heat_transfer not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `enable_heat_transfer` ({0}), must be one of {1}"  # noqa: E501
                .format(enable_heat_transfer, allowed_values)
            )

        self._enable_heat_transfer = enable_heat_transfer

    @property
    def axis_origin(self):
        """Gets the axis_origin of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The axis_origin of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._axis_origin

    @axis_origin.setter
    def axis_origin(self, axis_origin):
        """Sets the axis_origin of this OneOfHeatTransferBoundaryConditions.


        :param axis_origin: The axis_origin of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._axis_origin = axis_origin

    @property
    def axis_direction(self):
        """Gets the axis_direction of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The axis_direction of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: DimensionalVectorLength
        """
        return self._axis_direction

    @axis_direction.setter
    def axis_direction(self, axis_direction):
        """Sets the axis_direction of this OneOfHeatTransferBoundaryConditions.


        :param axis_direction: The axis_direction of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: DimensionalVectorLength
        """

        self._axis_direction = axis_direction

    @property
    def sector_angle(self):
        """Gets the sector_angle of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The sector_angle of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: DimensionalAngle
        """
        return self._sector_angle

    @sector_angle.setter
    def sector_angle(self, sector_angle):
        """Sets the sector_angle of this OneOfHeatTransferBoundaryConditions.


        :param sector_angle: The sector_angle of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: DimensionalAngle
        """

        self._sector_angle = sector_angle

    @property
    def master_topological_reference(self):
        """Gets the master_topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The master_topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._master_topological_reference

    @master_topological_reference.setter
    def master_topological_reference(self, master_topological_reference):
        """Sets the master_topological_reference of this OneOfHeatTransferBoundaryConditions.


        :param master_topological_reference: The master_topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: TopologicalReference
        """

        self._master_topological_reference = master_topological_reference

    @property
    def slave_topological_reference(self):
        """Gets the slave_topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The slave_topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._slave_topological_reference

    @slave_topological_reference.setter
    def slave_topological_reference(self, slave_topological_reference):
        """Sets the slave_topological_reference of this OneOfHeatTransferBoundaryConditions.


        :param slave_topological_reference: The slave_topological_reference of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: TopologicalReference
        """

        self._slave_topological_reference = slave_topological_reference

    @property
    def heatflux_value(self):
        """Gets the heatflux_value of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The heatflux_value of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: DimensionalFunctionVolumetricPower
        """
        return self._heatflux_value

    @heatflux_value.setter
    def heatflux_value(self, heatflux_value):
        """Sets the heatflux_value of this OneOfHeatTransferBoundaryConditions.


        :param heatflux_value: The heatflux_value of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: DimensionalFunctionVolumetricPower
        """

        self._heatflux_value = heatflux_value

    @property
    def reference_temperature(self):
        """Gets the reference_temperature of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The reference_temperature of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: DimensionalFunctionTemperature
        """
        return self._reference_temperature

    @reference_temperature.setter
    def reference_temperature(self, reference_temperature):
        """Sets the reference_temperature of this OneOfHeatTransferBoundaryConditions.


        :param reference_temperature: The reference_temperature of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: DimensionalFunctionTemperature
        """

        self._reference_temperature = reference_temperature

    @property
    def heat_transfer_coefficient(self):
        """Gets the heat_transfer_coefficient of this OneOfHeatTransferBoundaryConditions.  # noqa: E501


        :return: The heat_transfer_coefficient of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :rtype: DimensionalFunctionThermalTransmittance
        """
        return self._heat_transfer_coefficient

    @heat_transfer_coefficient.setter
    def heat_transfer_coefficient(self, heat_transfer_coefficient):
        """Sets the heat_transfer_coefficient of this OneOfHeatTransferBoundaryConditions.


        :param heat_transfer_coefficient: The heat_transfer_coefficient of this OneOfHeatTransferBoundaryConditions.  # noqa: E501
        :type: DimensionalFunctionThermalTransmittance
        """

        self._heat_transfer_coefficient = heat_transfer_coefficient

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfHeatTransferBoundaryConditions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfHeatTransferBoundaryConditions):
            return True

        return self.to_dict() != other.to_dict()
