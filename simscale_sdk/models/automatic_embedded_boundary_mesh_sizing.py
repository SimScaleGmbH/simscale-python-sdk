# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class AutomaticEmbeddedBoundaryMeshSizing(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'fineness': 'float',
        'physics_based_meshing_ibm': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'fineness': 'fineness',
        'physics_based_meshing_ibm': 'physicsBasedMeshingIBM'
    }

    def __init__(self, type='AUTOMATIC_EBM_MESH_SIZING', fineness=None, physics_based_meshing_ibm=None, local_vars_configuration=None):  # noqa: E501
        """AutomaticEmbeddedBoundaryMeshSizing - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._fineness = None
        self._physics_based_meshing_ibm = None
        self.discriminator = None

        self.type = type
        if fineness is not None:
            self.fineness = fineness
        if physics_based_meshing_ibm is not None:
            self.physics_based_meshing_ibm = physics_based_meshing_ibm

    @property
    def type(self):
        """Gets the type of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501

        Schema name: AutomaticEmbeddedBoundaryMeshSizing  # noqa: E501

        :return: The type of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomaticEmbeddedBoundaryMeshSizing.

        Schema name: AutomaticEmbeddedBoundaryMeshSizing  # noqa: E501

        :param type: The type of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fineness(self):
        """Gets the fineness of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501

        <p>This parameter determines the <b>fineness of the mesh</b> and affects the overall number of cells.</p><p><b>Note:</b> This setting will impact the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results.</p>  # noqa: E501

        :return: The fineness of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501
        :rtype: float
        """
        return self._fineness

    @fineness.setter
    def fineness(self, fineness):
        """Sets the fineness of this AutomaticEmbeddedBoundaryMeshSizing.

        <p>This parameter determines the <b>fineness of the mesh</b> and affects the overall number of cells.</p><p><b>Note:</b> This setting will impact the accuracy of your results as well as computing time and result size. A finer mesh will be more demanding in terms of machine size and memory but lead to more accurate results.</p>  # noqa: E501

        :param fineness: The fineness of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                fineness is not None and fineness > 10):  # noqa: E501
            raise ValueError("Invalid value for `fineness`, must be a value less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                fineness is not None and fineness < 0):  # noqa: E501
            raise ValueError("Invalid value for `fineness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fineness = fineness

    @property
    def physics_based_meshing_ibm(self):
        """Gets the physics_based_meshing_ibm of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501

        <b>Physics-based meshing</b> takes setup information into account to size the immersed mesh accordingly. Users can expect automatic refinements applied to the following: </p><ul><li><p><b>Boundary faces</b>: All of those which belong to a boundary condition.</p></li> <li><p><b>Advanced concepts</b>: Power and momentum sources, porous regions and thermal resistance networks.</p></li></ul>  # noqa: E501

        :return: The physics_based_meshing_ibm of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501
        :rtype: bool
        """
        return self._physics_based_meshing_ibm

    @physics_based_meshing_ibm.setter
    def physics_based_meshing_ibm(self, physics_based_meshing_ibm):
        """Sets the physics_based_meshing_ibm of this AutomaticEmbeddedBoundaryMeshSizing.

        <b>Physics-based meshing</b> takes setup information into account to size the immersed mesh accordingly. Users can expect automatic refinements applied to the following: </p><ul><li><p><b>Boundary faces</b>: All of those which belong to a boundary condition.</p></li> <li><p><b>Advanced concepts</b>: Power and momentum sources, porous regions and thermal resistance networks.</p></li></ul>  # noqa: E501

        :param physics_based_meshing_ibm: The physics_based_meshing_ibm of this AutomaticEmbeddedBoundaryMeshSizing.  # noqa: E501
        :type: bool
        """

        self._physics_based_meshing_ibm = physics_based_meshing_ibm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomaticEmbeddedBoundaryMeshSizing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomaticEmbeddedBoundaryMeshSizing):
            return True

        return self.to_dict() != other.to_dict()
