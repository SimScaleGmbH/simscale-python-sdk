# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class OneOfManualMeshSizingGrading(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'fineness': 'str',
        'number_of_segments_per_edge': 'float',
        'number_of_segments_per_radius': 'float',
        'growth_rate': 'float'
    }

    attribute_map = {
        'type': 'type',
        'fineness': 'fineness',
        'number_of_segments_per_edge': 'numberOfSegmentsPerEdge',
        'number_of_segments_per_radius': 'numberOfSegmentsPerRadius',
        'growth_rate': 'growthRate'
    }

    discriminator_value_class_map = {
        'AUTOMATIC': 'AutomaticMeshGrading',
        'MANUAL': 'ManualMeshGrading'
    }

    def __init__(self, type='MANUAL', fineness=None, number_of_segments_per_edge=None, number_of_segments_per_radius=None, growth_rate=None, local_vars_configuration=None):  # noqa: E501
        """OneOfManualMeshSizingGrading - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._fineness = None
        self._number_of_segments_per_edge = None
        self._number_of_segments_per_radius = None
        self._growth_rate = None
        self.discriminator = 'type'

        self.type = type
        if fineness is not None:
            self.fineness = fineness
        if number_of_segments_per_edge is not None:
            self.number_of_segments_per_edge = number_of_segments_per_edge
        if number_of_segments_per_radius is not None:
            self.number_of_segments_per_radius = number_of_segments_per_radius
        if growth_rate is not None:
            self.growth_rate = growth_rate

    @property
    def type(self):
        """Gets the type of this OneOfManualMeshSizingGrading.  # noqa: E501

        Schema name: ManualMeshGrading  # noqa: E501

        :return: The type of this OneOfManualMeshSizingGrading.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OneOfManualMeshSizingGrading.

        Schema name: ManualMeshGrading  # noqa: E501

        :param type: The type of this OneOfManualMeshSizingGrading.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def fineness(self):
        """Gets the fineness of this OneOfManualMeshSizingGrading.  # noqa: E501

        <p>The <b><a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#grading' target='_blank'>mesh grading</a></b> specifies how fine details of the geometry are resolved and also influences the quality of the resulting elements.</p><ul><li><p>If you select the <b>automatic</b> grading, you can specify how fine your mesh should be (ranging from <i>1 - very coarse</i> to <i>5 - very fine</i>) and all additional parameters will be set automatically.</li><li><p>For full control over the underlying parameters <i>number of segements per edge</i>, <i>number of segements per radius</i> and <i>growth rate</i> you can choose the <b>manual</b> mesh grading option.</p></li></ul><p><img src=\"/spec/resources/help/imgs/mesh_grading_comparison.png\" class=\"helpPopupImage\"/> The figure shows meshes for grading <i>1 - very coarse</i> (left) and <i>5 - very fine</i> (right).</p>  # noqa: E501

        :return: The fineness of this OneOfManualMeshSizingGrading.  # noqa: E501
        :rtype: str
        """
        return self._fineness

    @fineness.setter
    def fineness(self, fineness):
        """Sets the fineness of this OneOfManualMeshSizingGrading.

        <p>The <b><a href='https://www.simscale.com/docs/simulation-setup/meshing/tet-dominant/#grading' target='_blank'>mesh grading</a></b> specifies how fine details of the geometry are resolved and also influences the quality of the resulting elements.</p><ul><li><p>If you select the <b>automatic</b> grading, you can specify how fine your mesh should be (ranging from <i>1 - very coarse</i> to <i>5 - very fine</i>) and all additional parameters will be set automatically.</li><li><p>For full control over the underlying parameters <i>number of segements per edge</i>, <i>number of segements per radius</i> and <i>growth rate</i> you can choose the <b>manual</b> mesh grading option.</p></li></ul><p><img src=\"/spec/resources/help/imgs/mesh_grading_comparison.png\" class=\"helpPopupImage\"/> The figure shows meshes for grading <i>1 - very coarse</i> (left) and <i>5 - very fine</i> (right).</p>  # noqa: E501

        :param fineness: The fineness of this OneOfManualMeshSizingGrading.  # noqa: E501
        :type: str
        """
        allowed_values = ["VERY_COARSE", "COARSE", "MODERATE", "FINE", "VERY_FINE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and fineness not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `fineness` ({0}), must be one of {1}"  # noqa: E501
                .format(fineness, allowed_values)
            )

        self._fineness = fineness

    @property
    def number_of_segments_per_edge(self):
        """Gets the number_of_segments_per_edge of this OneOfManualMeshSizingGrading.  # noqa: E501

        <p>This value defines the minimum number of elements along a <b>geometry edge</b>.</p>  # noqa: E501

        :return: The number_of_segments_per_edge of this OneOfManualMeshSizingGrading.  # noqa: E501
        :rtype: float
        """
        return self._number_of_segments_per_edge

    @number_of_segments_per_edge.setter
    def number_of_segments_per_edge(self, number_of_segments_per_edge):
        """Sets the number_of_segments_per_edge of this OneOfManualMeshSizingGrading.

        <p>This value defines the minimum number of elements along a <b>geometry edge</b>.</p>  # noqa: E501

        :param number_of_segments_per_edge: The number_of_segments_per_edge of this OneOfManualMeshSizingGrading.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                number_of_segments_per_edge is not None and number_of_segments_per_edge > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `number_of_segments_per_edge`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                number_of_segments_per_edge is not None and number_of_segments_per_edge < 0.2):  # noqa: E501
            raise ValueError("Invalid value for `number_of_segments_per_edge`, must be a value greater than or equal to `0.2`")  # noqa: E501

        self._number_of_segments_per_edge = number_of_segments_per_edge

    @property
    def number_of_segments_per_radius(self):
        """Gets the number_of_segments_per_radius of this OneOfManualMeshSizingGrading.  # noqa: E501

        <p>This value defines the minimum number of elements along a <b>geometry radius</b>.</p>  # noqa: E501

        :return: The number_of_segments_per_radius of this OneOfManualMeshSizingGrading.  # noqa: E501
        :rtype: float
        """
        return self._number_of_segments_per_radius

    @number_of_segments_per_radius.setter
    def number_of_segments_per_radius(self, number_of_segments_per_radius):
        """Sets the number_of_segments_per_radius of this OneOfManualMeshSizingGrading.

        <p>This value defines the minimum number of elements along a <b>geometry radius</b>.</p>  # noqa: E501

        :param number_of_segments_per_radius: The number_of_segments_per_radius of this OneOfManualMeshSizingGrading.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                number_of_segments_per_radius is not None and number_of_segments_per_radius > 1000000):  # noqa: E501
            raise ValueError("Invalid value for `number_of_segments_per_radius`, must be a value less than or equal to `1000000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                number_of_segments_per_radius is not None and number_of_segments_per_radius < 0.2):  # noqa: E501
            raise ValueError("Invalid value for `number_of_segments_per_radius`, must be a value greater than or equal to `0.2`")  # noqa: E501

        self._number_of_segments_per_radius = number_of_segments_per_radius

    @property
    def growth_rate(self):
        """Gets the growth_rate of this OneOfManualMeshSizingGrading.  # noqa: E501

        <p>The <b>growth rate</b> determines how large the allowed difference in element size between neighbouring elements is. For example a value of 0.2 allows the edges of neighbouring elements to differ by 20%.</p><p>If a large value is chosen, features requiring a finer mesh, like holes or fillets, will have a very local influence on the element size whereas for a small mesh grading those features will influence the element sizes in a wider area around them.</p><p>Choosing a smaller value will thus lead to a higher number of elements but also result in a better overall mesh quality.</p><p><img src=\"/spec/resources/help/imgs/growth_rate_comparison.png\" class=\"helpPopupImage\"/> The figure shows meshes for growth rate <i>2</i> (left) and <i>0.2</i> (right).</p>  # noqa: E501

        :return: The growth_rate of this OneOfManualMeshSizingGrading.  # noqa: E501
        :rtype: float
        """
        return self._growth_rate

    @growth_rate.setter
    def growth_rate(self, growth_rate):
        """Sets the growth_rate of this OneOfManualMeshSizingGrading.

        <p>The <b>growth rate</b> determines how large the allowed difference in element size between neighbouring elements is. For example a value of 0.2 allows the edges of neighbouring elements to differ by 20%.</p><p>If a large value is chosen, features requiring a finer mesh, like holes or fillets, will have a very local influence on the element size whereas for a small mesh grading those features will influence the element sizes in a wider area around them.</p><p>Choosing a smaller value will thus lead to a higher number of elements but also result in a better overall mesh quality.</p><p><img src=\"/spec/resources/help/imgs/growth_rate_comparison.png\" class=\"helpPopupImage\"/> The figure shows meshes for growth rate <i>2</i> (left) and <i>0.2</i> (right).</p>  # noqa: E501

        :param growth_rate: The growth_rate of this OneOfManualMeshSizingGrading.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                growth_rate is not None and growth_rate > 10):  # noqa: E501
            raise ValueError("Invalid value for `growth_rate`, must be a value less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                growth_rate is not None and growth_rate < 0):  # noqa: E501
            raise ValueError("Invalid value for `growth_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._growth_rate = growth_rate

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneOfManualMeshSizingGrading):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OneOfManualMeshSizingGrading):
            return True

        return self.to_dict() != other.to_dict()
