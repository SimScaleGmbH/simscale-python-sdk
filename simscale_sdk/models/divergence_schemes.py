# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class DivergenceSchemes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'for_default': 'OneOfDivergenceSchemesForDefault',
        'div_phi_velocity': 'OneOfDivergenceSchemesDivPhiVelocity',
        'div_phi_kinetic_energy': 'OneOfDivergenceSchemesDivPhiKineticEnergy',
        'div_phi_enthalpy': 'OneOfDivergenceSchemesDivPhiEnthalpy',
        'div_phi_internal_energy': 'OneOfDivergenceSchemesDivPhiInternalEnergy',
        'div_phiv_pressure': 'OneOfDivergenceSchemesDivPhivPressure',
        'div_phi_turbulent_kinetic_energy': 'OneOfDivergenceSchemesDivPhiTurbulentKineticEnergy',
        'div_nu_eff_dev_t_grad_velocity': 'GaussLinearDivergenceScheme',
        'div_mu_eff_dev2_t_grad_velocity': 'GaussLinearDivergenceScheme',
        'div_phi_omega_dissipation_rate': 'OneOfDivergenceSchemesDivPhiOmegaDissipationRate',
        'div_phi_epsilon_dissipation_rate': 'OneOfDivergenceSchemesDivPhiEpsilonDissipationRate',
        'div_r': 'OneOfDivergenceSchemesDivR',
        'div_phi_r': 'OneOfDivergenceSchemesDivPhiR',
        'div_phi_nu_tilda': 'OneOfDivergenceSchemesDivPhiNuTilda',
        'div_phi_temperature': 'OneOfDivergenceSchemesDivPhiTemperature',
        'div_phi_passive_scalar': 'OneOfDivergenceSchemesDivPhiPassiveScalar',
        'div_tau_mc': 'OneOfDivergenceSchemesDivTauMC',
        'div_phid_pressure': 'OneOfDivergenceSchemesDivPhidPressure',
        'div_velocity': 'OneOfDivergenceSchemesDivVelocity',
        'div_phi_ekp': 'OneOfDivergenceSchemesDivPhiEkp',
        'div_phirb_alpha': 'OneOfDivergenceSchemesDivPhirbAlpha',
        'div_mu_eff_dev_t_grad_velocity': 'GaussLinearDivergenceScheme',
        'div_phi_alpha': 'OneOfDivergenceSchemesDivPhiAlpha',
        'div_rho_phi_velocity': 'OneOfDivergenceSchemesDivRhoPhiVelocity'
    }

    attribute_map = {
        'for_default': 'forDefault',
        'div_phi_velocity': 'div_Phi_velocity',
        'div_phi_kinetic_energy': 'div_Phi_kineticEnergy',
        'div_phi_enthalpy': 'div_Phi_enthalpy',
        'div_phi_internal_energy': 'div_Phi_internalEnergy',
        'div_phiv_pressure': 'div_Phiv_pressure',
        'div_phi_turbulent_kinetic_energy': 'div_Phi_turbulentKineticEnergy',
        'div_nu_eff_dev_t_grad_velocity': 'div_NuEff_dev_T_grad_velocity',
        'div_mu_eff_dev2_t_grad_velocity': 'div_MuEff_dev2_T_grad_velocity',
        'div_phi_omega_dissipation_rate': 'div_Phi_omegaDissipationRate',
        'div_phi_epsilon_dissipation_rate': 'div_Phi_epsilonDissipationRate',
        'div_r': 'div_R',
        'div_phi_r': 'div_Phi_R',
        'div_phi_nu_tilda': 'div_Phi_nuTilda',
        'div_phi_temperature': 'div_Phi_temperature',
        'div_phi_passive_scalar': 'div_Phi_passiveScalar',
        'div_tau_mc': 'div_tauMC',
        'div_phid_pressure': 'div_phid_pressure',
        'div_velocity': 'div_velocity',
        'div_phi_ekp': 'div_phi_Ekp',
        'div_phirb_alpha': 'div_phirb_alpha',
        'div_mu_eff_dev_t_grad_velocity': 'div_muEff_dev_T_grad_velocity',
        'div_phi_alpha': 'div_phi_alpha',
        'div_rho_phi_velocity': 'div_rhoPhi_velocity'
    }

    def __init__(self, for_default=None, div_phi_velocity=None, div_phi_kinetic_energy=None, div_phi_enthalpy=None, div_phi_internal_energy=None, div_phiv_pressure=None, div_phi_turbulent_kinetic_energy=None, div_nu_eff_dev_t_grad_velocity=None, div_mu_eff_dev2_t_grad_velocity=None, div_phi_omega_dissipation_rate=None, div_phi_epsilon_dissipation_rate=None, div_r=None, div_phi_r=None, div_phi_nu_tilda=None, div_phi_temperature=None, div_phi_passive_scalar=None, div_tau_mc=None, div_phid_pressure=None, div_velocity=None, div_phi_ekp=None, div_phirb_alpha=None, div_mu_eff_dev_t_grad_velocity=None, div_phi_alpha=None, div_rho_phi_velocity=None, local_vars_configuration=None):  # noqa: E501
        """DivergenceSchemes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._for_default = None
        self._div_phi_velocity = None
        self._div_phi_kinetic_energy = None
        self._div_phi_enthalpy = None
        self._div_phi_internal_energy = None
        self._div_phiv_pressure = None
        self._div_phi_turbulent_kinetic_energy = None
        self._div_nu_eff_dev_t_grad_velocity = None
        self._div_mu_eff_dev2_t_grad_velocity = None
        self._div_phi_omega_dissipation_rate = None
        self._div_phi_epsilon_dissipation_rate = None
        self._div_r = None
        self._div_phi_r = None
        self._div_phi_nu_tilda = None
        self._div_phi_temperature = None
        self._div_phi_passive_scalar = None
        self._div_tau_mc = None
        self._div_phid_pressure = None
        self._div_velocity = None
        self._div_phi_ekp = None
        self._div_phirb_alpha = None
        self._div_mu_eff_dev_t_grad_velocity = None
        self._div_phi_alpha = None
        self._div_rho_phi_velocity = None
        self.discriminator = None

        if for_default is not None:
            self.for_default = for_default
        if div_phi_velocity is not None:
            self.div_phi_velocity = div_phi_velocity
        if div_phi_kinetic_energy is not None:
            self.div_phi_kinetic_energy = div_phi_kinetic_energy
        if div_phi_enthalpy is not None:
            self.div_phi_enthalpy = div_phi_enthalpy
        if div_phi_internal_energy is not None:
            self.div_phi_internal_energy = div_phi_internal_energy
        if div_phiv_pressure is not None:
            self.div_phiv_pressure = div_phiv_pressure
        if div_phi_turbulent_kinetic_energy is not None:
            self.div_phi_turbulent_kinetic_energy = div_phi_turbulent_kinetic_energy
        if div_nu_eff_dev_t_grad_velocity is not None:
            self.div_nu_eff_dev_t_grad_velocity = div_nu_eff_dev_t_grad_velocity
        if div_mu_eff_dev2_t_grad_velocity is not None:
            self.div_mu_eff_dev2_t_grad_velocity = div_mu_eff_dev2_t_grad_velocity
        if div_phi_omega_dissipation_rate is not None:
            self.div_phi_omega_dissipation_rate = div_phi_omega_dissipation_rate
        if div_phi_epsilon_dissipation_rate is not None:
            self.div_phi_epsilon_dissipation_rate = div_phi_epsilon_dissipation_rate
        if div_r is not None:
            self.div_r = div_r
        if div_phi_r is not None:
            self.div_phi_r = div_phi_r
        if div_phi_nu_tilda is not None:
            self.div_phi_nu_tilda = div_phi_nu_tilda
        if div_phi_temperature is not None:
            self.div_phi_temperature = div_phi_temperature
        if div_phi_passive_scalar is not None:
            self.div_phi_passive_scalar = div_phi_passive_scalar
        if div_tau_mc is not None:
            self.div_tau_mc = div_tau_mc
        if div_phid_pressure is not None:
            self.div_phid_pressure = div_phid_pressure
        if div_velocity is not None:
            self.div_velocity = div_velocity
        if div_phi_ekp is not None:
            self.div_phi_ekp = div_phi_ekp
        if div_phirb_alpha is not None:
            self.div_phirb_alpha = div_phirb_alpha
        if div_mu_eff_dev_t_grad_velocity is not None:
            self.div_mu_eff_dev_t_grad_velocity = div_mu_eff_dev_t_grad_velocity
        if div_phi_alpha is not None:
            self.div_phi_alpha = div_phi_alpha
        if div_rho_phi_velocity is not None:
            self.div_rho_phi_velocity = div_rho_phi_velocity

    @property
    def for_default(self):
        """Gets the for_default of this DivergenceSchemes.  # noqa: E501


        :return: The for_default of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesForDefault
        """
        return self._for_default

    @for_default.setter
    def for_default(self, for_default):
        """Sets the for_default of this DivergenceSchemes.


        :param for_default: The for_default of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesForDefault
        """

        self._for_default = for_default

    @property
    def div_phi_velocity(self):
        """Gets the div_phi_velocity of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_velocity of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiVelocity
        """
        return self._div_phi_velocity

    @div_phi_velocity.setter
    def div_phi_velocity(self, div_phi_velocity):
        """Sets the div_phi_velocity of this DivergenceSchemes.


        :param div_phi_velocity: The div_phi_velocity of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiVelocity
        """

        self._div_phi_velocity = div_phi_velocity

    @property
    def div_phi_kinetic_energy(self):
        """Gets the div_phi_kinetic_energy of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_kinetic_energy of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiKineticEnergy
        """
        return self._div_phi_kinetic_energy

    @div_phi_kinetic_energy.setter
    def div_phi_kinetic_energy(self, div_phi_kinetic_energy):
        """Sets the div_phi_kinetic_energy of this DivergenceSchemes.


        :param div_phi_kinetic_energy: The div_phi_kinetic_energy of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiKineticEnergy
        """

        self._div_phi_kinetic_energy = div_phi_kinetic_energy

    @property
    def div_phi_enthalpy(self):
        """Gets the div_phi_enthalpy of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_enthalpy of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiEnthalpy
        """
        return self._div_phi_enthalpy

    @div_phi_enthalpy.setter
    def div_phi_enthalpy(self, div_phi_enthalpy):
        """Sets the div_phi_enthalpy of this DivergenceSchemes.


        :param div_phi_enthalpy: The div_phi_enthalpy of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiEnthalpy
        """

        self._div_phi_enthalpy = div_phi_enthalpy

    @property
    def div_phi_internal_energy(self):
        """Gets the div_phi_internal_energy of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_internal_energy of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiInternalEnergy
        """
        return self._div_phi_internal_energy

    @div_phi_internal_energy.setter
    def div_phi_internal_energy(self, div_phi_internal_energy):
        """Sets the div_phi_internal_energy of this DivergenceSchemes.


        :param div_phi_internal_energy: The div_phi_internal_energy of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiInternalEnergy
        """

        self._div_phi_internal_energy = div_phi_internal_energy

    @property
    def div_phiv_pressure(self):
        """Gets the div_phiv_pressure of this DivergenceSchemes.  # noqa: E501


        :return: The div_phiv_pressure of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhivPressure
        """
        return self._div_phiv_pressure

    @div_phiv_pressure.setter
    def div_phiv_pressure(self, div_phiv_pressure):
        """Sets the div_phiv_pressure of this DivergenceSchemes.


        :param div_phiv_pressure: The div_phiv_pressure of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhivPressure
        """

        self._div_phiv_pressure = div_phiv_pressure

    @property
    def div_phi_turbulent_kinetic_energy(self):
        """Gets the div_phi_turbulent_kinetic_energy of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_turbulent_kinetic_energy of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiTurbulentKineticEnergy
        """
        return self._div_phi_turbulent_kinetic_energy

    @div_phi_turbulent_kinetic_energy.setter
    def div_phi_turbulent_kinetic_energy(self, div_phi_turbulent_kinetic_energy):
        """Sets the div_phi_turbulent_kinetic_energy of this DivergenceSchemes.


        :param div_phi_turbulent_kinetic_energy: The div_phi_turbulent_kinetic_energy of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiTurbulentKineticEnergy
        """

        self._div_phi_turbulent_kinetic_energy = div_phi_turbulent_kinetic_energy

    @property
    def div_nu_eff_dev_t_grad_velocity(self):
        """Gets the div_nu_eff_dev_t_grad_velocity of this DivergenceSchemes.  # noqa: E501


        :return: The div_nu_eff_dev_t_grad_velocity of this DivergenceSchemes.  # noqa: E501
        :rtype: GaussLinearDivergenceScheme
        """
        return self._div_nu_eff_dev_t_grad_velocity

    @div_nu_eff_dev_t_grad_velocity.setter
    def div_nu_eff_dev_t_grad_velocity(self, div_nu_eff_dev_t_grad_velocity):
        """Sets the div_nu_eff_dev_t_grad_velocity of this DivergenceSchemes.


        :param div_nu_eff_dev_t_grad_velocity: The div_nu_eff_dev_t_grad_velocity of this DivergenceSchemes.  # noqa: E501
        :type: GaussLinearDivergenceScheme
        """

        self._div_nu_eff_dev_t_grad_velocity = div_nu_eff_dev_t_grad_velocity

    @property
    def div_mu_eff_dev2_t_grad_velocity(self):
        """Gets the div_mu_eff_dev2_t_grad_velocity of this DivergenceSchemes.  # noqa: E501


        :return: The div_mu_eff_dev2_t_grad_velocity of this DivergenceSchemes.  # noqa: E501
        :rtype: GaussLinearDivergenceScheme
        """
        return self._div_mu_eff_dev2_t_grad_velocity

    @div_mu_eff_dev2_t_grad_velocity.setter
    def div_mu_eff_dev2_t_grad_velocity(self, div_mu_eff_dev2_t_grad_velocity):
        """Sets the div_mu_eff_dev2_t_grad_velocity of this DivergenceSchemes.


        :param div_mu_eff_dev2_t_grad_velocity: The div_mu_eff_dev2_t_grad_velocity of this DivergenceSchemes.  # noqa: E501
        :type: GaussLinearDivergenceScheme
        """

        self._div_mu_eff_dev2_t_grad_velocity = div_mu_eff_dev2_t_grad_velocity

    @property
    def div_phi_omega_dissipation_rate(self):
        """Gets the div_phi_omega_dissipation_rate of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_omega_dissipation_rate of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiOmegaDissipationRate
        """
        return self._div_phi_omega_dissipation_rate

    @div_phi_omega_dissipation_rate.setter
    def div_phi_omega_dissipation_rate(self, div_phi_omega_dissipation_rate):
        """Sets the div_phi_omega_dissipation_rate of this DivergenceSchemes.


        :param div_phi_omega_dissipation_rate: The div_phi_omega_dissipation_rate of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiOmegaDissipationRate
        """

        self._div_phi_omega_dissipation_rate = div_phi_omega_dissipation_rate

    @property
    def div_phi_epsilon_dissipation_rate(self):
        """Gets the div_phi_epsilon_dissipation_rate of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_epsilon_dissipation_rate of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiEpsilonDissipationRate
        """
        return self._div_phi_epsilon_dissipation_rate

    @div_phi_epsilon_dissipation_rate.setter
    def div_phi_epsilon_dissipation_rate(self, div_phi_epsilon_dissipation_rate):
        """Sets the div_phi_epsilon_dissipation_rate of this DivergenceSchemes.


        :param div_phi_epsilon_dissipation_rate: The div_phi_epsilon_dissipation_rate of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiEpsilonDissipationRate
        """

        self._div_phi_epsilon_dissipation_rate = div_phi_epsilon_dissipation_rate

    @property
    def div_r(self):
        """Gets the div_r of this DivergenceSchemes.  # noqa: E501


        :return: The div_r of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivR
        """
        return self._div_r

    @div_r.setter
    def div_r(self, div_r):
        """Sets the div_r of this DivergenceSchemes.


        :param div_r: The div_r of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivR
        """

        self._div_r = div_r

    @property
    def div_phi_r(self):
        """Gets the div_phi_r of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_r of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiR
        """
        return self._div_phi_r

    @div_phi_r.setter
    def div_phi_r(self, div_phi_r):
        """Sets the div_phi_r of this DivergenceSchemes.


        :param div_phi_r: The div_phi_r of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiR
        """

        self._div_phi_r = div_phi_r

    @property
    def div_phi_nu_tilda(self):
        """Gets the div_phi_nu_tilda of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_nu_tilda of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiNuTilda
        """
        return self._div_phi_nu_tilda

    @div_phi_nu_tilda.setter
    def div_phi_nu_tilda(self, div_phi_nu_tilda):
        """Sets the div_phi_nu_tilda of this DivergenceSchemes.


        :param div_phi_nu_tilda: The div_phi_nu_tilda of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiNuTilda
        """

        self._div_phi_nu_tilda = div_phi_nu_tilda

    @property
    def div_phi_temperature(self):
        """Gets the div_phi_temperature of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_temperature of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiTemperature
        """
        return self._div_phi_temperature

    @div_phi_temperature.setter
    def div_phi_temperature(self, div_phi_temperature):
        """Sets the div_phi_temperature of this DivergenceSchemes.


        :param div_phi_temperature: The div_phi_temperature of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiTemperature
        """

        self._div_phi_temperature = div_phi_temperature

    @property
    def div_phi_passive_scalar(self):
        """Gets the div_phi_passive_scalar of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_passive_scalar of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiPassiveScalar
        """
        return self._div_phi_passive_scalar

    @div_phi_passive_scalar.setter
    def div_phi_passive_scalar(self, div_phi_passive_scalar):
        """Sets the div_phi_passive_scalar of this DivergenceSchemes.


        :param div_phi_passive_scalar: The div_phi_passive_scalar of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiPassiveScalar
        """

        self._div_phi_passive_scalar = div_phi_passive_scalar

    @property
    def div_tau_mc(self):
        """Gets the div_tau_mc of this DivergenceSchemes.  # noqa: E501


        :return: The div_tau_mc of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivTauMC
        """
        return self._div_tau_mc

    @div_tau_mc.setter
    def div_tau_mc(self, div_tau_mc):
        """Sets the div_tau_mc of this DivergenceSchemes.


        :param div_tau_mc: The div_tau_mc of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivTauMC
        """

        self._div_tau_mc = div_tau_mc

    @property
    def div_phid_pressure(self):
        """Gets the div_phid_pressure of this DivergenceSchemes.  # noqa: E501


        :return: The div_phid_pressure of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhidPressure
        """
        return self._div_phid_pressure

    @div_phid_pressure.setter
    def div_phid_pressure(self, div_phid_pressure):
        """Sets the div_phid_pressure of this DivergenceSchemes.


        :param div_phid_pressure: The div_phid_pressure of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhidPressure
        """

        self._div_phid_pressure = div_phid_pressure

    @property
    def div_velocity(self):
        """Gets the div_velocity of this DivergenceSchemes.  # noqa: E501


        :return: The div_velocity of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivVelocity
        """
        return self._div_velocity

    @div_velocity.setter
    def div_velocity(self, div_velocity):
        """Sets the div_velocity of this DivergenceSchemes.


        :param div_velocity: The div_velocity of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivVelocity
        """

        self._div_velocity = div_velocity

    @property
    def div_phi_ekp(self):
        """Gets the div_phi_ekp of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_ekp of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiEkp
        """
        return self._div_phi_ekp

    @div_phi_ekp.setter
    def div_phi_ekp(self, div_phi_ekp):
        """Sets the div_phi_ekp of this DivergenceSchemes.


        :param div_phi_ekp: The div_phi_ekp of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiEkp
        """

        self._div_phi_ekp = div_phi_ekp

    @property
    def div_phirb_alpha(self):
        """Gets the div_phirb_alpha of this DivergenceSchemes.  # noqa: E501


        :return: The div_phirb_alpha of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhirbAlpha
        """
        return self._div_phirb_alpha

    @div_phirb_alpha.setter
    def div_phirb_alpha(self, div_phirb_alpha):
        """Sets the div_phirb_alpha of this DivergenceSchemes.


        :param div_phirb_alpha: The div_phirb_alpha of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhirbAlpha
        """

        self._div_phirb_alpha = div_phirb_alpha

    @property
    def div_mu_eff_dev_t_grad_velocity(self):
        """Gets the div_mu_eff_dev_t_grad_velocity of this DivergenceSchemes.  # noqa: E501


        :return: The div_mu_eff_dev_t_grad_velocity of this DivergenceSchemes.  # noqa: E501
        :rtype: GaussLinearDivergenceScheme
        """
        return self._div_mu_eff_dev_t_grad_velocity

    @div_mu_eff_dev_t_grad_velocity.setter
    def div_mu_eff_dev_t_grad_velocity(self, div_mu_eff_dev_t_grad_velocity):
        """Sets the div_mu_eff_dev_t_grad_velocity of this DivergenceSchemes.


        :param div_mu_eff_dev_t_grad_velocity: The div_mu_eff_dev_t_grad_velocity of this DivergenceSchemes.  # noqa: E501
        :type: GaussLinearDivergenceScheme
        """

        self._div_mu_eff_dev_t_grad_velocity = div_mu_eff_dev_t_grad_velocity

    @property
    def div_phi_alpha(self):
        """Gets the div_phi_alpha of this DivergenceSchemes.  # noqa: E501


        :return: The div_phi_alpha of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivPhiAlpha
        """
        return self._div_phi_alpha

    @div_phi_alpha.setter
    def div_phi_alpha(self, div_phi_alpha):
        """Sets the div_phi_alpha of this DivergenceSchemes.


        :param div_phi_alpha: The div_phi_alpha of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivPhiAlpha
        """

        self._div_phi_alpha = div_phi_alpha

    @property
    def div_rho_phi_velocity(self):
        """Gets the div_rho_phi_velocity of this DivergenceSchemes.  # noqa: E501


        :return: The div_rho_phi_velocity of this DivergenceSchemes.  # noqa: E501
        :rtype: OneOfDivergenceSchemesDivRhoPhiVelocity
        """
        return self._div_rho_phi_velocity

    @div_rho_phi_velocity.setter
    def div_rho_phi_velocity(self, div_rho_phi_velocity):
        """Sets the div_rho_phi_velocity of this DivergenceSchemes.


        :param div_rho_phi_velocity: The div_rho_phi_velocity of this DivergenceSchemes.  # noqa: E501
        :type: OneOfDivergenceSchemesDivRhoPhiVelocity
        """

        self._div_rho_phi_velocity = div_rho_phi_velocity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DivergenceSchemes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DivergenceSchemes):
            return True

        return self.to_dict() != other.to_dict()
