# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class PolynomialFunction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'coefficients': 'list[float]',
        'parameter_base_unit': 'str'
    }

    attribute_map = {
        'type': 'type',
        'coefficients': 'coefficients',
        'parameter_base_unit': 'parameterBaseUnit'
    }

    def __init__(self, type='POLYNOMIAL', coefficients=None, parameter_base_unit=None, local_vars_configuration=None):  # noqa: E501
        """PolynomialFunction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._coefficients = None
        self._parameter_base_unit = None
        self.discriminator = None

        self.type = type
        if coefficients is not None:
            self.coefficients = coefficients
        self.parameter_base_unit = parameter_base_unit

    @property
    def type(self):
        """Gets the type of this PolynomialFunction.  # noqa: E501

        Schema name: PolynomialFunction  # noqa: E501

        :return: The type of this PolynomialFunction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolynomialFunction.

        Schema name: PolynomialFunction  # noqa: E501

        :param type: The type of this PolynomialFunction.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def coefficients(self):
        """Gets the coefficients of this PolynomialFunction.  # noqa: E501


        :return: The coefficients of this PolynomialFunction.  # noqa: E501
        :rtype: list[float]
        """
        return self._coefficients

    @coefficients.setter
    def coefficients(self, coefficients):
        """Sets the coefficients of this PolynomialFunction.


        :param coefficients: The coefficients of this PolynomialFunction.  # noqa: E501
        :type: list[float]
        """

        self._coefficients = coefficients

    @property
    def parameter_base_unit(self):
        """Gets the parameter_base_unit of this PolynomialFunction.  # noqa: E501


        :return: The parameter_base_unit of this PolynomialFunction.  # noqa: E501
        :rtype: str
        """
        return self._parameter_base_unit

    @parameter_base_unit.setter
    def parameter_base_unit(self, parameter_base_unit):
        """Sets the parameter_base_unit of this PolynomialFunction.


        :param parameter_base_unit: The parameter_base_unit of this PolynomialFunction.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and parameter_base_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `parameter_base_unit`, must not be `None`")  # noqa: E501

        self._parameter_base_unit = parameter_base_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolynomialFunction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolynomialFunction):
            return True

        return self.to_dict() != other.to_dict()
