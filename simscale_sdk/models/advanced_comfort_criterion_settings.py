# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class AdvancedComfortCriterionSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gust_factor': 'float',
        'gem_correction': 'float'
    }

    attribute_map = {
        'gust_factor': 'gustFactor',
        'gem_correction': 'gemCorrection'
    }

    def __init__(self, gust_factor=None, gem_correction=None, local_vars_configuration=None):  # noqa: E501
        """AdvancedComfortCriterionSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gust_factor = None
        self._gem_correction = None
        self.discriminator = None

        if gust_factor is not None:
            self.gust_factor = gust_factor
        if gem_correction is not None:
            self.gem_correction = gem_correction

    @property
    def gust_factor(self):
        """Gets the gust_factor of this AdvancedComfortCriterionSettings.  # noqa: E501

        Value of the gust factor <b>k<sub>g</sub></b> used in the computation of the gust wind speed from the mean wind speed <b>U<sub>mean</sub></b> and the standard deviation of the wind speed <b>&sigma;</b>: <ul><b>U<sub>gust</sub> = U<sub>mean</sub> + k<sub>g</sub> &sigma;</b></ul> <a href= https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target='_blank'>Learn more</a>.  # noqa: E501

        :return: The gust_factor of this AdvancedComfortCriterionSettings.  # noqa: E501
        :rtype: float
        """
        return self._gust_factor

    @gust_factor.setter
    def gust_factor(self, gust_factor):
        """Sets the gust_factor of this AdvancedComfortCriterionSettings.

        Value of the gust factor <b>k<sub>g</sub></b> used in the computation of the gust wind speed from the mean wind speed <b>U<sub>mean</sub></b> and the standard deviation of the wind speed <b>&sigma;</b>: <ul><b>U<sub>gust</sub> = U<sub>mean</sub> + k<sub>g</sub> &sigma;</b></ul> <a href= https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target='_blank'>Learn more</a>.  # noqa: E501

        :param gust_factor: The gust_factor of this AdvancedComfortCriterionSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                gust_factor is not None and gust_factor <= 0):  # noqa: E501
            raise ValueError("Invalid value for `gust_factor`, must be a value greater than `0`")  # noqa: E501

        self._gust_factor = gust_factor

    @property
    def gem_correction(self):
        """Gets the gem_correction of this AdvancedComfortCriterionSettings.  # noqa: E501

        Value of the gust equivalent mean correction factor <b>k<sub>GEM</sub></b> used in the computation of the gust equivalent mean wind speed <b>U<sub>GEM</sub></b> from the gust wind speed <b>U<sub>gust</sub>: <ul>U<sub>GEM</sub> = U<sub>gust</sub> / k<sub>GEM</sub></b></ul> <a href= https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target='_blank'>Learn more</a>.  # noqa: E501

        :return: The gem_correction of this AdvancedComfortCriterionSettings.  # noqa: E501
        :rtype: float
        """
        return self._gem_correction

    @gem_correction.setter
    def gem_correction(self, gem_correction):
        """Sets the gem_correction of this AdvancedComfortCriterionSettings.

        Value of the gust equivalent mean correction factor <b>k<sub>GEM</sub></b> used in the computation of the gust equivalent mean wind speed <b>U<sub>GEM</sub></b> from the gust wind speed <b>U<sub>gust</sub>: <ul>U<sub>GEM</sub> = U<sub>gust</sub> / k<sub>GEM</sub></b></ul> <a href= https://www.simscale.com/docs/analysis-types/pedestrian-wind-comfort-analysis/pedestrian-comfort-map/gust-equivalent-mean/#gust-equivalent-mean-formulation target='_blank'>Learn more</a>.  # noqa: E501

        :param gem_correction: The gem_correction of this AdvancedComfortCriterionSettings.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                gem_correction is not None and gem_correction <= 0):  # noqa: E501
            raise ValueError("Invalid value for `gem_correction`, must be a value greater than `0`")  # noqa: E501

        self._gem_correction = gem_correction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedComfortCriterionSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedComfortCriterionSettings):
            return True

        return self.to_dict() != other.to_dict()
