# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class GeometryImportRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'location': 'GeometryImportRequestLocation',
        'format': 'str',
        'input_unit': 'GeometryUnit',
        'options': 'GeometryImportRequestOptions'
    }

    attribute_map = {
        'name': 'name',
        'location': 'location',
        'format': 'format',
        'input_unit': 'inputUnit',
        'options': 'options'
    }

    def __init__(self, name=None, location=None, format=None, input_unit=None, options=None, local_vars_configuration=None):  # noqa: E501
        """GeometryImportRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._location = None
        self._format = None
        self._input_unit = None
        self._options = None
        self.discriminator = None

        self.name = name
        self.location = location
        self.format = format
        self.input_unit = input_unit
        self.options = options

    @property
    def name(self):
        """Gets the name of this GeometryImportRequest.  # noqa: E501

        The name of the imported geometry.  # noqa: E501

        :return: The name of this GeometryImportRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeometryImportRequest.

        The name of the imported geometry.  # noqa: E501

        :param name: The name of this GeometryImportRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this GeometryImportRequest.  # noqa: E501


        :return: The location of this GeometryImportRequest.  # noqa: E501
        :rtype: GeometryImportRequestLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GeometryImportRequest.


        :param location: The location of this GeometryImportRequest.  # noqa: E501
        :type: GeometryImportRequestLocation
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def format(self):
        """Gets the format of this GeometryImportRequest.  # noqa: E501

        The CAD format.  # noqa: E501

        :return: The format of this GeometryImportRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GeometryImportRequest.

        The CAD format.  # noqa: E501

        :param format: The format of this GeometryImportRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and format is None:  # noqa: E501
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["ACIS", "AUTODESK", "CATIA", "CREO", "IGES", "NX", "PARASOLID", "REVIT", "RHINOCEROS", "SOLIDEDGE", "SOLIDWORKS", "STEP", "STL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and format not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def input_unit(self):
        """Gets the input_unit of this GeometryImportRequest.  # noqa: E501


        :return: The input_unit of this GeometryImportRequest.  # noqa: E501
        :rtype: GeometryUnit
        """
        return self._input_unit

    @input_unit.setter
    def input_unit(self, input_unit):
        """Sets the input_unit of this GeometryImportRequest.


        :param input_unit: The input_unit of this GeometryImportRequest.  # noqa: E501
        :type: GeometryUnit
        """
        if self.local_vars_configuration.client_side_validation and input_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `input_unit`, must not be `None`")  # noqa: E501

        self._input_unit = input_unit

    @property
    def options(self):
        """Gets the options of this GeometryImportRequest.  # noqa: E501


        :return: The options of this GeometryImportRequest.  # noqa: E501
        :rtype: GeometryImportRequestOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this GeometryImportRequest.


        :param options: The options of this GeometryImportRequest.  # noqa: E501
        :type: GeometryImportRequestOptions
        """
        if self.local_vars_configuration.client_side_validation and options is None:  # noqa: E501
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeometryImportRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeometryImportRequest):
            return True

        return self.to_dict() != other.to_dict()
