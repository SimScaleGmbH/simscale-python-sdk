# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ProjectCopyRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'space_id': 'str',
        'parent_folder_id': 'str',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'space_id': 'spaceId',
        'parent_folder_id': 'parentFolderId',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, space_id=None, parent_folder_id=None, name=None, description=None, local_vars_configuration=None):  # noqa: E501
        """ProjectCopyRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._space_id = None
        self._parent_folder_id = None
        self._name = None
        self._description = None
        self.discriminator = None

        if space_id is not None:
            self.space_id = space_id
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        self.name = name
        self.description = description

    @property
    def space_id(self):
        """Gets the space_id of this ProjectCopyRequest.  # noqa: E501

        If missing, the project will be copied in the Personal Space of the user.  # noqa: E501

        :return: The space_id of this ProjectCopyRequest.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this ProjectCopyRequest.

        If missing, the project will be copied in the Personal Space of the user.  # noqa: E501

        :param space_id: The space_id of this ProjectCopyRequest.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this ProjectCopyRequest.  # noqa: E501

        If missing, the project is located at the root level of the Space.  # noqa: E501

        :return: The parent_folder_id of this ProjectCopyRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this ProjectCopyRequest.

        If missing, the project is located at the root level of the Space.  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this ProjectCopyRequest.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def name(self):
        """Gets the name of this ProjectCopyRequest.  # noqa: E501

        The project title should contain the application you want to analyze as well as the simulation method you want to use, e.g. 'Heat exchanger - CHT simulation'.   # noqa: E501

        :return: The name of this ProjectCopyRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectCopyRequest.

        The project title should contain the application you want to analyze as well as the simulation method you want to use, e.g. 'Heat exchanger - CHT simulation'.   # noqa: E501

        :param name: The name of this ProjectCopyRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 250):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `250`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProjectCopyRequest.  # noqa: E501

        A meaningful description of the project.  # noqa: E501

        :return: The description of this ProjectCopyRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectCopyRequest.

        A meaningful description of the project.  # noqa: E501

        :param description: The description of this ProjectCopyRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 2000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2000`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectCopyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectCopyRequest):
            return True

        return self.to_dict() != other.to_dict()
