# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class FieldCalculationsMeanAgeOfFluidResultControl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'name': 'str',
        'result_type': 'MeanAgeOfFluidResultType',
        'age_of_fluid_diffusion': 'bool',
        'turbulent_schmidt_number': 'float',
        'diffusion_coefficient': 'DimensionalKinematicViscosity'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'result_type': 'resultType',
        'age_of_fluid_diffusion': 'ageOfFluidDiffusion',
        'turbulent_schmidt_number': 'turbulentSchmidtNumber',
        'diffusion_coefficient': 'diffusionCoefficient'
    }

    def __init__(self, type='AGE_OF_FLUID', name=None, result_type=None, age_of_fluid_diffusion=None, turbulent_schmidt_number=None, diffusion_coefficient=None, local_vars_configuration=None):  # noqa: E501
        """FieldCalculationsMeanAgeOfFluidResultControl - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._name = None
        self._result_type = None
        self._age_of_fluid_diffusion = None
        self._turbulent_schmidt_number = None
        self._diffusion_coefficient = None
        self.discriminator = None

        self.type = type
        if name is not None:
            self.name = name
        if result_type is not None:
            self.result_type = result_type
        if age_of_fluid_diffusion is not None:
            self.age_of_fluid_diffusion = age_of_fluid_diffusion
        if turbulent_schmidt_number is not None:
            self.turbulent_schmidt_number = turbulent_schmidt_number
        if diffusion_coefficient is not None:
            self.diffusion_coefficient = diffusion_coefficient

    @property
    def type(self):
        """Gets the type of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501

        Schema name: FieldCalculationsMeanAgeOfFluidResultControl  # noqa: E501

        :return: The type of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldCalculationsMeanAgeOfFluidResultControl.

        Schema name: FieldCalculationsMeanAgeOfFluidResultControl  # noqa: E501

        :param type: The type of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501


        :return: The name of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldCalculationsMeanAgeOfFluidResultControl.


        :param name: The name of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z()][-+0-9a-zA-Z_()\h]{0,199}$/`")  # noqa: E501

        self._name = name

    @property
    def result_type(self):
        """Gets the result_type of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501


        :return: The result_type of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :rtype: MeanAgeOfFluidResultType
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this FieldCalculationsMeanAgeOfFluidResultControl.


        :param result_type: The result_type of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :type: MeanAgeOfFluidResultType
        """

        self._result_type = result_type

    @property
    def age_of_fluid_diffusion(self):
        """Gets the age_of_fluid_diffusion of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501

        <p>Enable or disable the diffusion term in the age of fluid equation. The exclusion of the diffusion term can be valid for laminar flows but tends to overestimate the age of fluid for turbulent flows.</p>  # noqa: E501

        :return: The age_of_fluid_diffusion of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :rtype: bool
        """
        return self._age_of_fluid_diffusion

    @age_of_fluid_diffusion.setter
    def age_of_fluid_diffusion(self, age_of_fluid_diffusion):
        """Sets the age_of_fluid_diffusion of this FieldCalculationsMeanAgeOfFluidResultControl.

        <p>Enable or disable the diffusion term in the age of fluid equation. The exclusion of the diffusion term can be valid for laminar flows but tends to overestimate the age of fluid for turbulent flows.</p>  # noqa: E501

        :param age_of_fluid_diffusion: The age_of_fluid_diffusion of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :type: bool
        """

        self._age_of_fluid_diffusion = age_of_fluid_diffusion

    @property
    def turbulent_schmidt_number(self):
        """Gets the turbulent_schmidt_number of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501

        <p>The <b>turbulent Schmidt number</b> characteristic of the flow. For HVAC applications it is recommended to maintain the default value of 0.7.</p>  # noqa: E501

        :return: The turbulent_schmidt_number of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :rtype: float
        """
        return self._turbulent_schmidt_number

    @turbulent_schmidt_number.setter
    def turbulent_schmidt_number(self, turbulent_schmidt_number):
        """Sets the turbulent_schmidt_number of this FieldCalculationsMeanAgeOfFluidResultControl.

        <p>The <b>turbulent Schmidt number</b> characteristic of the flow. For HVAC applications it is recommended to maintain the default value of 0.7.</p>  # noqa: E501

        :param turbulent_schmidt_number: The turbulent_schmidt_number of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                turbulent_schmidt_number is not None and turbulent_schmidt_number <= 1.0E-12):  # noqa: E501
            raise ValueError("Invalid value for `turbulent_schmidt_number`, must be a value greater than `1.0E-12`")  # noqa: E501

        self._turbulent_schmidt_number = turbulent_schmidt_number

    @property
    def diffusion_coefficient(self):
        """Gets the diffusion_coefficient of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501


        :return: The diffusion_coefficient of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :rtype: DimensionalKinematicViscosity
        """
        return self._diffusion_coefficient

    @diffusion_coefficient.setter
    def diffusion_coefficient(self, diffusion_coefficient):
        """Sets the diffusion_coefficient of this FieldCalculationsMeanAgeOfFluidResultControl.


        :param diffusion_coefficient: The diffusion_coefficient of this FieldCalculationsMeanAgeOfFluidResultControl.  # noqa: E501
        :type: DimensionalKinematicViscosity
        """

        self._diffusion_coefficient = diffusion_coefficient

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldCalculationsMeanAgeOfFluidResultControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldCalculationsMeanAgeOfFluidResultControl):
            return True

        return self.to_dict() != other.to_dict()
