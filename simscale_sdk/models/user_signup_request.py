# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class UserSignupRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'consent_terms_conditions_privacy': 'bool',
        'consent_to_be_contacted': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'consent_terms_conditions_privacy': 'consentTermsConditionsPrivacy',
        'consent_to_be_contacted': 'consentToBeContacted'
    }

    def __init__(self, email=None, firstname=None, lastname=None, consent_terms_conditions_privacy=None, consent_to_be_contacted=None, local_vars_configuration=None):  # noqa: E501
        """UserSignupRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._firstname = None
        self._lastname = None
        self._consent_terms_conditions_privacy = None
        self._consent_to_be_contacted = None
        self.discriminator = None

        self.email = email
        self.firstname = firstname
        self.lastname = lastname
        self.consent_terms_conditions_privacy = consent_terms_conditions_privacy
        self.consent_to_be_contacted = consent_to_be_contacted

    @property
    def email(self):
        """Gets the email of this UserSignupRequest.  # noqa: E501


        :return: The email of this UserSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSignupRequest.


        :param email: The email of this UserSignupRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 255):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this UserSignupRequest.  # noqa: E501


        :return: The firstname of this UserSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this UserSignupRequest.


        :param firstname: The firstname of this UserSignupRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and firstname is None:  # noqa: E501
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                firstname is not None and len(firstname) > 40):
            raise ValueError("Invalid value for `firstname`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                firstname is not None and len(firstname) < 1):
            raise ValueError("Invalid value for `firstname`, length must be greater than or equal to `1`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this UserSignupRequest.  # noqa: E501


        :return: The lastname of this UserSignupRequest.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this UserSignupRequest.


        :param lastname: The lastname of this UserSignupRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and lastname is None:  # noqa: E501
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lastname is not None and len(lastname) > 80):
            raise ValueError("Invalid value for `lastname`, length must be less than or equal to `80`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                lastname is not None and len(lastname) < 1):
            raise ValueError("Invalid value for `lastname`, length must be greater than or equal to `1`")  # noqa: E501

        self._lastname = lastname

    @property
    def consent_terms_conditions_privacy(self):
        """Gets the consent_terms_conditions_privacy of this UserSignupRequest.  # noqa: E501

        I agree to the End User License Terms and the Privacy Policy  # noqa: E501

        :return: The consent_terms_conditions_privacy of this UserSignupRequest.  # noqa: E501
        :rtype: bool
        """
        return self._consent_terms_conditions_privacy

    @consent_terms_conditions_privacy.setter
    def consent_terms_conditions_privacy(self, consent_terms_conditions_privacy):
        """Sets the consent_terms_conditions_privacy of this UserSignupRequest.

        I agree to the End User License Terms and the Privacy Policy  # noqa: E501

        :param consent_terms_conditions_privacy: The consent_terms_conditions_privacy of this UserSignupRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and consent_terms_conditions_privacy is None:  # noqa: E501
            raise ValueError("Invalid value for `consent_terms_conditions_privacy`, must not be `None`")  # noqa: E501

        self._consent_terms_conditions_privacy = consent_terms_conditions_privacy

    @property
    def consent_to_be_contacted(self):
        """Gets the consent_to_be_contacted of this UserSignupRequest.  # noqa: E501

        SimScale may occasionally contact you via e-mail to present you with similar goods and services of SimScale unless you have objected to such use of your e-mail address.  # noqa: E501

        :return: The consent_to_be_contacted of this UserSignupRequest.  # noqa: E501
        :rtype: bool
        """
        return self._consent_to_be_contacted

    @consent_to_be_contacted.setter
    def consent_to_be_contacted(self, consent_to_be_contacted):
        """Sets the consent_to_be_contacted of this UserSignupRequest.

        SimScale may occasionally contact you via e-mail to present you with similar goods and services of SimScale unless you have objected to such use of your e-mail address.  # noqa: E501

        :param consent_to_be_contacted: The consent_to_be_contacted of this UserSignupRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and consent_to_be_contacted is None:  # noqa: E501
            raise ValueError("Invalid value for `consent_to_be_contacted`, must not be `None`")  # noqa: E501

        self._consent_to_be_contacted = consent_to_be_contacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSignupRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSignupRequest):
            return True

        return self.to_dict() != other.to_dict()
