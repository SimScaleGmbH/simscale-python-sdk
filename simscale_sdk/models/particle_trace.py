# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ParticleTrace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'seed_settings': 'SeedSettings',
        'visualization_style': 'OneOfVisualizationStyle',
        'trace_both_directions': 'bool',
        'scalar_field': 'ScalarField',
        'solid_color': 'Color'
    }

    attribute_map = {
        'seed_settings': 'seedSettings',
        'visualization_style': 'visualizationStyle',
        'trace_both_directions': 'traceBothDirections',
        'scalar_field': 'scalarField',
        'solid_color': 'solidColor'
    }

    def __init__(self, seed_settings=None, visualization_style=None, trace_both_directions=True, scalar_field=None, solid_color=None, local_vars_configuration=None):  # noqa: E501
        """ParticleTrace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._seed_settings = None
        self._visualization_style = None
        self._trace_both_directions = None
        self._scalar_field = None
        self._solid_color = None
        self.discriminator = None

        self.seed_settings = seed_settings
        self.visualization_style = visualization_style
        self.trace_both_directions = trace_both_directions
        if scalar_field is not None:
            self.scalar_field = scalar_field
        if solid_color is not None:
            self.solid_color = solid_color

    @property
    def seed_settings(self):
        """Gets the seed_settings of this ParticleTrace.  # noqa: E501


        :return: The seed_settings of this ParticleTrace.  # noqa: E501
        :rtype: SeedSettings
        """
        return self._seed_settings

    @seed_settings.setter
    def seed_settings(self, seed_settings):
        """Sets the seed_settings of this ParticleTrace.


        :param seed_settings: The seed_settings of this ParticleTrace.  # noqa: E501
        :type: SeedSettings
        """
        if self.local_vars_configuration.client_side_validation and seed_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `seed_settings`, must not be `None`")  # noqa: E501

        self._seed_settings = seed_settings

    @property
    def visualization_style(self):
        """Gets the visualization_style of this ParticleTrace.  # noqa: E501


        :return: The visualization_style of this ParticleTrace.  # noqa: E501
        :rtype: OneOfVisualizationStyle
        """
        return self._visualization_style

    @visualization_style.setter
    def visualization_style(self, visualization_style):
        """Sets the visualization_style of this ParticleTrace.


        :param visualization_style: The visualization_style of this ParticleTrace.  # noqa: E501
        :type: OneOfVisualizationStyle
        """
        if self.local_vars_configuration.client_side_validation and visualization_style is None:  # noqa: E501
            raise ValueError("Invalid value for `visualization_style`, must not be `None`")  # noqa: E501

        self._visualization_style = visualization_style

    @property
    def trace_both_directions(self):
        """Gets the trace_both_directions of this ParticleTrace.  # noqa: E501

        If set to true, the trace will be computed both forwards and backwards from the seed points.  # noqa: E501

        :return: The trace_both_directions of this ParticleTrace.  # noqa: E501
        :rtype: bool
        """
        return self._trace_both_directions

    @trace_both_directions.setter
    def trace_both_directions(self, trace_both_directions):
        """Sets the trace_both_directions of this ParticleTrace.

        If set to true, the trace will be computed both forwards and backwards from the seed points.  # noqa: E501

        :param trace_both_directions: The trace_both_directions of this ParticleTrace.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and trace_both_directions is None:  # noqa: E501
            raise ValueError("Invalid value for `trace_both_directions`, must not be `None`")  # noqa: E501

        self._trace_both_directions = trace_both_directions

    @property
    def scalar_field(self):
        """Gets the scalar_field of this ParticleTrace.  # noqa: E501


        :return: The scalar_field of this ParticleTrace.  # noqa: E501
        :rtype: ScalarField
        """
        return self._scalar_field

    @scalar_field.setter
    def scalar_field(self, scalar_field):
        """Sets the scalar_field of this ParticleTrace.


        :param scalar_field: The scalar_field of this ParticleTrace.  # noqa: E501
        :type: ScalarField
        """

        self._scalar_field = scalar_field

    @property
    def solid_color(self):
        """Gets the solid_color of this ParticleTrace.  # noqa: E501


        :return: The solid_color of this ParticleTrace.  # noqa: E501
        :rtype: Color
        """
        return self._solid_color

    @solid_color.setter
    def solid_color(self, solid_color):
        """Sets the solid_color of this ParticleTrace.


        :param solid_color: The solid_color of this ParticleTrace.  # noqa: E501
        :type: Color
        """

        self._solid_color = solid_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParticleTrace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParticleTrace):
            return True

        return self.to_dict() != other.to_dict()
