# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class TimeDifferentiationSchemes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'for_default': 'OneOfTimeDifferentiationSchemesForDefault',
        'second_order_scheme': 'bool'
    }

    attribute_map = {
        'for_default': 'forDefault',
        'second_order_scheme': 'secondOrderScheme'
    }

    def __init__(self, for_default=None, second_order_scheme=None, local_vars_configuration=None):  # noqa: E501
        """TimeDifferentiationSchemes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._for_default = None
        self._second_order_scheme = None
        self.discriminator = None

        if for_default is not None:
            self.for_default = for_default
        if second_order_scheme is not None:
            self.second_order_scheme = second_order_scheme

    @property
    def for_default(self):
        """Gets the for_default of this TimeDifferentiationSchemes.  # noqa: E501


        :return: The for_default of this TimeDifferentiationSchemes.  # noqa: E501
        :rtype: OneOfTimeDifferentiationSchemesForDefault
        """
        return self._for_default

    @for_default.setter
    def for_default(self, for_default):
        """Sets the for_default of this TimeDifferentiationSchemes.


        :param for_default: The for_default of this TimeDifferentiationSchemes.  # noqa: E501
        :type: OneOfTimeDifferentiationSchemesForDefault
        """

        self._for_default = for_default

    @property
    def second_order_scheme(self):
        """Gets the second_order_scheme of this TimeDifferentiationSchemes.  # noqa: E501


        :return: The second_order_scheme of this TimeDifferentiationSchemes.  # noqa: E501
        :rtype: bool
        """
        return self._second_order_scheme

    @second_order_scheme.setter
    def second_order_scheme(self, second_order_scheme):
        """Sets the second_order_scheme of this TimeDifferentiationSchemes.


        :param second_order_scheme: The second_order_scheme of this TimeDifferentiationSchemes.  # noqa: E501
        :type: bool
        """

        self._second_order_scheme = second_order_scheme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeDifferentiationSchemes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeDifferentiationSchemes):
            return True

        return self.to_dict() != other.to_dict()
