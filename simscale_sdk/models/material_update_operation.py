# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class MaterialUpdateOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'str',
        'material_data': 'MaterialResponse',
        'material_spec': 'object',
        'reference': 'MaterialUpdateOperationReference',
        'material_data_sources': 'list[str]'
    }

    attribute_map = {
        'path': 'path',
        'material_data': 'materialData',
        'material_spec': 'materialSpec',
        'reference': 'reference',
        'material_data_sources': 'materialDataSources'
    }

    def __init__(self, path=None, material_data=None, material_spec=None, reference=None, material_data_sources=None, local_vars_configuration=None):  # noqa: E501
        """MaterialUpdateOperation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._path = None
        self._material_data = None
        self._material_spec = None
        self._reference = None
        self._material_data_sources = None
        self.discriminator = None

        self.path = path
        self.material_data = material_data
        if material_spec is not None:
            self.material_spec = material_spec
        if reference is not None:
            self.reference = reference
        if material_data_sources is not None:
            self.material_data_sources = material_data_sources

    @property
    def path(self):
        """Gets the path of this MaterialUpdateOperation.  # noqa: E501

        JSON pointer (considering the `model` field as root) specifying where to add the material. If it points to a container (e.g. `/materials` or `/materials/solids`), the material will be added to that container. If it points to an existing material instead (e.g. `/materials/0` or `/materials/solids/0`), the new material will replace the one the pointer points to.   # noqa: E501

        :return: The path of this MaterialUpdateOperation.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MaterialUpdateOperation.

        JSON pointer (considering the `model` field as root) specifying where to add the material. If it points to a container (e.g. `/materials` or `/materials/solids`), the material will be added to that container. If it points to an existing material instead (e.g. `/materials/0` or `/materials/solids/0`), the new material will replace the one the pointer points to.   # noqa: E501

        :param path: The path of this MaterialUpdateOperation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def material_data(self):
        """Gets the material_data of this MaterialUpdateOperation.  # noqa: E501


        :return: The material_data of this MaterialUpdateOperation.  # noqa: E501
        :rtype: MaterialResponse
        """
        return self._material_data

    @material_data.setter
    def material_data(self, material_data):
        """Sets the material_data of this MaterialUpdateOperation.


        :param material_data: The material_data of this MaterialUpdateOperation.  # noqa: E501
        :type: MaterialResponse
        """
        if self.local_vars_configuration.client_side_validation and material_data is None:  # noqa: E501
            raise ValueError("Invalid value for `material_data`, must not be `None`")  # noqa: E501

        self._material_data = material_data

    @property
    def material_spec(self):
        """Gets the material_spec of this MaterialUpdateOperation.  # noqa: E501

        Material spec object that will be used as the base to apply the physical properties passed in `materialData`.  # noqa: E501

        :return: The material_spec of this MaterialUpdateOperation.  # noqa: E501
        :rtype: object
        """
        return self._material_spec

    @material_spec.setter
    def material_spec(self, material_spec):
        """Sets the material_spec of this MaterialUpdateOperation.

        Material spec object that will be used as the base to apply the physical properties passed in `materialData`.  # noqa: E501

        :param material_spec: The material_spec of this MaterialUpdateOperation.  # noqa: E501
        :type: object
        """

        self._material_spec = material_spec

    @property
    def reference(self):
        """Gets the reference of this MaterialUpdateOperation.  # noqa: E501


        :return: The reference of this MaterialUpdateOperation.  # noqa: E501
        :rtype: MaterialUpdateOperationReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this MaterialUpdateOperation.


        :param reference: The reference of this MaterialUpdateOperation.  # noqa: E501
        :type: MaterialUpdateOperationReference
        """

        self._reference = reference

    @property
    def material_data_sources(self):
        """Gets the material_data_sources of this MaterialUpdateOperation.  # noqa: E501


        :return: The material_data_sources of this MaterialUpdateOperation.  # noqa: E501
        :rtype: list[str]
        """
        return self._material_data_sources

    @material_data_sources.setter
    def material_data_sources(self, material_data_sources):
        """Sets the material_data_sources of this MaterialUpdateOperation.


        :param material_data_sources: The material_data_sources of this MaterialUpdateOperation.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["MATERIAL_LIBRARY_DATA", "SPEC_DATA", "SCHEMA_DEFAULT"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(material_data_sources).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `material_data_sources` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(material_data_sources) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._material_data_sources = material_data_sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialUpdateOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaterialUpdateOperation):
            return True

        return self.to_dict() != other.to_dict()
