# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class GCPCSolver(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'force_symmetric': 'bool',
        'preconditioner': 'OneOfGCPCSolverPreconditioner',
        'max_iterations': 'int',
        'convergence_threshold': 'float'
    }

    attribute_map = {
        'type': 'type',
        'force_symmetric': 'forceSymmetric',
        'preconditioner': 'preconditioner',
        'max_iterations': 'maxIterations',
        'convergence_threshold': 'convergenceThreshold'
    }

    def __init__(self, type='GCPC', force_symmetric=None, preconditioner=None, max_iterations=None, convergence_threshold=None, local_vars_configuration=None):  # noqa: E501
        """GCPCSolver - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._force_symmetric = None
        self._preconditioner = None
        self._max_iterations = None
        self._convergence_threshold = None
        self.discriminator = None

        self.type = type
        if force_symmetric is not None:
            self.force_symmetric = force_symmetric
        if preconditioner is not None:
            self.preconditioner = preconditioner
        if max_iterations is not None:
            self.max_iterations = max_iterations
        if convergence_threshold is not None:
            self.convergence_threshold = convergence_threshold

    @property
    def type(self):
        """Gets the type of this GCPCSolver.  # noqa: E501

        <p>Choose a linear equation system solver for your calculation:</p><ul><li><p><b>Multfront</b> is a direct solver of the multifrontal type. It is easy to set up and behaves well for most problems.</p></ul><ul><li><p><b>MUMPS</b> is a general purpose direct solver of the multifrontal type. It provides a lot of parameter settings to allow the best fitting to your problems needs.</p></ul><ul><li><p><b>LDLT</b> is a direct solver which uses a Gaussian Algortihm. It is comparatively slow for big problems.</p></ul><ul><li><p><b>PETSC</b> is an iterative solver specially designed to deal with large systems. It scales very effectively in parallel and is the best choice for large problems.</p></ul><ul><li><p><b>GCPC</b> is an iterative solver of the pre-conditioned conjugate gradient type. It scales well in parallel and is also usable for large problems.</p></ul>  Schema name: GCPCSolver  # noqa: E501

        :return: The type of this GCPCSolver.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GCPCSolver.

        <p>Choose a linear equation system solver for your calculation:</p><ul><li><p><b>Multfront</b> is a direct solver of the multifrontal type. It is easy to set up and behaves well for most problems.</p></ul><ul><li><p><b>MUMPS</b> is a general purpose direct solver of the multifrontal type. It provides a lot of parameter settings to allow the best fitting to your problems needs.</p></ul><ul><li><p><b>LDLT</b> is a direct solver which uses a Gaussian Algortihm. It is comparatively slow for big problems.</p></ul><ul><li><p><b>PETSC</b> is an iterative solver specially designed to deal with large systems. It scales very effectively in parallel and is the best choice for large problems.</p></ul><ul><li><p><b>GCPC</b> is an iterative solver of the pre-conditioned conjugate gradient type. It scales well in parallel and is also usable for large problems.</p></ul>  Schema name: GCPCSolver  # noqa: E501

        :param type: The type of this GCPCSolver.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def force_symmetric(self):
        """Gets the force_symmetric of this GCPCSolver.  # noqa: E501

        Choose if you want to enforce a symmetric matrix.  # noqa: E501

        :return: The force_symmetric of this GCPCSolver.  # noqa: E501
        :rtype: bool
        """
        return self._force_symmetric

    @force_symmetric.setter
    def force_symmetric(self, force_symmetric):
        """Sets the force_symmetric of this GCPCSolver.

        Choose if you want to enforce a symmetric matrix.  # noqa: E501

        :param force_symmetric: The force_symmetric of this GCPCSolver.  # noqa: E501
        :type: bool
        """

        self._force_symmetric = force_symmetric

    @property
    def preconditioner(self):
        """Gets the preconditioner of this GCPCSolver.  # noqa: E501


        :return: The preconditioner of this GCPCSolver.  # noqa: E501
        :rtype: OneOfGCPCSolverPreconditioner
        """
        return self._preconditioner

    @preconditioner.setter
    def preconditioner(self, preconditioner):
        """Sets the preconditioner of this GCPCSolver.


        :param preconditioner: The preconditioner of this GCPCSolver.  # noqa: E501
        :type: OneOfGCPCSolverPreconditioner
        """

        self._preconditioner = preconditioner

    @property
    def max_iterations(self):
        """Gets the max_iterations of this GCPCSolver.  # noqa: E501

        Set the maximum number of iterations for the iterative solver. If set to 0 the algorithm computes the maximum number of iterations as the the number of equations ot the system divided by 2.  # noqa: E501

        :return: The max_iterations of this GCPCSolver.  # noqa: E501
        :rtype: int
        """
        return self._max_iterations

    @max_iterations.setter
    def max_iterations(self, max_iterations):
        """Sets the max_iterations of this GCPCSolver.

        Set the maximum number of iterations for the iterative solver. If set to 0 the algorithm computes the maximum number of iterations as the the number of equations ot the system divided by 2.  # noqa: E501

        :param max_iterations: The max_iterations of this GCPCSolver.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                max_iterations is not None and max_iterations < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_iterations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_iterations = max_iterations

    @property
    def convergence_threshold(self):
        """Gets the convergence_threshold of this GCPCSolver.  # noqa: E501

        Set the threshold value for convergence detection for the relative convergence criteria.  # noqa: E501

        :return: The convergence_threshold of this GCPCSolver.  # noqa: E501
        :rtype: float
        """
        return self._convergence_threshold

    @convergence_threshold.setter
    def convergence_threshold(self, convergence_threshold):
        """Sets the convergence_threshold of this GCPCSolver.

        Set the threshold value for convergence detection for the relative convergence criteria.  # noqa: E501

        :param convergence_threshold: The convergence_threshold of this GCPCSolver.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                convergence_threshold is not None and convergence_threshold < 0):  # noqa: E501
            raise ValueError("Invalid value for `convergence_threshold`, must be a value greater than or equal to `0`")  # noqa: E501

        self._convergence_threshold = convergence_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCPCSolver):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GCPCSolver):
            return True

        return self.to_dict() != other.to_dict()
