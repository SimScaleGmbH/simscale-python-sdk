# coding: utf-8

"""
    SimScale API

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from simscale_sdk.configuration import Configuration


class ElectromagneticMaterial(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'material_behavior': 'OneOfElectromagneticMaterialMaterialBehavior',
        'electric_conductivity_type': 'IsotropicElectricConductivityMethod',
        'magnetic_permeability_type': 'OneOfElectromagneticMaterialMagneticPermeabilityType',
        'electric_permittivity_type': 'LinearIsotropicPermittivityMethod',
        'density_type': 'IsotropicDensityMethod',
        'specific_heat_type': 'IsotropicSpecificHeatMethod',
        'thermal_conductivity': 'IsotropicThermalConductivityMethod',
        'core_losses_type': 'OneOfElectromagneticMaterialCoreLossesType',
        'topological_reference': 'TopologicalReference',
        'built_in_material': 'str',
        'material_library_reference': 'MaterialLibraryReference'
    }

    attribute_map = {
        'name': 'name',
        'material_behavior': 'materialBehavior',
        'electric_conductivity_type': 'electricConductivityType',
        'magnetic_permeability_type': 'magneticPermeabilityType',
        'electric_permittivity_type': 'electricPermittivityType',
        'density_type': 'densityType',
        'specific_heat_type': 'specificHeatType',
        'thermal_conductivity': 'thermalConductivity',
        'core_losses_type': 'coreLossesType',
        'topological_reference': 'topologicalReference',
        'built_in_material': 'builtInMaterial',
        'material_library_reference': 'materialLibraryReference'
    }

    def __init__(self, name=None, material_behavior=None, electric_conductivity_type=None, magnetic_permeability_type=None, electric_permittivity_type=None, density_type=None, specific_heat_type=None, thermal_conductivity=None, core_losses_type=None, topological_reference=None, built_in_material=None, material_library_reference=None, local_vars_configuration=None):  # noqa: E501
        """ElectromagneticMaterial - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._material_behavior = None
        self._electric_conductivity_type = None
        self._magnetic_permeability_type = None
        self._electric_permittivity_type = None
        self._density_type = None
        self._specific_heat_type = None
        self._thermal_conductivity = None
        self._core_losses_type = None
        self._topological_reference = None
        self._built_in_material = None
        self._material_library_reference = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if material_behavior is not None:
            self.material_behavior = material_behavior
        if electric_conductivity_type is not None:
            self.electric_conductivity_type = electric_conductivity_type
        if magnetic_permeability_type is not None:
            self.magnetic_permeability_type = magnetic_permeability_type
        if electric_permittivity_type is not None:
            self.electric_permittivity_type = electric_permittivity_type
        if density_type is not None:
            self.density_type = density_type
        if specific_heat_type is not None:
            self.specific_heat_type = specific_heat_type
        if thermal_conductivity is not None:
            self.thermal_conductivity = thermal_conductivity
        if core_losses_type is not None:
            self.core_losses_type = core_losses_type
        if topological_reference is not None:
            self.topological_reference = topological_reference
        if built_in_material is not None:
            self.built_in_material = built_in_material
        if material_library_reference is not None:
            self.material_library_reference = material_library_reference

    @property
    def name(self):
        """Gets the name of this ElectromagneticMaterial.  # noqa: E501


        :return: The name of this ElectromagneticMaterial.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElectromagneticMaterial.


        :param name: The name of this ElectromagneticMaterial.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def material_behavior(self):
        """Gets the material_behavior of this ElectromagneticMaterial.  # noqa: E501


        :return: The material_behavior of this ElectromagneticMaterial.  # noqa: E501
        :rtype: OneOfElectromagneticMaterialMaterialBehavior
        """
        return self._material_behavior

    @material_behavior.setter
    def material_behavior(self, material_behavior):
        """Sets the material_behavior of this ElectromagneticMaterial.


        :param material_behavior: The material_behavior of this ElectromagneticMaterial.  # noqa: E501
        :type: OneOfElectromagneticMaterialMaterialBehavior
        """

        self._material_behavior = material_behavior

    @property
    def electric_conductivity_type(self):
        """Gets the electric_conductivity_type of this ElectromagneticMaterial.  # noqa: E501


        :return: The electric_conductivity_type of this ElectromagneticMaterial.  # noqa: E501
        :rtype: IsotropicElectricConductivityMethod
        """
        return self._electric_conductivity_type

    @electric_conductivity_type.setter
    def electric_conductivity_type(self, electric_conductivity_type):
        """Sets the electric_conductivity_type of this ElectromagneticMaterial.


        :param electric_conductivity_type: The electric_conductivity_type of this ElectromagneticMaterial.  # noqa: E501
        :type: IsotropicElectricConductivityMethod
        """

        self._electric_conductivity_type = electric_conductivity_type

    @property
    def magnetic_permeability_type(self):
        """Gets the magnetic_permeability_type of this ElectromagneticMaterial.  # noqa: E501


        :return: The magnetic_permeability_type of this ElectromagneticMaterial.  # noqa: E501
        :rtype: OneOfElectromagneticMaterialMagneticPermeabilityType
        """
        return self._magnetic_permeability_type

    @magnetic_permeability_type.setter
    def magnetic_permeability_type(self, magnetic_permeability_type):
        """Sets the magnetic_permeability_type of this ElectromagneticMaterial.


        :param magnetic_permeability_type: The magnetic_permeability_type of this ElectromagneticMaterial.  # noqa: E501
        :type: OneOfElectromagneticMaterialMagneticPermeabilityType
        """

        self._magnetic_permeability_type = magnetic_permeability_type

    @property
    def electric_permittivity_type(self):
        """Gets the electric_permittivity_type of this ElectromagneticMaterial.  # noqa: E501


        :return: The electric_permittivity_type of this ElectromagneticMaterial.  # noqa: E501
        :rtype: LinearIsotropicPermittivityMethod
        """
        return self._electric_permittivity_type

    @electric_permittivity_type.setter
    def electric_permittivity_type(self, electric_permittivity_type):
        """Sets the electric_permittivity_type of this ElectromagneticMaterial.


        :param electric_permittivity_type: The electric_permittivity_type of this ElectromagneticMaterial.  # noqa: E501
        :type: LinearIsotropicPermittivityMethod
        """

        self._electric_permittivity_type = electric_permittivity_type

    @property
    def density_type(self):
        """Gets the density_type of this ElectromagneticMaterial.  # noqa: E501


        :return: The density_type of this ElectromagneticMaterial.  # noqa: E501
        :rtype: IsotropicDensityMethod
        """
        return self._density_type

    @density_type.setter
    def density_type(self, density_type):
        """Sets the density_type of this ElectromagneticMaterial.


        :param density_type: The density_type of this ElectromagneticMaterial.  # noqa: E501
        :type: IsotropicDensityMethod
        """

        self._density_type = density_type

    @property
    def specific_heat_type(self):
        """Gets the specific_heat_type of this ElectromagneticMaterial.  # noqa: E501


        :return: The specific_heat_type of this ElectromagneticMaterial.  # noqa: E501
        :rtype: IsotropicSpecificHeatMethod
        """
        return self._specific_heat_type

    @specific_heat_type.setter
    def specific_heat_type(self, specific_heat_type):
        """Sets the specific_heat_type of this ElectromagneticMaterial.


        :param specific_heat_type: The specific_heat_type of this ElectromagneticMaterial.  # noqa: E501
        :type: IsotropicSpecificHeatMethod
        """

        self._specific_heat_type = specific_heat_type

    @property
    def thermal_conductivity(self):
        """Gets the thermal_conductivity of this ElectromagneticMaterial.  # noqa: E501


        :return: The thermal_conductivity of this ElectromagneticMaterial.  # noqa: E501
        :rtype: IsotropicThermalConductivityMethod
        """
        return self._thermal_conductivity

    @thermal_conductivity.setter
    def thermal_conductivity(self, thermal_conductivity):
        """Sets the thermal_conductivity of this ElectromagneticMaterial.


        :param thermal_conductivity: The thermal_conductivity of this ElectromagneticMaterial.  # noqa: E501
        :type: IsotropicThermalConductivityMethod
        """

        self._thermal_conductivity = thermal_conductivity

    @property
    def core_losses_type(self):
        """Gets the core_losses_type of this ElectromagneticMaterial.  # noqa: E501


        :return: The core_losses_type of this ElectromagneticMaterial.  # noqa: E501
        :rtype: OneOfElectromagneticMaterialCoreLossesType
        """
        return self._core_losses_type

    @core_losses_type.setter
    def core_losses_type(self, core_losses_type):
        """Sets the core_losses_type of this ElectromagneticMaterial.


        :param core_losses_type: The core_losses_type of this ElectromagneticMaterial.  # noqa: E501
        :type: OneOfElectromagneticMaterialCoreLossesType
        """

        self._core_losses_type = core_losses_type

    @property
    def topological_reference(self):
        """Gets the topological_reference of this ElectromagneticMaterial.  # noqa: E501


        :return: The topological_reference of this ElectromagneticMaterial.  # noqa: E501
        :rtype: TopologicalReference
        """
        return self._topological_reference

    @topological_reference.setter
    def topological_reference(self, topological_reference):
        """Sets the topological_reference of this ElectromagneticMaterial.


        :param topological_reference: The topological_reference of this ElectromagneticMaterial.  # noqa: E501
        :type: TopologicalReference
        """

        self._topological_reference = topological_reference

    @property
    def built_in_material(self):
        """Gets the built_in_material of this ElectromagneticMaterial.  # noqa: E501


        :return: The built_in_material of this ElectromagneticMaterial.  # noqa: E501
        :rtype: str
        """
        return self._built_in_material

    @built_in_material.setter
    def built_in_material(self, built_in_material):
        """Sets the built_in_material of this ElectromagneticMaterial.


        :param built_in_material: The built_in_material of this ElectromagneticMaterial.  # noqa: E501
        :type: str
        """

        self._built_in_material = built_in_material

    @property
    def material_library_reference(self):
        """Gets the material_library_reference of this ElectromagneticMaterial.  # noqa: E501


        :return: The material_library_reference of this ElectromagneticMaterial.  # noqa: E501
        :rtype: MaterialLibraryReference
        """
        return self._material_library_reference

    @material_library_reference.setter
    def material_library_reference(self, material_library_reference):
        """Sets the material_library_reference of this ElectromagneticMaterial.


        :param material_library_reference: The material_library_reference of this ElectromagneticMaterial.  # noqa: E501
        :type: MaterialLibraryReference
        """

        self._material_library_reference = material_library_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElectromagneticMaterial):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElectromagneticMaterial):
            return True

        return self.to_dict() != other.to_dict()
